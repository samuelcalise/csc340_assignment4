var searchIndex = JSON.parse('{\
"adler":{"doc":"Adler-32 checksum implementation.","t":"DFLLLLLLLLLLLLLLLL","n":["Adler32","adler32_slice","borrow","borrow_mut","checksum","clone","default","finish","fmt","from","from_checksum","into","new","try_from","try_into","type_id","write","write_slice"],"q":[[0,"adler"]],"d":["Adler-32 checksum calculator.","Calculates the Adler-32 checksum of a byte slice.","","","Returns the calculated checksum at this point in time.","","","","","Returns the argument unchanged.","Creates an <code>Adler32</code> instance from a precomputed Adler-32 …","Calls <code>U::from(self)</code>.","Creates a new Adler-32 instance with default state.","","","","","Adds <code>bytes</code> to the checksum calculation."],"i":[0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],"f":[0,[[[2,[1]]],3],[[]],[[]],[4,3],[4,4],[[],4],[4,5],[[4,6],7],[[]],[3,4],[[]],[[],4],[[],8],[[],8],[[],9],[[4,[2,[1]]]],[[4,[2,[1]]]]],"c":[],"p":[[15,"u8"],[15,"slice"],[15,"u32"],[3,"Adler32"],[15,"u64"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"adler32":{"doc":"A minimal implementation of Adler32 for Rust.","t":"DFLLLLLLLLLLLLLLLLLL","n":["RollingAdler32","adler32","borrow","borrow_mut","clone","clone_into","default","from","from_buffer","from_value","hash","into","new","remove","to_owned","try_from","try_into","type_id","update","update_buffer"],"q":[[0,"adler32"]],"d":["A rolling version of the Adler32 hash, which can ‘forget…","Consume a Read object and returns the Adler32 hash.","","","","","","Returns the argument unchanged.","Convenience function initializing a context from the hash …","Creates an Adler32 context with the given initial value.","Returns the current hash.","Calls <code>U::from(self)</code>.","Creates an empty Adler32 context (with hash 1).","Removes the given <code>byte</code> that was fed to the algorithm <code>size</code> …","","","","","Feeds a new <code>byte</code> to the algorithm to update the hash.","Feeds a vector of bytes to the algorithm to update the …"],"i":[0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],"f":[0,[1,[[3,[2]]]],[[]],[[]],[4,4],[[]],[[],4],[[]],[[[6,[5]]],4],[2,4],[4,2],[[]],[[],4],[[4,7,5]],[[]],[[],8],[[],8],[[],9],[[4,5]],[[4,[6,[5]]]]],"c":[],"p":[[8,"Read"],[15,"u32"],[6,"Result"],[3,"RollingAdler32"],[15,"u8"],[15,"slice"],[15,"usize"],[4,"Result"],[3,"TypeId"]]},\
"array2":{"doc":"","t":"DLLLLMLLLLLLLMM","n":["Array2","borrow","borrow_mut","from","get_element","height","into","iter_col_major","iter_row_major","new_array","try_from","try_into","type_id","vec_of_val","width"],"q":[[0,"array2"]],"d":["","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],[[]],[[1,2,2]],0,[[]],[1,3],[1,3],[[4,2,2],1],[[],5],[[],5],[[],6],0,0],"c":[],"p":[[3,"Array2"],[15,"usize"],[8,"Iterator"],[3,"Vec"],[4,"Result"],[3,"TypeId"]]},\
"bitflags":{"doc":"A typesafe bitmask flag generator useful for sets of …","t":"O","n":["bitflags"],"q":[[0,"bitflags"]],"d":["The macro used to generate the flag structures."],"i":[0],"f":[0],"c":[],"p":[]},\
"bitpack":{"doc":"","t":"AFFFFFF","n":["bitpack","fitss","fitsu","gets","getu","news","newu"],"q":[[0,"bitpack"],[1,"bitpack::bitpack"]],"d":["","Returns true iff the signed value <code>n</code> fits into <code>width</code> signed …","Returns true iff the unsigned value <code>n</code> fits into <code>width</code> …","Retrieve a signed value from <code>word</code>, represented by <code>width</code> …","Retrieve an unsigned value from <code>word</code>, represented by <code>width</code> …","Return a modified version of the unsigned <code>word</code>, which has …","Return a modified version of the unsigned <code>word</code>, which has …"],"i":[0,0,0,0,0,0,0],"f":[0,[[1,2],3],[[2,2],3],[[2,2,2],1],[[2,2,2],2],[[2,2,2,1],[[4,[2]]]],[[2,2,2,2],[[4,[2]]]]],"c":[],"p":[[15,"i64"],[15,"u64"],[15,"bool"],[4,"Option"]]},\
"bytemuck":{"doc":"This crate gives small utilities for casting between plain …","t":"NICIQSSINIEINNIIILLFFFFFFFALLFLLLFFLLLLLLOOLLLLLLLLLLFFFFFFFFLFFLFLLLLLLLLLLLFLLQIENNLLFFFFFLLLLLLFFLLKFFFFFFLFFLFL","n":["AlignmentMismatch","AnyBitPattern","CheckedBitPattern","Contiguous","Int","MAX_VALUE","MIN_VALUE","NoUninit","OutputSliceWouldHaveSlop","Pod","PodCastError","PodInOption","SizeMismatch","TargetAlignmentGreaterAndInputNotAligned","TransparentWrapper","Zeroable","ZeroableInOption","borrow","borrow_mut","bytes_of","bytes_of_mut","cast","cast_mut","cast_ref","cast_slice","cast_slice_mut","checked","clone","eq","fill_zeroes","fmt","fmt","from","from_bytes","from_bytes_mut","from_integer","from_integer","hash","into","into_integer","into_integer","offset_of","offset_of","peel","peel","peel_mut","peel_mut","peel_ref","peel_ref","peel_slice","peel_slice","peel_slice_mut","peel_slice_mut","pod_align_to","pod_align_to_mut","pod_read_unaligned","try_cast","try_cast_mut","try_cast_ref","try_cast_slice","try_cast_slice_mut","try_from","try_from_bytes","try_from_bytes_mut","try_into","try_pod_read_unaligned","type_id","wrap","wrap","wrap_mut","wrap_mut","wrap_ref","wrap_ref","wrap_slice","wrap_slice","wrap_slice_mut","wrap_slice_mut","write_zeroes","zeroed","zeroed","Bits","CheckedBitPattern","CheckedCastError","InvalidBitPattern","PodCastError","borrow","borrow_mut","cast","cast_mut","cast_ref","cast_slice","cast_slice_mut","clone","eq","fmt","fmt","from","from","from_bytes","from_bytes_mut","hash","into","is_valid_bit_pattern","pod_read_unaligned","try_cast","try_cast_mut","try_cast_ref","try_cast_slice","try_cast_slice_mut","try_from","try_from_bytes","try_from_bytes_mut","try_into","try_pod_read_unaligned","type_id"],"q":[[0,"bytemuck"],[80,"bytemuck::checked"]],"d":["For this type of cast the alignments must be exactly the …","Marker trait for “plain old data” types that are valid …","","A trait indicating that:","The primitive integer type with an identical …","The upper <em>inclusive</em> bound for valid instances of this type.","The lower <em>inclusive</em> bound for valid instances of this type.","Marker trait for “plain old data” types with no uninit …","If the element size changes then the output slice changes …","Marker trait for “plain old data”.","The things that can go wrong when casting between <code>Pod</code> data …","Trait for types which are Pod when wrapped in Option.","When casting a slice you can’t convert between ZST …","You tried to cast a slice to an element type with a higher …","A trait which indicates that a type is a …","Trait for types that can be safely created with <code>zeroed</code>.","Trait for types which are Zeroable when wrapped in Option.","","","Re-interprets <code>&amp;T</code> as <code>&amp;[u8]</code>.","Re-interprets <code>&amp;mut T</code> as <code>&amp;mut [u8]</code>.","Cast <code>T</code> into <code>U</code>","Cast <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Cast <code>&amp;T</code> into <code>&amp;U</code>.","Cast <code>&amp;[A]</code> into <code>&amp;[B]</code>.","Cast <code>&amp;mut [T]</code> into <code>&amp;mut [U]</code>.","Checked versions of the casting functions exposed in crate …","","","Fill all bytes of <code>slice</code> with zeroes (see <code>Zeroable</code>).","","","Returns the argument unchanged.","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","If <code>value</code> is within the range for valid instances of this …","If <code>value</code> is within the range for valid instances of this …","","Calls <code>U::from(self)</code>.","Perform the conversion from <code>C</code> into the underlying integral …","Perform the conversion from <code>C</code> into the underlying integral …","Find the offset in bytes of the given <code>$field</code> of <code>$Type</code>. …","Find the offset in bytes of the given <code>$field</code> of <code>$Type</code>. …","Convert the wrapper type into the inner type.","Convert the wrapper type into the inner type.","Convert a mutable reference to the wrapper type into a …","Convert a mutable reference to the wrapper type into a …","Convert a reference to the wrapper type into a reference …","Convert a reference to the wrapper type into a reference …","Convert a slice to the wrapped type into a slice to the …","Convert a slice to the wrapped type into a slice to the …","Convert a mutable slice to the wrapped type into a mutable …","Convert a mutable slice to the wrapped type into a mutable …","As <code>align_to</code>, but safe because of the <code>Pod</code> bound.","As <code>align_to_mut</code>, but safe because of the <code>Pod</code> bound.","Reads the slice into a <code>T</code> value.","Try to cast <code>T</code> into <code>U</code>.","Try to convert a <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Try to convert a <code>&amp;T</code> into <code>&amp;U</code>.","Try to convert <code>&amp;[A]</code> into <code>&amp;[B]</code> (possibly with a change in …","Try to convert <code>&amp;mut [A]</code> into <code>&amp;mut [B]</code> (possibly with a …","","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","","Reads from the bytes as if they were a <code>T</code>.","","Convert the inner type into the wrapper type.","Convert the inner type into the wrapper type.","Convert a mutable reference to the inner type into a …","Convert a mutable reference to the inner type into a …","Convert a reference to the inner type into a reference to …","Convert a reference to the inner type into a reference to …","Convert a slice to the inner type into a slice to the …","Convert a slice to the inner type into a slice to the …","Convert a mutable slice to the inner type into a mutable …","Convert a mutable slice to the inner type into a mutable …","Fill all bytes of <code>target</code> with zeroes (see <code>Zeroable</code>).","Calls <code>zeroed</code>.","Calls <code>zeroed</code>.","<code>Self</code> <em>must</em> have the same layout as the specified <code>Bits</code> …","A marker trait that allows types that have some invalid …","The things that can go wrong when casting between …","When casting to a <code>CheckedBitPattern</code> type, it is possible …","An error occurred during a true-<code>Pod</code> cast","","","Cast <code>T</code> into <code>U</code>","Cast <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Cast <code>&amp;T</code> into <code>&amp;U</code>.","Cast <code>&amp;[A]</code> into <code>&amp;[B]</code>.","Cast <code>&amp;mut [T]</code> into <code>&amp;mut [U]</code>.","","","","","","Returns the argument unchanged.","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","","Calls <code>U::from(self)</code>.","If this function returns true, then it must be valid to …","Reads the slice into a <code>T</code> value.","Try to cast <code>T</code> into <code>U</code>.","Try to convert a <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Try to convert a <code>&amp;T</code> into <code>&amp;U</code>.","Try to convert <code>&amp;[A]</code> into <code>&amp;[B]</code> (possibly with a change in …","Try to convert <code>&amp;mut [A]</code> into <code>&amp;mut [B]</code> (possibly with a …","","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","","Reads from the bytes as if they were a <code>T</code>.",""],"i":[5,0,0,0,17,17,17,0,5,0,0,0,5,5,0,0,0,5,5,0,0,0,0,0,0,0,0,5,5,0,5,5,5,0,0,17,17,5,5,17,17,0,0,18,18,18,18,18,18,18,18,18,18,0,0,0,0,0,0,0,0,5,0,0,5,0,5,18,18,18,18,18,18,18,18,18,18,0,7,7,15,0,0,16,16,16,16,0,0,0,0,0,16,16,16,16,16,16,0,0,16,16,15,0,0,0,0,0,0,16,0,0,16,0,16],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,[[3,[2]]]],[[[0,[1,4]]],[[3,[2]]]],[1,4],[[[0,[1,4]]],[[0,[1,4]]]],[1,4],[[[3,[1]]],[[3,[4]]]],[[[3,[[0,[1,4]]]]],[[3,[[0,[1,4]]]]]],0,[5,5],[[5,5],6],[[[3,[7]]]],[[5,8],9],[[5,8],9],[[]],[[[3,[2]]],4],[[[3,[2]]],[[0,[1,4]]]],[[],10],[[],10],[[5,11]],[[]],[[]],[[]],0,0,[12,12],[12,12],[[]],[[]],[[]],[[]],[[[3,[12]]],[[3,[12]]]],[[[3,[12]]],[[3,[12]]]],[[[3,[12]]],[[3,[12]]]],[[[3,[12]]],[[3,[12]]]],[[[3,[1]]]],[[[3,[[0,[1,4]]]]]],[[[3,[2]]],4],[1,[[13,[4,5]]]],[[[0,[1,4]]],[[13,[[0,[1,4]],5]]]],[1,[[13,[4,5]]]],[[[3,[1]]],[[13,[[3,[4]],5]]]],[[[3,[[0,[1,4]]]]],[[13,[[3,[[0,[1,4]]]],5]]]],[[],13],[[[3,[2]]],[[13,[4,5]]]],[[[3,[2]]],[[13,[[0,[1,4]],5]]]],[[],13],[[[3,[2]]],[[13,[4,5]]]],[[],14],[12,12],[12,12],[[]],[[]],[[]],[[]],[[[3,[12]]],[[3,[12]]]],[[[3,[12]]],[[3,[12]]]],[[[3,[12]]],[[3,[12]]]],[[[3,[12]]],[[3,[12]]]],[7],[[]],[[]],0,0,0,0,0,[[]],[[]],[1,15],[[[0,[1,4]]],[[0,[1,15]]]],[1,15],[[[3,[1]]],[[3,[15]]]],[[[3,[[0,[1,4]]]]],[[3,[[0,[1,15]]]]]],[16,16],[[16,16],6],[[16,8],9],[[16,8],9],[5,16],[[]],[[[3,[2]]],15],[[[3,[2]]],[[0,[1,15]]]],[[16,11]],[[]],[[],6],[[[3,[2]]],15],[1,[[13,[15,16]]]],[[[0,[1,4]]],[[13,[[0,[15,1]],16]]]],[1,[[13,[15,16]]]],[[[3,[1]]],[[13,[[3,[15]],16]]]],[[[3,[[0,[1,4]]]]],[[13,[[3,[[0,[15,1]]]],16]]]],[[],13],[[[3,[2]]],[[13,[15,16]]]],[[[3,[2]]],[[13,[[0,[15,1]],16]]]],[[],13],[[[3,[2]]],[[13,[15,16]]]],[[],14]],"c":[],"p":[[8,"NoUninit"],[15,"u8"],[15,"slice"],[8,"AnyBitPattern"],[4,"PodCastError"],[15,"bool"],[8,"Zeroable"],[3,"Formatter"],[6,"Result"],[4,"Option"],[8,"Hasher"],[8,"Sized"],[4,"Result"],[3,"TypeId"],[8,"CheckedBitPattern"],[4,"CheckedCastError"],[8,"Contiguous"],[8,"TransparentWrapper"]]},\
"byteorder":{"doc":"This crate provides convenience methods for encoding and …","t":"GEIGEGGIILLLLLLLLLLLLLLLLLLLLKLLKLLLLLLKLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLLLKLLLLKLLLLLLLKLLLLKLLLLLLLKLLLLKLLLLLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLKLLLLKLLLLLKLLLLKLLLLLKLLLLKLLLLKLLLLKLLLL","n":["BE","BigEndian","ByteOrder","LE","LittleEndian","NativeEndian","NetworkEndian","ReadBytesExt","WriteBytesExt","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","default","default","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from_slice_f32","from_slice_f32","from_slice_f32","from_slice_f64","from_slice_f64","from_slice_f64","from_slice_i128","from_slice_i16","from_slice_i32","from_slice_i64","from_slice_u128","from_slice_u128","from_slice_u128","from_slice_u16","from_slice_u16","from_slice_u16","from_slice_u32","from_slice_u32","from_slice_u32","from_slice_u64","from_slice_u64","from_slice_u64","hash","hash","into","into","partial_cmp","partial_cmp","read_f32","read_f32","read_f32","read_f32_into","read_f32_into","read_f32_into","read_f32_into_unchecked","read_f32_into_unchecked","read_f32_into_unchecked","read_f64","read_f64","read_f64","read_f64_into","read_f64_into","read_f64_into","read_f64_into_unchecked","read_f64_into_unchecked","read_f64_into_unchecked","read_i128","read_i128","read_i128","read_i128_into","read_i128_into","read_i128_into","read_i16","read_i16","read_i16","read_i16_into","read_i16_into","read_i16_into","read_i24","read_i24","read_i24","read_i32","read_i32","read_i32","read_i32_into","read_i32_into","read_i32_into","read_i48","read_i48","read_i48","read_i64","read_i64","read_i64","read_i64_into","read_i64_into","read_i64_into","read_i8","read_i8","read_i8_into","read_i8_into","read_int","read_int","read_int","read_int128","read_int128","read_int128","read_u128","read_u128","read_u128","read_u128","read_u128","read_u128_into","read_u128_into","read_u128_into","read_u128_into","read_u128_into","read_u16","read_u16","read_u16","read_u16","read_u16","read_u16_into","read_u16_into","read_u16_into","read_u16_into","read_u16_into","read_u24","read_u24","read_u24","read_u32","read_u32","read_u32","read_u32","read_u32","read_u32_into","read_u32_into","read_u32_into","read_u32_into","read_u32_into","read_u48","read_u48","read_u48","read_u64","read_u64","read_u64","read_u64","read_u64","read_u64_into","read_u64_into","read_u64_into","read_u64_into","read_u64_into","read_u8","read_u8","read_uint","read_uint","read_uint","read_uint","read_uint","read_uint128","read_uint128","read_uint128","read_uint128","read_uint128","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write_f32","write_f32","write_f32","write_f32_into","write_f64","write_f64","write_f64","write_f64_into","write_i128","write_i128","write_i128","write_i128_into","write_i16","write_i16","write_i16","write_i16_into","write_i24","write_i24","write_i24","write_i32","write_i32","write_i32","write_i32_into","write_i48","write_i48","write_i48","write_i64","write_i64","write_i64","write_i64_into","write_i8","write_i8","write_i8_into","write_int","write_int","write_int","write_int128","write_int128","write_int128","write_u128","write_u128","write_u128","write_u128","write_u128","write_u128_into","write_u128_into","write_u128_into","write_u16","write_u16","write_u16","write_u16","write_u16","write_u16_into","write_u16_into","write_u16_into","write_u24","write_u24","write_u24","write_u32","write_u32","write_u32","write_u32","write_u32","write_u32_into","write_u32_into","write_u32_into","write_u48","write_u48","write_u48","write_u64","write_u64","write_u64","write_u64","write_u64","write_u64_into","write_u64_into","write_u64_into","write_u8","write_u8","write_uint","write_uint","write_uint","write_uint","write_uint","write_uint128","write_uint128","write_uint128","write_uint128","write_uint128"],"q":[[0,"byteorder"]],"d":["A type alias for <code>BigEndian</code>.","Defines big-endian serialization.","<code>ByteOrder</code> describes types that can serialize integers as …","A type alias for <code>LittleEndian</code>.","Defines little-endian serialization.","Defines system native-endian serialization.","Defines network byte order serialization.","Extends <code>Read</code> with methods for reading numbers. (For <code>std::io</code>…","Extends <code>Write</code> with methods for writing numbers. (For …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Converts the given slice of IEEE754 single-precision (4 …","","","Converts the given slice of IEEE754 double-precision (8 …","","","Converts the given slice of signed 128 bit integers to a …","Converts the given slice of signed 16 bit integers to a …","Converts the given slice of signed 32 bit integers to a …","Converts the given slice of signed 64 bit integers to a …","Converts the given slice of unsigned 128 bit integers to a …","","","Converts the given slice of unsigned 16 bit integers to a …","","","Converts the given slice of unsigned 32 bit integers to a …","","","Converts the given slice of unsigned 64 bit integers to a …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a sequence of IEEE754 single-precision (4 bytes) …","Reads a sequence of IEEE754 single-precision (4 bytes) …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a sequence of IEEE754 double-precision (8 bytes) …","Reads a sequence of IEEE754 double-precision (8 bytes) …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","Reads a signed 128 bit integer from the underlying reader.","Reads a signed 128 bit integer from the underlying reader.","Reads a signed 128 bit integer from <code>buf</code>.","Reads a sequence of signed 128 bit integers from the …","Reads a sequence of signed 128 bit integers from the …","Reads signed 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 16 bit integer from the underlying reader.","Reads a signed 16 bit integer from the underlying reader.","Reads a signed 16 bit integer from <code>buf</code>.","Reads a sequence of signed 16 bit integers from the …","Reads a sequence of signed 16 bit integers from the …","Reads signed 16 bit integers from <code>src</code> to <code>dst</code>.","Reads a signed 24 bit integer from the underlying reader.","Reads a signed 24 bit integer from the underlying reader.","Reads a signed 24 bit integer from <code>buf</code>, stored in i32.","Reads a signed 32 bit integer from the underlying reader.","Reads a signed 32 bit integer from the underlying reader.","Reads a signed 32 bit integer from <code>buf</code>.","Reads a sequence of signed 32 bit integers from the …","Reads a sequence of signed 32 bit integers from the …","Reads signed 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 48 bit integer from the underlying reader.","Reads a signed 48 bit integer from the underlying reader.","Reads a signed 48 bit integer from <code>buf</code>, stored in i64.","Reads a signed 64 bit integer from the underlying reader.","Reads a signed 64 bit integer from the underlying reader.","Reads a signed 64 bit integer from <code>buf</code>.","Reads a sequence of signed 64 bit integers from the …","Reads a sequence of signed 64 bit integers from the …","Reads signed 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 8 bit integer from the underlying reader.","Reads a signed 8 bit integer from the underlying reader.","Reads a sequence of signed 8 bit integers from the …","Reads a sequence of signed 8 bit integers from the …","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from <code>buf</code>.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from <code>buf</code>.","Reads an unsigned 128 bit integer from <code>buf</code>.","Reads an unsigned 128 bit integer from the underlying …","Reads an unsigned 128 bit integer from the underlying …","","","Reads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 128 bit integers from the …","Reads a sequence of unsigned 128 bit integers from the …","","","Reads an unsigned 16 bit integer from <code>buf</code>.","Reads an unsigned 16 bit integer from the underlying …","Reads an unsigned 16 bit integer from the underlying …","","","Reads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 16 bit integers from the …","Reads a sequence of unsigned 16 bit integers from the …","","","Reads an unsigned 24 bit integer from the underlying …","Reads an unsigned 24 bit integer from the underlying …","Reads an unsigned 24 bit integer from <code>buf</code>, stored in u32.","Reads an unsigned 32 bit integer from <code>buf</code>.","Reads an unsigned 32 bit integer from the underlying …","Reads an unsigned 32 bit integer from the underlying …","","","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 32 bit integers from the …","Reads a sequence of unsigned 32 bit integers from the …","","","Reads an unsigned 48 bit integer from the underlying …","Reads an unsigned 48 bit integer from the underlying …","Reads an unsigned 48 bit integer from <code>buf</code>, stored in u64.","Reads an unsigned 64 bit integer from <code>buf</code>.","Reads an unsigned 64 bit integer from the underlying …","Reads an unsigned 64 bit integer from the underlying …","","","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 64 bit integers from the …","Reads a sequence of unsigned 64 bit integers from the …","","","Reads an unsigned 8 bit integer from the underlying reader.","Reads an unsigned 8 bit integer from the underlying reader.","Reads an unsigned n-bytes integer from <code>buf</code>.","Reads an unsigned n-bytes integer from the underlying …","Reads an unsigned n-bytes integer from the underlying …","","","Reads an unsigned n-bytes integer from <code>buf</code>.","Reads an unsigned n-bytes integer from the underlying …","Reads an unsigned n-bytes integer from the underlying …","","","","","","","","","","","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes IEEE754 double-precision (8 bytes) floating point …","Writes a signed 128 bit integer to the underlying writer.","Writes a signed 128 bit integer to the underlying writer.","Writes a signed 128 bit integer <code>n</code> to <code>buf</code>.","Writes signed 128 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 16 bit integer to the underlying writer.","Writes a signed 16 bit integer to the underlying writer.","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.","Writes signed 16 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 24 bit integer to the underlying writer.","Writes a signed 24 bit integer to the underlying writer.","Writes a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.","Writes a signed 32 bit integer to the underlying writer.","Writes a signed 32 bit integer to the underlying writer.","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.","Writes signed 32 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 48 bit integer to the underlying writer.","Writes a signed 48 bit integer to the underlying writer.","Writes a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.","Writes a signed 64 bit integer to the underlying writer.","Writes a signed 64 bit integer to the underlying writer.","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.","Writes signed 64 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 8 bit integer to the underlying writer.","Writes a signed 8 bit integer to the underlying writer.","Writes signed 8 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned 128 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 128 bit integer to the underlying …","Writes an unsigned 128 bit integer to the underlying …","","","Writes unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 16 bit integer to the underlying writer.","Writes an unsigned 16 bit integer to the underlying writer.","","","Writes unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 24 bit integer to the underlying writer.","Writes an unsigned 24 bit integer to the underlying writer.","Writes an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 32 bit integer to the underlying writer.","Writes an unsigned 32 bit integer to the underlying writer.","","","Writes unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 48 bit integer to the underlying writer.","Writes an unsigned 48 bit integer to the underlying writer.","Writes an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 64 bit integer to the underlying writer.","Writes an unsigned 64 bit integer to the underlying writer.","","","Writes unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 8 bit integer to the underlying writer.","Writes an unsigned 8 bit integer to the underlying writer.","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned n-bytes integer to the underlying …","Writes an unsigned n-bytes integer to the underlying …","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned n-bytes integer to the underlying …","Writes an unsigned n-bytes integer to the underlying …","",""],"i":[0,0,0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,26,1,2,26,1,2,26,26,26,26,26,1,2,26,1,2,26,1,2,26,1,2,1,2,1,2,1,2,27,27,26,27,27,26,27,27,26,27,27,26,27,27,26,27,27,26,27,27,26,27,27,26,27,27,26,27,27,26,27,27,26,27,27,26,27,27,26,27,27,26,27,27,26,27,27,26,27,27,27,27,27,27,26,27,27,26,26,27,27,1,2,26,27,27,1,2,26,27,27,1,2,26,27,27,1,2,27,27,26,26,27,27,1,2,26,27,27,1,2,27,27,26,26,27,27,1,2,26,27,27,1,2,27,27,26,27,27,1,2,26,27,27,1,2,1,2,1,2,1,2,1,2,28,28,26,26,28,28,26,26,28,28,26,26,28,28,26,26,28,28,26,28,28,26,26,28,28,26,28,28,26,26,28,28,26,28,28,26,28,28,26,26,28,28,1,2,26,1,2,26,28,28,1,2,26,1,2,28,28,26,26,28,28,1,2,26,1,2,28,28,26,26,28,28,1,2,26,1,2,28,28,26,28,28,1,2,26,28,28,1,2],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[[1,1],3],[[2,2],3],[[],1],[[],2],[[1,1],4],[[2,2],4],[[],4],[[],4],[[1,5],6],[[2,5],6],[[]],[[]],[[[8,[7]]]],[[[8,[7]]]],[[[8,[7]]]],[[[8,[9]]]],[[[8,[9]]]],[[[8,[9]]]],[[[8,[10]]]],[[[8,[11]]]],[[[8,[12]]]],[[[8,[13]]]],[[[8,[14]]]],[[[8,[14]]]],[[[8,[14]]]],[[[8,[15]]]],[[[8,[15]]]],[[[8,[15]]]],[[[8,[16]]]],[[[8,[16]]]],[[[8,[16]]]],[[[8,[17]]]],[[[8,[17]]]],[[[8,[17]]]],[[1,18]],[[2,18]],[[]],[[]],[[1,1],[[19,[3]]]],[[2,2],[[19,[3]]]],[[],[[20,[7]]]],[[],[[20,[7]]]],[[[8,[21]]],7],[[[8,[7]]],20],[[[8,[7]]],20],[[[8,[21]],[8,[7]]]],[[[8,[7]]],20],[[[8,[7]]],20],[[[8,[21]],[8,[7]]]],[[],[[20,[9]]]],[[],[[20,[9]]]],[[[8,[21]]],9],[[[8,[9]]],20],[[[8,[9]]],20],[[[8,[21]],[8,[9]]]],[[[8,[9]]],20],[[[8,[9]]],20],[[[8,[21]],[8,[9]]]],[[],[[20,[10]]]],[[],[[20,[10]]]],[[[8,[21]]],10],[[[8,[10]]],20],[[[8,[10]]],20],[[[8,[21]],[8,[10]]]],[[],[[20,[11]]]],[[],[[20,[11]]]],[[[8,[21]]],11],[[[8,[11]]],20],[[[8,[11]]],20],[[[8,[21]],[8,[11]]]],[[],[[20,[12]]]],[[],[[20,[12]]]],[[[8,[21]]],12],[[],[[20,[12]]]],[[],[[20,[12]]]],[[[8,[21]]],12],[[[8,[12]]],20],[[[8,[12]]],20],[[[8,[21]],[8,[12]]]],[[],[[20,[13]]]],[[],[[20,[13]]]],[[[8,[21]]],13],[[],[[20,[13]]]],[[],[[20,[13]]]],[[[8,[21]]],13],[[[8,[13]]],20],[[[8,[13]]],20],[[[8,[21]],[8,[13]]]],[[],[[20,[22]]]],[[],[[20,[22]]]],[[[8,[22]]],20],[[[8,[22]]],20],[23,[[20,[13]]]],[23,[[20,[13]]]],[[[8,[21]],23],13],[23,[[20,[10]]]],[23,[[20,[10]]]],[[[8,[21]],23],10],[[[8,[21]]],14],[[],[[20,[14]]]],[[],[[20,[14]]]],[[[8,[21]]],14],[[[8,[21]]],14],[[[8,[21]],[8,[14]]]],[[[8,[14]]],20],[[[8,[14]]],20],[[[8,[21]],[8,[14]]]],[[[8,[21]],[8,[14]]]],[[[8,[21]]],15],[[],[[20,[15]]]],[[],[[20,[15]]]],[[[8,[21]]],15],[[[8,[21]]],15],[[[8,[21]],[8,[15]]]],[[[8,[15]]],20],[[[8,[15]]],20],[[[8,[21]],[8,[15]]]],[[[8,[21]],[8,[15]]]],[[],[[20,[16]]]],[[],[[20,[16]]]],[[[8,[21]]],16],[[[8,[21]]],16],[[],[[20,[16]]]],[[],[[20,[16]]]],[[[8,[21]]],16],[[[8,[21]]],16],[[[8,[21]],[8,[16]]]],[[[8,[16]]],20],[[[8,[16]]],20],[[[8,[21]],[8,[16]]]],[[[8,[21]],[8,[16]]]],[[],[[20,[17]]]],[[],[[20,[17]]]],[[[8,[21]]],17],[[[8,[21]]],17],[[],[[20,[17]]]],[[],[[20,[17]]]],[[[8,[21]]],17],[[[8,[21]]],17],[[[8,[21]],[8,[17]]]],[[[8,[17]]],20],[[[8,[17]]],20],[[[8,[21]],[8,[17]]]],[[[8,[21]],[8,[17]]]],[[],[[20,[21]]]],[[],[[20,[21]]]],[[[8,[21]],23],17],[23,[[20,[17]]]],[23,[[20,[17]]]],[[[8,[21]],23],17],[[[8,[21]],23],17],[[[8,[21]],23],14],[23,[[20,[14]]]],[23,[[20,[14]]]],[[[8,[21]],23],14],[[[8,[21]],23],14],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],25],[[],25],[7,20],[7,20],[[[8,[21]],7]],[[[8,[7]],[8,[21]]]],[9,20],[9,20],[[[8,[21]],9]],[[[8,[9]],[8,[21]]]],[10,20],[10,20],[[[8,[21]],10]],[[[8,[10]],[8,[21]]]],[11,20],[11,20],[[[8,[21]],11]],[[[8,[11]],[8,[21]]]],[12,20],[12,20],[[[8,[21]],12]],[12,20],[12,20],[[[8,[21]],12]],[[[8,[12]],[8,[21]]]],[13,20],[13,20],[[[8,[21]],13]],[13,20],[13,20],[[[8,[21]],13]],[[[8,[13]],[8,[21]]]],[22,20],[22,20],[[[8,[22]],[8,[21]]]],[[13,23],20],[[13,23],20],[[[8,[21]],13,23]],[[10,23],20],[[10,23],20],[[[8,[21]],10,23]],[[[8,[21]],14]],[14,20],[14,20],[[[8,[21]],14]],[[[8,[21]],14]],[[[8,[14]],[8,[21]]]],[[[8,[14]],[8,[21]]]],[[[8,[14]],[8,[21]]]],[[[8,[21]],15]],[15,20],[15,20],[[[8,[21]],15]],[[[8,[21]],15]],[[[8,[15]],[8,[21]]]],[[[8,[15]],[8,[21]]]],[[[8,[15]],[8,[21]]]],[16,20],[16,20],[[[8,[21]],16]],[[[8,[21]],16]],[16,20],[16,20],[[[8,[21]],16]],[[[8,[21]],16]],[[[8,[16]],[8,[21]]]],[[[8,[16]],[8,[21]]]],[[[8,[16]],[8,[21]]]],[17,20],[17,20],[[[8,[21]],17]],[[[8,[21]],17]],[17,20],[17,20],[[[8,[21]],17]],[[[8,[21]],17]],[[[8,[17]],[8,[21]]]],[[[8,[17]],[8,[21]]]],[[[8,[17]],[8,[21]]]],[21,20],[21,20],[[[8,[21]],17,23]],[[17,23],20],[[17,23],20],[[[8,[21]],17,23]],[[[8,[21]],17,23]],[[[8,[21]],14,23]],[[14,23],20],[[14,23],20],[[[8,[21]],14,23]],[[[8,[21]],14,23]]],"c":[63,64,65,72,73,74],"p":[[4,"BigEndian"],[4,"LittleEndian"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"f32"],[15,"slice"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"],[8,"Hasher"],[4,"Option"],[6,"Result"],[15,"u8"],[15,"i8"],[15,"usize"],[4,"Result"],[3,"TypeId"],[8,"ByteOrder"],[8,"ReadBytesExt"],[8,"WriteBytesExt"]]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":"O","n":["cfg_if"],"q":[[0,"cfg_if"]],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[0],"c":[],"p":[]},\
"color_quant":{"doc":"Color quantization library","t":"DLLLLLLLLLLLLLL","n":["NeuQuant","borrow","borrow_mut","color_map_rgb","color_map_rgba","from","index_of","init","into","lookup","map_pixel","new","try_from","try_into","type_id"],"q":[[0,"color_quant"]],"d":["","","","Returns the RGBA color map calculated from the sample.","Returns the RGBA color map calculated from the sample.","Returns the argument unchanged.","Finds the best-matching index in the color map.","Initializes the neuronal network and trains it with the …","Calls <code>U::from(self)</code>.","Lookup pixel values for color at <code>idx</code> in the colormap.","Maps the rgba-pixel in-place to the best-matching color in …","Creates a new neuronal network and trains it with the …","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],[1,[[3,[2]]]],[1,[[3,[2]]]],[[]],[[1,[4,[2]]],5],[[1,[4,[2]]]],[[]],[[1,5],[[7,[[6,[2]]]]]],[[1,[4,[2]]]],[[8,5,[4,[2]]],1],[[],9],[[],9],[[],10]],"c":[],"p":[[3,"NeuQuant"],[15,"u8"],[3,"Vec"],[15,"slice"],[15,"usize"],[15,"array"],[4,"Option"],[15,"i32"],[4,"Result"],[3,"TypeId"]]},\
"crc32fast":{"doc":"Fast, SIMD-accelerated CRC32 (IEEE) checksum computation.","t":"DLLLLLLLLLLFLLLLLLLLLLL","n":["Hasher","borrow","borrow_mut","clone","clone_into","combine","default","finalize","finish","fmt","from","hash","into","new","new_with_initial","new_with_initial_len","reset","to_owned","try_from","try_into","type_id","update","write"],"q":[[0,"crc32fast"]],"d":["Represents an in-progress CRC32 computation.","","","","","Combine the hash state with the hash state for the …","","Finalize the hash state and return the computed CRC32 …","","","Returns the argument unchanged.","Computes the CRC32 hash of a byte slice.","Calls <code>U::from(self)</code>.","Create a new <code>Hasher</code>.","Create a new <code>Hasher</code> with an initial CRC32 state.","Create a new <code>Hasher</code> with an initial CRC32 state.","Reset the hash state.","","","","","Process the given byte slice and update the hash state.",""],"i":[0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],[1,1],[[]],[[1,1]],[[],1],[1,2],[1,3],[[1,4],5],[[]],[[[7,[6]]],2],[[]],[[],1],[2,1],[[2,3],1],[1],[[]],[[],8],[[],8],[[],9],[[1,[7,[6]]]],[[1,[7,[6]]]]],"c":[],"p":[[3,"Hasher"],[15,"u32"],[15,"u64"],[3,"Formatter"],[6,"Result"],[15,"u8"],[15,"slice"],[4,"Result"],[3,"TypeId"]]},\
"crossbeam_deque":{"doc":"Concurrent work-stealing deques.","t":"NDNEDNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Empty","Injector","Retry","Steal","Stealer","Success","Worker","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","eq","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from_iter","init","init","init","init","into","into","into","into","is_empty","is_empty","is_empty","is_empty","is_retry","is_success","len","len","len","new","new_fifo","new_lifo","or_else","pop","push","push","steal","steal","steal_batch","steal_batch","steal_batch_and_pop","steal_batch_and_pop","steal_batch_with_limit","steal_batch_with_limit","steal_batch_with_limit_and_pop","steal_batch_with_limit_and_pop","stealer","success","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"crossbeam_deque"]],"d":["The queue was empty at the time of stealing.","An injector queue.","The steal operation needs to be retried.","Possible outcomes of a steal operation.","A stealer handle of a worker queue.","At least one task was successfully stolen.","A worker queue.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Consumes items until a <code>Success</code> is found and returns it.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue was empty at the time of …","Returns <code>true</code> if the steal operation needs to be retried.","Returns <code>true</code> if at least one task was stolen.","Returns the number of tasks in the deque.","Returns the number of tasks in the deque.","Returns the number of tasks in the queue.","Creates a new injector queue.","Creates a FIFO worker queue.","Creates a LIFO worker queue.","If no task was stolen, attempts another steal operation.","Pops a task from the queue.","Pushes a task into the queue.","Pushes a task into the queue.","Steals a task from the queue.","Steals a task from the queue.","Steals a batch of tasks and pushes them into another …","Steals a batch of tasks and pushes them into a worker.","Steals a batch of tasks, pushes them into another worker, …","Steals a batch of tasks, pushes them into a worker, and …","Steals no more than <code>limit</code> of tasks and pushes them into …","Steals no more than of tasks and pushes them into a worker.","Steals no more than <code>limit</code> of tasks, pushes them into …","Steals no more than <code>limit</code> of tasks, pushes them into a …","Creates a stealer for this queue.","Returns the result of the operation, if successful.","","","","","","","","","","","","","",""],"i":[3,0,3,0,0,3,0,8,1,4,3,8,1,4,3,1,3,1,3,4,8,1,4,3,8,1,4,3,8,1,4,4,3,3,3,8,1,4,3,8,1,4,3,3,8,1,4,3,8,1,4,3,8,1,4,3,3,3,8,1,4,4,8,8,3,8,8,4,1,4,1,4,1,4,1,4,1,4,8,3,1,3,8,1,4,3,8,1,4,3,8,1,4,3],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[[[3,[2]]],[[3,[2]]]],[[]],[[]],[[],4],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[4],[5],[[[3,[6]],[3,[6]]],7],[[],7],[[8,9],10],[[1,9],10],[[4,9],10],[[3,9],10],[[]],[[]],[[]],[[]],[11,3],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[8,7],[1,7],[4,7],[3,7],[3,7],[3,7],[8,5],[1,5],[4,5],[[],4],[[],8],[[],8],[[3,12],3],[8,13],[8],[4],[1,3],[4,3],[[1,8],3],[[4,8],3],[[1,8],3],[[4,8],3],[[1,8,5],3],[[4,8,5],3],[[1,8,5],3],[[4,8,5],3],[8,1],[3,13],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15]],"c":[],"p":[[3,"Stealer"],[8,"Clone"],[4,"Steal"],[3,"Injector"],[15,"usize"],[8,"PartialEq"],[15,"bool"],[3,"Worker"],[3,"Formatter"],[6,"Result"],[8,"IntoIterator"],[8,"FnOnce"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"crossbeam_epoch":{"doc":"Epoch-based memory reclamation.","t":"SDDGIDDQDDIIDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLFLLLKLLLLLLLLLKLLLLLLLLLKLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLKLLLFLLLLLLMLLLFLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLL","n":["ALIGN","Atomic","Collector","CompareAndSetError","CompareAndSetOrdering","CompareExchangeError","Guard","Init","LocalHandle","Owned","Pointable","Pointer","Shared","as_mut","as_raw","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","collector","collector","compare_and_set","compare_and_set_weak","compare_exchange","compare_exchange_weak","current","default","default","default","default_collector","defer","defer_destroy","defer_unchecked","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","equivalent","equivalent","failure","fetch_and","fetch_or","fetch_update","fetch_xor","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_raw","from_usize","from_usize","from_usize","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into_box","into_owned","into_owned","into_shared","into_usize","into_usize","into_usize","is_null","is_pinned","is_pinned","load","load_consume","new","new","new","new","null","null","partial_cmp","pin","pin","register","repin","repin_after","store","success","swap","tag","tag","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into_owned","try_into_owned","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unprotected","with_tag","with_tag"],"q":[[0,"crossbeam_epoch"]],"d":["The alignment of pointer.","An atomic pointer that can be safely shared between …","An epoch-based garbage collector.","The error returned on failed compare-and-set operation.","Memory orderings for compare-and-set operations.","The error returned on failed compare-and-swap operation.","A guard that keeps the current thread pinned.","The type for initializers.","A handle to a garbage collector.","An owned heap-allocated object.","Types that are pointed to by a single word.","A trait for either <code>Owned</code> or <code>Shared</code> pointers.","A pointer to an object protected by the epoch GC.","","Converts the pointer to a raw pointer (without the tag).","","Converts the pointer to a reference.","","","","","","","","","","","","","","","","","Returns a copy of the atomic value.","","","Creates another reference to the same garbage collector.","","","","","","Returns the <code>Collector</code> associated with this handle.","Returns the <code>Collector</code> associated with this guard.","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","The value in the atomic pointer at the time of the failed …","","","","Returns the default global collector.","Stores a function so that it can be executed at some point …","Stores a destructor for an object so that it can be …","Stores a function so that it can be executed at some point …","Dereferences the given pointer.","","","","","Dereferences the pointer.","","","","","Mutably dereferences the given pointer.","","","","","","Dereferences the pointer.","","","","Drops the object pointed to by the given pointer.","","","","","","","","","","","","Checks if both handles point to the same collector.","","","The ordering of the operation when it fails.","Bitwise “and” with the current tag.","Bitwise “or” with the current tag.","Fetches the pointer, and then applies a function to it …","Bitwise “xor” with the current tag.","Clears up the thread-local cache of deferred functions by …","","","","","","","","","","Returns the argument unchanged.","Returns a new atomic pointer pointing to <code>ptr</code>.","Returns a new atomic pointer pointing to <code>raw</code>.","","","Returns the argument unchanged.","Returns a new atomic pointer pointing to <code>owned</code>.","","Returns a new owned pointer pointing to <code>b</code>.","Returns the argument unchanged.","","","Returns a new pointer pointing to <code>raw</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a new owned pointer pointing to <code>raw</code>.","Returns a new pointer pointing to the tagged pointer <code>data</code>.","Returns a new pointer pointing to the tagged pointer <code>data</code>.","","Initializes a with the given initializer.","","Allocates <code>value</code> on the heap and returns a new atomic …","","","Allocates <code>value</code> on the heap and returns a new owned …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the owned pointer into a <code>Box</code>.","Takes ownership of the pointee.","Takes ownership of the pointee.","Converts the owned pointer into a <code>Shared</code>.","Returns the machine representation of the pointer.","","","Returns <code>true</code> if the pointer is null.","Returns <code>true</code> if the current thread is pinned.","Returns <code>true</code> if the handle is pinned.","Loads a <code>Shared</code> from the atomic pointer.","Loads a <code>Shared</code> from the atomic pointer using a “consume…","Allocates <code>value</code> on the heap and returns a new atomic …","Allocates <code>value</code> on the heap and returns a new owned …","Creates a new collector.","The new value, which the operation failed to store.","Returns a new null atomic pointer.","Returns a new null pointer.","","Pins the current thread.","Pins the handle.","Registers a new handle for the collector.","Unpins and then immediately re-pins the thread.","Temporarily unpins the thread, executes the given function …","Stores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer.","The ordering of the operation when it succeeds.","Stores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer, …","Returns the tag stored within the pointer.","Returns the tag stored within the pointer.","","","","","","","","","","","","","","","","","","","Takes ownership of the pointee if it is non-null.","Takes ownership of the pointee if it is not null.","","","","","","","","Returns a reference to a dummy guard that allows …","Returns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …","Returns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …"],"i":[2,0,0,0,0,0,0,2,0,0,0,0,0,3,4,3,4,17,6,3,3,4,8,10,11,17,6,3,3,4,8,10,11,6,3,4,8,6,3,4,8,4,10,11,6,6,6,6,17,6,4,8,0,11,11,11,2,17,6,3,3,4,4,8,10,11,2,17,6,3,3,4,4,8,10,11,2,17,6,3,3,4,8,10,10,11,11,4,8,4,8,13,6,6,6,6,11,17,6,6,3,4,4,8,10,11,17,6,6,6,6,6,6,6,3,3,3,3,4,4,8,10,11,3,12,3,4,2,17,6,6,3,3,4,8,10,11,17,6,3,4,8,10,11,3,6,4,3,12,3,4,4,0,10,6,6,6,3,8,17,6,4,4,0,10,8,11,11,6,13,6,3,4,6,3,4,8,17,6,3,4,8,10,11,17,6,3,4,8,10,11,6,4,17,6,3,4,8,10,11,0,3,4],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[[3,[[0,[1,2]]]]],[[0,[1,2]]]],[4],[[[3,[[0,[1,2]]]]],[[0,[1,2]]]],[[[4,[[0,[1,2]]]]],[[5,[[0,[1,2]]]]]],[[]],[[]],[[[3,[[0,[1,2]]]]],[[0,[1,2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[[0,[1,2]]]]],[[0,[1,2]]]],[[]],[[]],[[]],[[]],[[[6,[[0,[1,2]]]]],[[6,[[0,[1,2]]]]]],[[[3,[7]]],[[3,[7]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[8,8],[[]],[[]],[[]],[[]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],9],[10,8],[11,[[5,[8]]]],[[[6,[[0,[1,2]]]],[4,[[0,[1,2]]]],[12,[[0,[1,2]]]],13,11],[[15,[[4,[[0,[1,2]]]],[14,[[0,[1,2]],[12,[[0,[1,2]]]]]]]]]],[[[6,[[0,[1,2]]]],[4,[[0,[1,2]]]],[12,[[0,[1,2]]]],13,11],[[15,[[4,[[0,[1,2]]]],[14,[[0,[1,2]],[12,[[0,[1,2]]]]]]]]]],[[[6,[[0,[1,2]]]],[4,[[0,[1,2]]]],[12,[[0,[1,2]]]],16,16,11],[[15,[[4,[[0,[1,2]]]],[17,[[0,[1,2]],[12,[[0,[1,2]]]]]]]]]],[[[6,[[0,[1,2]]]],[4,[[0,[1,2]]]],[12,[[0,[1,2]]]],16,16,11],[[15,[[4,[[0,[1,2]]]],[17,[[0,[1,2]],[12,[[0,[1,2]]]]]]]]]],0,[[],[[6,[[0,[1,2]]]]]],[[],[[4,[[0,[1,2]]]]]],[[],8],[[],8],[[11,[0,[18,19]]]],[[11,4]],[[11,18]],[20],[20],[20],[[[3,[[0,[1,2]]]]],[[0,[1,2]]]],[20],[[[4,[[0,[1,2]]]]],[[0,[1,2]]]],[20],[20],[20],[20],[20],[20],[20],[20],[[[3,[[0,[1,2]]]]],[[0,[1,2]]]],[20],[[[4,[[0,[1,2]]]]],[[0,[1,2]]]],[20],[20],[20],[20],[20],[20],[20],[[[3,[[0,[1,2]]]]]],[20],[20],[20],[10],[20],[11],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],21],[[8,8],21],[[],21],[[],21],[[],16],[[[6,[[0,[1,2]]]],20,16,11],[[4,[[0,[1,2]]]]]],[[[6,[[0,[1,2]]]],20,16,11],[[4,[[0,[1,2]]]]]],[[[6,[[0,[1,2]]]],16,16,11,22],[[15,[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]]]]],[[[6,[[0,[1,2]]]],20,16,11],[[4,[[0,[1,2]]]]]],[11],[[[17,[[0,[12,23]]]],24],25],[[[6,[[0,[1,2]]]],24],25],[[[6,[[0,[1,2]]]],24],25],[[[3,[[0,[1,2]]]],24],25],[[[4,[[0,[1,2]]]],24],25],[[[4,[[0,[1,2]]]],24],25],[[8,24],25],[[10,24],25],[[11,24],25],[[]],[[[4,[[0,[1,2]]]]],[[6,[[0,[1,2]]]]]],[[],6],[[],6],[26,6],[[]],[[[3,[[0,[1,2]]]]],[[6,[[0,[1,2]]]]]],[27],[26,3],[[]],[27],[[],3],[[],4],[[]],[[]],[[]],[[]],[[],3],[20],[20,[[3,[[0,[1,2]]]]]],[20,[[4,[[0,[1,2]]]]]],[[],20],[[],20],[[],[[6,[[0,[1,2]]]]]],[[],20],[[],20],[[],[[3,[[0,[1,2]]]]]],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,26],[[[6,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]],11],[[4,[[0,[1,2]]]]]],[[],20],[[[3,[[0,[1,2]]]]],20],[[[4,[[0,[1,2]]]]],20],[[[4,[[0,[1,2]]]]],21],[[],21],[10,21],[[[6,[[0,[1,2]]]],16,11],[[4,[[0,[1,2]]]]]],[[[6,[[0,[1,2]]]],11],[[4,[[0,[1,2]]]]]],[[],6],[[],3],[[],8],0,[[],[[6,[[0,[1,2]]]]]],[[],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[5,[9]]]],[[],11],[10,11],[8,10],[11],[[11,18]],[[[6,[[0,[1,2]]]],[12,[[0,[1,2]]]],16]],[[],16],[[[6,[[0,[1,2]]]],[12,[[0,[1,2]]]],16,11],[[4,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]]],20],[[[4,[[0,[1,2]]]]],20],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[[6,[[0,[1,2]]]]],[[5,[[3,[[0,[1,2]]]]]]]],[[[4,[[0,[1,2]]]]],[[5,[[3,[[0,[1,2]]]]]]]],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],11],[[[3,[[0,[1,2]]]],20],[[3,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],20],[[4,[[0,[1,2]]]]]]],"c":[3,4,44,45,91,169],"p":[[8,"Sized"],[8,"Pointable"],[3,"Owned"],[3,"Shared"],[4,"Option"],[3,"Atomic"],[8,"Clone"],[3,"Collector"],[4,"Ordering"],[3,"LocalHandle"],[3,"Guard"],[8,"Pointer"],[8,"CompareAndSetOrdering"],[6,"CompareAndSetError"],[4,"Result"],[4,"Ordering"],[3,"CompareExchangeError"],[8,"FnOnce"],[8,"Send"],[15,"usize"],[15,"bool"],[8,"FnMut"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"Box"],[15,"never"],[3,"TypeId"]]},\
"crossbeam_utils":{"doc":"Miscellaneous tools for concurrent programming.","t":"DDALLLLLLLLLLLLLLLLLLLLLLLLLLLLAALLLLLLLDIQLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLL","n":["Backoff","CachePadded","atomic","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","default","deref","deref_mut","eq","equivalent","fmt","fmt","from","from","from","from","hash","into","into","into_inner","is_completed","new","new","reset","snooze","spin","sync","thread","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","AtomicCell","AtomicConsume","Val","as_ptr","borrow","borrow_mut","compare_and_swap","compare_exchange","default","drop","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_update","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fmt","from","from","from","into","into_inner","is_lock_free","load","load_consume","new","store","swap","take","try_from","try_into","type_id","Parker","ShardedLock","ShardedLockReadGuard","ShardedLockWriteGuard","Unparker","WaitGroup","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","default","deref","deref","deref_mut","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_raw","from_raw","get_mut","into","into","into","into","into","into","into_inner","into_raw","into_raw","is_poisoned","new","new","new","park","park_deadline","park_timeout","read","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_read","try_write","type_id","type_id","type_id","type_id","type_id","type_id","unpark","unparker","wait","write","Scope","ScopedJoinHandle","ScopedThreadBuilder","as_pthread_t","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builder","fmt","fmt","fmt","from","from","from","into","into","into","into_pthread_t","join","name","scope","spawn","spawn","stack_size","thread","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"crossbeam_utils"],[40,"crossbeam_utils::atomic"],[167,"crossbeam_utils::sync"],[261,"crossbeam_utils::thread"]],"d":["Performs exponential backoff in spin loops.","Pads and aligns a value to the length of a cache line.","Atomic types.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the inner value.","Returns <code>true</code> if exponential backoff has completed and …","Creates a new <code>Backoff</code>.","Pads and aligns a value to the length of a cache line.","Resets the <code>Backoff</code>.","Backs off in a blocking loop.","Backs off in a lock-free loop.","Thread synchronization primitives.","Threads that can borrow variables from the stack.","","","","","","","","A thread-safe mutable memory location.","Trait which allows reading from primitive atomic types …","Type returned by <code>load_consume</code>.","Returns a raw pointer to the underlying data in this …","","","If the current value equals <code>current</code>, stores <code>new</code> into the …","If the current value equals <code>current</code>, stores <code>new</code> into the …","","","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies logical “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies logical “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies logical “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Fetches the value, and applies a function to it that …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies logical “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Consumes the atomic and returns the contained value.","Returns <code>true</code> if operations on values of this type are …","Loads a value from the atomic cell.","Loads a value from the atomic using a “consume” memory …","Creates a new atomic cell initialized with <code>val</code>.","Stores <code>val</code> into the atomic cell.","Stores <code>val</code> into the atomic cell and returns the previous …","Takes the value of the atomic cell, leaving …","","","","A thread parking primitive.","A sharded reader-writer lock.","A guard used to release the shared read access of a …","A guard used to release the exclusive write access of a …","Unparks a thread parked by the associated <code>Parker</code>.","Enables threads to synchronize the beginning or end of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a raw pointer into a <code>Parker</code>.","Converts a raw pointer into an <code>Unparker</code>.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this lock, returning the underlying data.","Converts a <code>Parker</code> into a raw pointer.","Converts an <code>Unparker</code> into a raw pointer.","Returns <code>true</code> if the lock is poisoned.","Creates a new <code>Parker</code>.","Creates a new sharded reader-writer lock.","Creates a new wait group and returns the single reference …","Blocks the current thread until the token is made …","Blocks the current thread until the token is made …","Blocks the current thread until the token is made …","Locks with shared read access, blocking the current thread …","","","","","","","","","","","","","","","","","Attempts to acquire this lock with shared read access.","Attempts to acquire this lock with exclusive write access.","","","","","","","Atomically makes the token available if it is not already.","Returns a reference to an associated <code>Unparker</code>.","Drops this reference and waits until all other references …","Locks with exclusive write access, blocking the current …","A scope for spawning threads.","A handle that can be used to join its scoped thread.","Configures the properties of a new thread.","","","","","","","","Creates a builder that can configure a thread before …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Waits for the thread to finish and returns its result.","Sets the name for the new thread.","Creates a new scope for spawning threads.","Spawns a scoped thread.","Spawns a scoped thread with this configuration.","Sets the size of the stack for the new thread.","Returns a handle to the underlying thread.","","","","","","","","",""],"i":[0,0,0,3,2,3,2,2,2,3,2,2,2,2,2,3,2,3,2,2,2,2,3,2,2,3,3,2,3,3,3,0,0,2,3,2,3,2,3,2,0,0,53,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,53,15,15,15,15,15,15,15,0,0,0,0,0,0,33,31,34,32,36,37,33,31,34,32,36,37,31,32,31,32,33,34,32,36,37,37,32,37,33,31,34,32,36,36,37,37,33,31,34,34,34,32,36,37,33,31,34,33,31,34,32,36,37,34,33,31,34,33,34,32,33,33,33,34,31,32,36,37,33,31,34,32,36,37,33,31,34,32,36,37,34,34,33,31,34,32,36,37,31,33,32,34,0,0,0,44,46,44,47,46,44,47,46,46,44,47,46,44,47,46,44,47,44,44,47,0,46,47,47,44,46,44,47,46,44,47,46,44,47],"f":[0,0,0,[[]],[[]],[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[]],[[],3],[[],[[2,[4]]]],[2],[2],[[[2,[5]],[2,[5]]],6],[[],6],[[3,7],8],[[[2,[9]],7],8],[[]],[[]],[[],2],[10],[[[2,[11]],12]],[[]],[[]],[2],[3,6],[[],3],[[],2],[3],[3],[3],0,0,[[]],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],0,0,0,[15],[[]],[[]],[[[15,[[0,[16,17]]]],[0,[16,17]],[0,[16,17]]],[[0,[16,17]]]],[[[15,[[0,[16,17]]]],[0,[16,17]],[0,[16,17]]],[[13,[[0,[16,17]],[0,[16,17]]]]]],[[],[[15,[4]]]],[15],[[[15,[18]],18],18],[[[15,[19]],19],19],[[[15,[20]],20],20],[[[15,[21]],21],21],[[[15,[22]],22],22],[[[15,[23]],23],23],[[[15,[24]],24],24],[[[15,[25]],25],25],[[[15,[26]],26],26],[[[15,[27]],27],27],[[[15,[28]],28],28],[[[15,[29]],29],29],[[[15,[24]],24],24],[[[15,[26]],26],26],[[[15,[27]],27],27],[[[15,[28]],28],28],[[[15,[19]],19],19],[[[15,[25]],25],25],[[[15,[20]],20],20],[[[15,[6]],6],6],[[[15,[29]],29],29],[[[15,[21]],21],21],[[[15,[22]],22],22],[[[15,[18]],18],18],[[[15,[23]],23],23],[[[15,[27]],27],27],[[[15,[25]],25],25],[[[15,[26]],26],26],[[[15,[22]],22],22],[[[15,[19]],19],19],[[[15,[18]],18],18],[[[15,[29]],29],29],[[[15,[24]],24],24],[[[15,[20]],20],20],[[[15,[21]],21],21],[[[15,[23]],23],23],[[[15,[28]],28],28],[[[15,[25]],25],25],[[[15,[27]],27],27],[[[15,[26]],26],26],[[[15,[22]],22],22],[[[15,[21]],21],21],[[[15,[18]],18],18],[[[15,[19]],19],19],[[[15,[29]],29],29],[[[15,[24]],24],24],[[[15,[23]],23],23],[[[15,[20]],20],20],[[[15,[28]],28],28],[[[15,[29]],29],29],[[[15,[18]],18],18],[[[15,[6]],6],6],[[[15,[26]],26],26],[[[15,[25]],25],25],[[[15,[22]],22],22],[[[15,[21]],21],21],[[[15,[20]],20],20],[[[15,[23]],23],23],[[[15,[24]],24],24],[[[15,[28]],28],28],[[[15,[19]],19],19],[[[15,[27]],27],27],[[[15,[22]],22],22],[[[15,[19]],19],19],[[[15,[28]],28],28],[[[15,[20]],20],20],[[[15,[23]],23],23],[[[15,[6]],6],6],[[[15,[25]],25],25],[[[15,[27]],27],27],[[[15,[21]],21],21],[[[15,[29]],29],29],[[[15,[18]],18],18],[[[15,[26]],26],26],[[[15,[24]],24],24],[[[15,[29]],29],29],[[[15,[24]],24],24],[[[15,[23]],23],23],[[[15,[21]],21],21],[[[15,[18]],18],18],[[[15,[20]],20],20],[[[15,[26]],26],26],[[[15,[19]],19],19],[[[15,[27]],27],27],[[[15,[22]],22],22],[[[15,[25]],25],25],[[[15,[28]],28],28],[[[15,[[0,[16,17]]]],30],[[13,[[0,[16,17]],[0,[16,17]]]]]],[[[15,[25]],25],25],[[[15,[22]],22],22],[[[15,[28]],28],28],[[[15,[20]],20],20],[[[15,[21]],21],21],[[[15,[6]],6],6],[[[15,[29]],29],29],[[[15,[18]],18],18],[[[15,[26]],26],26],[[[15,[19]],19],19],[[[15,[23]],23],23],[[[15,[24]],24],24],[[[15,[27]],27],27],[[[15,[[0,[16,9]]]],7],8],[10],[[],15],[[]],[[]],[15],[[],6],[[[15,[16]]],16],[[]],[[],15],[15],[15],[[[15,[4]]],4],[[],13],[[],13],[[],14],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[31,31],[32,32],[[]],[[]],[[],33],[[],[[34,[4]]]],[[],32],[[[36,[35]]],35],[[[37,[35]]],35],[[[37,[35]]],35],[32],[[[37,[35]]]],[[33,7],8],[[31,7],8],[[[34,[[0,[35,9]]]],7],8],[[32,7],8],[[[36,[9]],7],8],[[[36,[[0,[35,38]]]],7],8],[[[37,[9]],7],8],[[[37,[[0,[35,38]]]],7],8],[[]],[[]],[[]],[10],[[],34],[[]],[[]],[[]],[[],33],[[],31],[[[34,[35]]],[[39,[35]]]],[[]],[[]],[[]],[[]],[[]],[[]],[34,39],[33],[31],[[[34,[35]]],6],[[],33],[[],34],[[],32],[33],[[33,40]],[[33,41]],[[[34,[35]]],[[39,[[36,[35]]]]]],[[]],[[]],[[],42],[[],42],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[[34,[35]]],[[43,[[36,[35]]]]]],[[[34,[35]]],[[43,[[37,[35]]]]]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[31],[33,31],[32],[[[34,[35]]],[[39,[[37,[35]]]]]],0,0,0,[44,45],[[]],[[]],[[]],[[]],[[]],[[]],[46,47],[[46,7],8],[[44,7],8],[[47,7],8],[[]],[[]],[[]],[[]],[[]],[[]],[44,45],[44,48],[[47,42],47],[49,48],[[46,[0,[49,50]]],[[44,[50]]]],[[47,[0,[49,50]]],[[51,[[44,[50]]]]]],[[47,22],47],[44,52],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14]],"c":[46],"p":[[8,"Clone"],[3,"CachePadded"],[3,"Backoff"],[8,"Default"],[8,"PartialEq"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[15,"never"],[8,"Hash"],[8,"Hasher"],[4,"Result"],[3,"TypeId"],[3,"AtomicCell"],[8,"Copy"],[8,"Eq"],[15,"u64"],[15,"i128"],[15,"u128"],[15,"i32"],[15,"usize"],[15,"i64"],[15,"i8"],[15,"u32"],[15,"isize"],[15,"u16"],[15,"i16"],[15,"u8"],[8,"FnMut"],[3,"Unparker"],[3,"WaitGroup"],[3,"Parker"],[3,"ShardedLock"],[8,"Sized"],[3,"ShardedLockReadGuard"],[3,"ShardedLockWriteGuard"],[8,"Display"],[6,"LockResult"],[3,"Instant"],[3,"Duration"],[3,"String"],[6,"TryLockResult"],[3,"ScopedJoinHandle"],[6,"RawPthread"],[3,"Scope"],[3,"ScopedThreadBuilder"],[6,"Result"],[8,"FnOnce"],[8,"Send"],[6,"Result"],[3,"Thread"],[8,"AtomicConsume"]]},\
"csc411_arith":{"doc":"","t":"FF","n":["chroma_of_index","index_of_chroma"],"q":[[0,"csc411_arith"]],"d":["Given an <code>index</code> in the [0, 15] range, returns the <code>chroma</code> …","Given a <code>chroma</code> value, returns the index of its closest …"],"i":[0,0],"f":[[1,2],[2,1]],"c":[],"p":[[15,"usize"],[15,"f32"]]},\
"csc411_image":{"doc":"","t":"CDICDILLLLMMLLLLLLLLLLMMALLLLMMKLLLLLLLLMMKLLDNEDNMLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLMLLLLLLLLLLLM","n":["Gray","GrayImage","Read","Rgb","RgbImage","Write","borrow","borrow","borrow_mut","borrow_mut","denominator","denominator","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","height","height","imgtype","init","init","into","into","pixels","pixels","read","read","read","try_from","try_from","try_into","try_into","type_id","type_id","width","width","write","write","write","Gray","Gray","ImageType","Rgb","Rgb","blue","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","from","from","from","green","init","init","init","into","into","into","red","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value"],"q":[[0,"csc411_image"],[45,"csc411_image::imgtype"]],"d":["","A struct containing a vector of Gray pixels, a width, …","Behavior that defines reading in a file returns either a …","","A struct containing a vector of RGB pixels, a width, …","Behavior that defines writing an Image","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Reads an RgbImage from either a filename or stdin","Reads an GrayImage to either a filename or stdout","","","","","","","","","","Writes an RgbImage to either a filename or stdout","Writes a GrayImage to either a filename or stdout","A <code>Gray</code> pixel contains a single <code>u16</code> value indicating …","","Public enumerator to specify the type of the Image being …","An <code>Rgb</code> pixel contains three <code>u16</code> values, for red, green, …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,2,5,2,5,2,5,2,5,2,5,2,5,2,5,2,5,2,5,0,2,5,2,5,2,5,14,2,5,2,5,2,5,2,5,2,5,15,2,5,0,16,0,0,16,13,16,12,13,16,12,13,12,13,12,13,16,12,13,16,12,13,16,12,13,12,13,16,12,13,13,16,12,13,16,12,13,13,12,13,16,12,13,16,12,13,16,12,13,12],"f":[0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,[1],[1],[1],[1],[1],[1],[[2,3],4],[[5,3],4],[[]],[[]],0,0,0,[[],1],[[],1],[[]],[[]],0,0,[[[7,[6]]],[[10,[[9,[8]]]]]],[[[7,[6]]],[[10,[2,[9,[8]]]]]],[[[7,[6]]],[[10,[5,[9,[8]]]]]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],0,0,[[[7,[6]]],[[10,[[9,[8]]]]]],[[2,[7,[6]]],[[10,[[9,[8]]]]]],[[5,[7,[6]]],[[10,[[9,[8]]]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[12,12],[13,13],[[]],[[]],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[12,3],4],[[13,3],4],[[]],[[]],[[]],0,[[],1],[[],1],[[],1],[[]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],0],"c":[],"p":[[15,"usize"],[3,"RgbImage"],[3,"Formatter"],[6,"Result"],[3,"GrayImage"],[15,"str"],[4,"Option"],[8,"Error"],[3,"Box"],[4,"Result"],[3,"TypeId"],[3,"Gray"],[3,"Rgb"],[8,"Read"],[8,"Write"],[4,"ImageType"]]},\
"csc411_rpegio":{"doc":"csc411_rpegio","t":"FFF","n":["input_rpeg_data","output_rpeg_data","output_rpeg_data_debug"],"q":[[0,"csc411_rpegio"]],"d":["Reads and parses rpeg data from a file, or stdin if no …","Outputs rpeg data to stdout.","Outputs rpeg data to stdout in a human-readable, debug …"],"i":[0,0,0],"f":[[[[3,[[2,[1]]]]],[[5,[4]]]],[[[8,[[7,[6]]]],9,9],[[5,[4]]]],[[[8,[[7,[6]]]],9,9],[[5,[4]]]]],"c":[],"p":[[3,"Path"],[8,"AsRef"],[4,"Option"],[3,"String"],[4,"Result"],[15,"u8"],[15,"array"],[15,"slice"],[15,"usize"]]},\
"deflate":{"doc":"An implementation an encoder using DEFLATE compression …","t":"NEDNNNNENENNLLLLLLLLLLLLLLLLLLLLLFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLMLLLLLLLLLLLLLLLLLADDLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Best","Compression","CompressionOptions","Default","Fast","Greedy","Lazy","MatchingType","Normal","SpecialOptions","_ForceFixed","_ForceStored","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","default","default","default","deflate_bytes","deflate_bytes_conf","deflate_bytes_zlib","deflate_bytes_zlib_conf","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fast","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","hash","hash","hash","high","huffman_only","into","into","into","into","lazy_if_less_than","matching_type","max_hash_checks","partial_cmp","partial_cmp","rle","special","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write","DeflateEncoder","ZlibEncoder","borrow","borrow","borrow_mut","borrow_mut","checksum","drop","drop","finish","finish","flush","flush","from","from","into","into","new","new","reset","reset","try_from","try_from","try_into","try_into","type_id","type_id","write","write"],"q":[[0,"deflate"],[91,"deflate::write"]],"d":["Higher compression level (<code>CompressionOptions::high()</code>).","An enum describing the level of compression to be used by …","A struct describing the options for a compressor or …","Default level (<code>CompressionOptions::default()</code>).","Fast minimal compression (<code>CompressionOptions::fast()</code>).","Use greedy matching: the matching algorithm simply uses a …","Use lazy matching: after finding a match, the next input …","An enum describing whether we use lazy or greedy matching.","Compress normally.","Enum allowing some special options (not implemented yet)!","Force fixed Huffman tables. (Unimplemented!).","Force stored (uncompressed) blocks only. (Unimplemented!).","","","","","","","","","","","","","","","","","","","","","Returns the options describing the default compression …","Compress the given slice of bytes with DEFLATE compression …","Compress the given slice of bytes with DEFLATE compression.","Compress the given slice of bytes with DEFLATE …","Compress the given slice of bytes with DEFLATE …","","","","","","","","","Returns  a fast set of compression settings","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns compression settings roughly corresponding to the …","Returns a set of compression settings that makes the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Only lazy match if we have a length less than this value.","Whether to use lazy or greedy matching.","The maximum number of checks to make in the hash table for …","","","Returns a set of compression settings that makes the …","Force fixed/stored blocks (Not implemented yet).","","","","","","","","","","","","","","","","","","Encoders implementing a <code>Write</code> interface.","A DEFLATE encoder/compressor.","A Zlib encoder/compressor.","","","","","Return the adler32 checksum of the currently consumed data.","When the encoder is dropped, output the rest of the data.","When the encoder is dropped, output the rest of the data.","Encode all pending data to the contained writer, consume …","Encode all pending data to the contained writer, consume …","Flush the encoder.","Flush the encoder.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new encoder using the provided compression …","Create a new <code>ZlibEncoder</code> using the provided compression …","Resets the encoder (except the compression options), …","Resets the encoder (except the compression options), …","","","","","","","",""],"i":[1,0,0,1,1,4,4,0,2,0,2,2,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,4,1,2,3,0,0,0,0,1,2,3,4,1,2,3,4,3,1,2,3,4,4,1,2,3,3,4,1,2,3,4,3,3,1,2,3,4,3,3,3,1,4,3,3,1,2,3,4,4,1,2,3,4,1,2,3,4,1,2,3,4,0,0,0,21,19,21,19,19,21,19,21,19,21,19,21,19,21,19,21,19,21,19,21,19,21,19,21,19,21,19],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[[]],[[]],[[]],[[]],[[1,1],5],[[4,4],5],[[],1],[[],2],[[],3],[[[7,[6]]],[[8,[6]]]],[[[7,[6]],[9,[3]]],[[8,[6]]]],[[[7,[6]]],[[8,[6]]]],[[[7,[6]],[9,[3]]],[[8,[6]]]],[[1,1],10],[[2,2],10],[[3,3],10],[[4,4],10],[[],10],[[],10],[[],10],[[],10],[[],3],[[1,11],12],[[2,11],12],[[3,11],12],[[4,11],12],[[4,11],12],[[]],[[]],[1,3],[[]],[[]],[[1,13]],[[2,13]],[[3,13]],[[4,13]],[[],3],[[],3],[[]],[[]],[[]],[[]],0,0,0,[[1,1],[[14,[5]]]],[[4,4],[[14,[5]]]],[[],3],0,[[]],[[]],[[]],[[]],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],17],[[],17],[[],17],[[],17],0,0,0,[[]],[[]],[[]],[[]],[[[19,[18]]],20],[[[21,[18]]]],[[[19,[18]]]],[[[21,[18]]],[[22,[18]]]],[[[19,[18]]],[[22,[18]]]],[[[21,[18]]],22],[[[19,[18]]],22],[[]],[[]],[[]],[[]],[[18,[9,[3]]],[[21,[18]]]],[[18,[9,[3]]],[[19,[18]]]],[[[21,[18]],18],[[22,[18]]]],[[[19,[18]],18],[[22,[18]]]],[[],16],[[],16],[[],16],[[],16],[[],17],[[],17],[[[21,[18]],[7,[6]]],[[22,[23]]]],[[[19,[18]],[7,[6]]],[[22,[23]]]]],"c":[],"p":[[4,"Compression"],[4,"SpecialOptions"],[3,"CompressionOptions"],[4,"MatchingType"],[4,"Ordering"],[15,"u8"],[15,"slice"],[3,"Vec"],[8,"Into"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Hasher"],[4,"Option"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"Write"],[3,"ZlibEncoder"],[15,"u32"],[3,"DeflateEncoder"],[6,"Result"],[15,"usize"]]},\
"either":{"doc":"The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","t":"ECNCNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOOLLL","n":["Either","Left","Left","Right","Right","all","any","as_mut","as_mut","as_mut","as_mut","as_pin_mut","as_pin_ref","as_ref","as_ref","as_ref","as_ref","borrow","borrow_mut","clone","clone_from","cmp","collect","count","deref","deref_mut","either","either_into","either_with","eq","expect_left","expect_right","extend","factor_err","factor_first","factor_none","factor_ok","factor_second","find","find_map","flip","fmt","fmt","fold","for_both","for_each","from","from","hash","into","into","into_future","into_inner","into_iter","into_iter","is_left","is_right","last","left","left_and_then","left_or","left_or_default","left_or_else","len","map","map_either","map_either_with","map_left","map_right","next","next_back","nth","partial_cmp","partition","poll","position","rfind","rfold","right","right_and_then","right_or","right_or_default","right_or_else","size_hint","try_from","try_into","try_left","try_right","type_id","unwrap_left","unwrap_right"],"q":[[0,"either"]],"d":["The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","","A value of type <code>L</code>.","","A value of type <code>R</code>.","","","","","","Convert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.","Convert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …","Convert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …","","Convert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.","","","","","","","","","","","","Apply one of two functions depending on contents, unifying …","Convert the contained value into <code>T</code>","Like <code>either</code>, but provide some context to whichever of the …","","Returns the left value","Returns the right value","","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Factors out <code>None</code> from an <code>Either</code> of <code>Option</code>.","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","","","Convert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.","","","","Evaluate the provided expression for both <code>Either::Left</code> and …","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","Extract the value of an either over two equivalent types.","","Convert the inner value to an iterator.","Return true if the value is the <code>Left</code> variant.","Return true if the value is the <code>Right</code> variant.","","Convert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","","Map <code>f</code> over the contained value and return the result in the","Apply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …","Similar to [<code>map_either</code>], with an added context <code>ctx</code> …","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","","","","","","","","","","Convert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","","","","Macro for unwrapping the left side of an <code>Either</code>, which …","Dual to <code>try_left!</code>, see its documentation for more …","","Returns the left value","Returns the right value"],"i":[0,0,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,2,2,2],"f":[0,0,0,0,0,[[[2,[1,1]],3],4],[[[2,[1,1]],3],4],[[[2,[[6,[5]],[6,[5]]]]],5],[[[2,[6,6]]]],[[[2,[[6,[7]],[6,[7]]]]],7],[2,2],[[[8,[2]]],[[2,[8,8]]]],[[[8,[2]]],[[2,[8,8]]]],[[[2,[[9,[5]],[9,[5]]]]],5],[2,2],[[[2,[9,9]]]],[[[2,[[9,[7]],[9,[7]]]]],7],[[]],[[]],[[[2,[10,10]]],[[2,[10,10]]]],[[[2,[10,10]],[2,[10,10]]]],[[[2,[11,11]],[2,[11,11]]],12],[[[2,[1,1]]],13],[[[2,[1,1]]],14],[[[2,[15,15]]]],[[[2,[16,16]]]],[[2,17,17]],[[[2,[18,18]]]],[[2,17,17]],[[[2,[19,19]],[2,[19,19]]],4],[[[2,[20]],7]],[[[2,[20]],7]],[[[2,[21,21]],22]],[[[2,[23,23]]],[[23,[2]]]],[2],[[[2,[24,24]]],[[24,[2]]]],[[[2,[23,23]]],[[23,[2]]]],[2],[[[2,[1,1]],3],24],[[[2,[1,1]],3],24],[2,2],[[[2,[20,20]],25],26],[[[2,[27,27]],25],26],[[[2,[1,1]],3]],0,[[[2,[1,1]],3]],[[]],[23,2],[[[2,[28,28]],29]],[[]],[2,23],[[]],[2],[[]],[[[2,[22,22]]],2],[2,4],[2,4],[[[2,[1,1]]],24],[2,24],[[2,17],2],[2],[[[2,[30]]],30],[[2,17]],[[[2,[31,31]]],14],[[2,17],2],[[2,17,17],2],[[2,17,17],2],[[2,17],2],[[2,17],2],[[[2,[1,1]]],24],[[[2,[32,32]]],24],[[[2,[1,1]],14],24],[[[2,[33,33]],[2,[33,33]]],[[24,[12]]]],[[[2,[1,1]],3]],[[[8,[[2,[34,34]]]],35],36],[[[2,[1,1]],3],[[24,[14]]]],[[[2,[32,32]],3],24],[[[2,[32,32]],3]],[2,24],[[2,17],2],[2],[[[2,[30]]],30],[[2,17]],[[[2,[1,1]]]],[[],23],[[],23],0,0,[[],37],[[[2,[20]]]],[[[2,[20]]]]],"c":[],"p":[[8,"Iterator"],[4,"Either"],[8,"FnMut"],[15,"bool"],[15,"slice"],[8,"AsMut"],[15,"str"],[3,"Pin"],[8,"AsRef"],[8,"Clone"],[8,"Ord"],[4,"Ordering"],[8,"FromIterator"],[15,"usize"],[8,"Deref"],[8,"DerefMut"],[8,"FnOnce"],[8,"Into"],[8,"PartialEq"],[8,"Debug"],[8,"Extend"],[8,"IntoIterator"],[4,"Result"],[4,"Option"],[3,"Formatter"],[6,"Result"],[8,"Display"],[8,"Hash"],[8,"Hasher"],[8,"Default"],[8,"ExactSizeIterator"],[8,"DoubleEndedIterator"],[8,"PartialOrd"],[8,"Future"],[3,"Context"],[4,"Poll"],[3,"TypeId"]]},\
"gif":{"doc":"GIF en- and decoding library Build Status","t":"NDNNNENNENNNNNDEDEDEDEENEENNNDNNNNNNNNDSNNNENNNDNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMMM","n":["Any","AnyExtension","Application","Background","BackgroundColor","Block","BlockFinished","BlockStart","ColorOutput","Comment","Control","Control","Data","DataEnd","DecodeOptions","Decoded","Decoder","DecodingError","DecodingFormatError","DisposalMethod","Encoder","EncodingError","Extension","Extension","ExtensionData","Extensions","Finite","Format","Format","Frame","Frame","GlobalPalette","Image","Indexed","Infinite","Io","Io","Keep","MemoryLimit","NONE","Nothing","Previous","RGBA","Repeat","Repetitions","Save","Skip","StreamingDecoder","SubBlockFinished","Text","Trailer","Trailer","V87a","V89a","Version","allow_unknown_blocks","bg_color","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","buffer_size","build","check_frame_consistency","check_lzw_end_code","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","current_frame","current_frame_mut","default","delay","dispose","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fill_buffer","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_indexed_pixels","from_palette_pixels","from_rgb","from_rgb_speed","from_rgba","from_rgba_speed","from_u8","from_u8","from_u8","get_mut","get_ref","global_palette","hash","hash","height","height","height","interlaced","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_known","last_ext","left","line_length","needs_user_input","new","new","new","new","new_control_ext","next_frame_info","palette","palette","read_info","read_into_buffer","read_next_frame","set_color_output","set_extensions","set_memory_limit","set_repeat","source","source","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","top","transparent","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","version","width","width","width","write_extension","write_frame","write_global_palette","write_raw_extension","delay","flags","trns"],"q":[[0,"gif"],[322,"gif::ExtensionData"]],"d":["StreamingDecoder is not required to take any action.","A newtype wrapper around an arbitrary extension ID.","Application extension.","Restore to background color.","Index of the background color in the global palette.","Known GIF block labels.","Decoded the last (or only) sub-block of a block.","The start of a block.","StreamingDecoder configuration parameters Output mode for …","Comment extension.","Control extension. Use <code>ExtensionData::new_control_ext</code> to …","Control extension.","Decoded some data of the current frame.","No more data available the current frame.","Options for opening a GIF decoder.","Indicates whether a certain object has been decoded","GIF decoder","Decoding error.","An error returned in the case of the image not being …","Disposal method","GIF encoder.","Encoding error.","Known GIF extension labels.","Extension block.","Extension data.","StreamingDecoder configuration parameters Configures how …","Finite number of repetitions","Returned if the image is found to be malformed.","Returned if the to image is not encodable as a gif.","A GIF frame","Decoded all information of the next frame.","Global palette.","Image block.","The decoder returns the raw indexed data.","Infinite number of repetitions","Wraps <code>std::io::Error</code>.","Wraps <code>std::io::Error</code>.","Do not dispose.","StreamingDecoder configuration parameters Memory limit in …","Enforce no memory limit.","Decoded nothing.","Restore to previous.","The decoder expands the image data to 32bit RGBA. This …","Number of repetitions","Sets the number of repetitions","Saves all extention data","Skips the data of unknown extensions and extracts the data …","GIF decoder which supports streaming","Decoded a sub-block. More sub-block are available.","Plain Text extension.","Image trailer.","Decoded the image trailer.","Version 87a, from May 1987.","Version 89a, from July 1989.","One version number of the GIF standard.","Configure if unknown blocks are allowed to be decoded.","Index of the background color in the global palette","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Buffer containing the image data. Only indices unless …","Output buffer size","Return a builder that allows configuring limits etc.","Configure if frames must be within the screen descriptor.","Configure if LZW encoded blocks must end with a marker end …","","","","","","","","","","","","","","","","","","","","","Current frame info as a ref.","Current frame info as a mutable ref.","","Frame delay in units of 10 ms.","Disposal method.","","","","","","","","","","","","","","Reads data of the current frame into a pre-allocated …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a frame from indexed pixels in the global palette.","Creates a frame from a palette and indexed pixels.","Creates a frame from pixels in RGB format.","Creates a frame from pixels in RGB format.","Creates a frame from pixels in RGBA format.","Creates a frame from pixels in RGBA format.","Converts <code>u8</code> to <code>Option&lt;Self&gt;</code>","Converts <code>u8</code> to <code>Option&lt;Self&gt;</code>","Converts <code>u8</code> to a <code>Extension</code> if it is known.","Gets a mutable reference to the writer instance used by …","Gets a reference to the writer instance used by this …","The global color palette","","","Height of the image","Height of the image","Height of the frame.","True if the image is interlaced.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns writer instance used by this encoder","Decode the label as a known extension.","Returns the data of the last extension that has been …","Offset from the left border of the canvas.","Line length of the current frame","True if the frame needs user input to be displayed.","Creates a new streaming decoder","Create a new decoder with default options.","Creates a new encoder.","Creates a new decoder builder","Constructor for control extension data.","Returns the next frame info","Returns the color palette relevant for the current (next) …","Frame local color palette if available.","Reads the logical screen descriptor including the global …","Reads the data of the current frame into a pre-allocated …","Reads the next frame from the image.","Configure how color data is decoded.","Configure whether extensions are saved or skipped.","Configure a memory limit for decoding.","Write an extension block that signals a repeat behaviour.","","","","","","","","","","","","","","","","","Offset from the top border of the canvas.","Transparent index (if available).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Updates the internal state of the decoder. ","The version number of the GIF standard used in this image.","Width of the image","Width of the image","Width of the frame.","Writes an extension to the image.","Writes a frame to the image.","Writes the global color palette.","Writes a raw extension to the image.","Frame delay.","Flags.","Transparent index."],"i":[7,0,10,7,27,0,27,27,0,10,34,10,27,27,0,0,0,0,0,0,0,0,0,8,0,0,15,22,28,0,27,27,8,13,15,22,28,7,0,14,27,7,13,0,34,19,19,0,27,10,8,27,12,12,0,1,4,16,4,34,18,7,8,9,10,11,26,22,19,27,12,13,14,1,28,15,16,4,34,18,7,8,9,10,11,26,22,19,27,12,13,14,1,28,15,11,4,4,1,1,7,8,9,10,11,12,13,14,1,15,7,8,9,10,11,12,13,14,1,15,16,16,11,11,11,18,7,8,9,10,19,12,13,7,8,9,10,12,4,7,8,9,10,11,26,26,22,22,19,27,12,13,14,1,28,28,15,16,4,34,18,7,8,9,9,10,11,26,22,22,22,19,27,12,13,14,1,28,28,15,11,11,11,11,11,11,7,8,10,18,18,4,9,12,16,4,11,11,16,4,34,18,7,8,9,10,11,26,22,19,27,12,13,14,1,28,15,18,9,16,11,4,11,16,4,18,1,34,4,4,11,1,4,4,1,16,1,18,26,22,28,7,8,9,10,11,12,13,14,1,15,26,22,28,11,11,16,4,34,18,7,8,9,10,11,26,22,19,27,12,13,14,1,28,15,16,4,34,18,7,8,9,10,11,26,22,19,27,12,13,14,1,28,15,16,4,34,18,7,8,9,10,11,26,22,19,27,12,13,14,1,28,15,16,16,16,4,11,18,18,18,18,38,38,38],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],[[[4,[3]]],[[6,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[4,[3]]],5],[[],1],[[1,2]],[[1,2]],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[1,1],[15,15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[16,11],[16,11],[[],11],0,0,[[[18,[17]]]],[[7,7],2],[[8,8],2],[[9,9],2],[[10,10],2],[[19,19],2],[[12,12],2],[[13,13],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[[4,[3]],[21,[20]]],[[23,[2,22]]]],[[7,24],25],[[8,24],25],[[9,24],25],[[10,24],25],[[11,24],25],[[26,24],25],[[26,24],25],[[22,24],25],[[22,24],25],[[19,24],25],[[27,24],25],[[12,24],25],[[13,24],25],[[14,24],25],[[1,24],25],[[28,24],25],[[28,24],25],[[15,24],25],[[]],[[]],[[]],[[]],[[]],[[]],[10,9],[[]],[[]],[[]],[[]],[26,22],[[]],[29,22],[[]],[[]],[[]],[[]],[[]],[[]],[29,28],[[]],[[]],[[30,30,[21,[20]],[6,[20]]],11],[[30,30,[21,[20]],[21,[20]],[6,[20]]],11],[[30,30,[21,[20]]],11],[[30,30,[21,[20]],31],11],[[30,30,[21,[20]]],11],[[30,30,[21,[20]],31],11],[20,[[6,[7]]]],[20,[[6,[8]]]],[20,[[6,[10]]]],[[[18,[17]]],17],[[[18,[17]]],17],[[[4,[3]]],[[6,[[21,[20]]]]]],[[9,32]],[[12,32]],[16,30],[[[4,[3]]],30],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[18,[17]]],[[33,[17]]]],[9,[[6,[10]]]],[16],0,[[[4,[3]]],5],0,[[],16],[3,[[23,[[4,[3]],22]]]],[[17,30,30,[21,[20]]],[[23,[[18,[17]],28]]]],[[],1],[[30,7,2,[6,[20]]],34],[[[4,[3]]],[[23,[[6,[11]],22]]]],[[[4,[3]]],[[23,[[21,[20]],22]]]],0,[[1,3],[[23,[[4,[3]],22]]]],[[[4,[3]],[21,[20]]],[[23,[22]]]],[[[4,[3]]],[[23,[[6,[11]],22]]]],[[1,13]],[[16,19]],[[1,14]],[[[18,[17]],15],[[23,[28]]]],[26,[[6,[35]]]],[22,[[6,[35]]]],[28,[[6,[35]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],36],[[],36],[[],36],0,0,[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[16,[21,[20]]],[[23,[22]]]],[16,12],[16,30],[[[4,[3]]],30],0,[[[18,[17]],34],[[23,[28]]]],[[[18,[17]],11],[[23,[28]]]],[[[18,[17]],[21,[20]]],[[23,[[18,[17]],28]]]],[[[18,[17]],9,[21,[[21,[20]]]]],33],0,0,0],"c":[235],"p":[[3,"DecodeOptions"],[15,"bool"],[8,"Read"],[3,"Decoder"],[15,"usize"],[4,"Option"],[4,"DisposalMethod"],[4,"Block"],[3,"AnyExtension"],[4,"Extension"],[3,"Frame"],[4,"Version"],[4,"ColorOutput"],[3,"MemoryLimit"],[4,"Repeat"],[3,"StreamingDecoder"],[8,"Write"],[3,"Encoder"],[4,"Extensions"],[15,"u8"],[15,"slice"],[4,"DecodingError"],[4,"Result"],[3,"Formatter"],[6,"Result"],[3,"DecodingFormatError"],[4,"Decoded"],[4,"EncodingError"],[3,"Error"],[15,"u16"],[15,"i32"],[8,"Hasher"],[6,"Result"],[4,"ExtensionData"],[8,"Error"],[3,"String"],[3,"TypeId"],[13,"Control"]]},\
"image":{"doc":"Overview","t":"NINDNNDNNNNSSSENDEIENNCDDIINNGGNNNNNDIIICENNNNECNNNNQQNNNNNNNNNNNNNNNNDDIQDNNNNIDQDNNNNNNNGDNNNNNNNGDQNNNNNNLKLLLLLLKLLLLLLKLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLALLLLLLLLLLKLLLLLLKLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLKLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLALALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLKLLLLLLKLLLLLLLKLLLLKLLLLALFLLLLLLLLLLLLLALLLLAFALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLKLLLLLLLKLLLLLLLAALFFFKLLLLLLKLLLLLLKLLLLLLLLALLLLLLLLLLLLLLLLLFLLLLLLLAAKLLLLLLLLLLKLLLLLLLLLLLLFFLLLLLLLALLAKLLLLLLLLKLLLLLLLLLLKLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLKLCCCIDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAAAAAAAAAAAAGDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLNNNGGEDDDGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGNDDDNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGGGGDDDDDDGDRLLLLLLLLLLLLLLMLLLLMLMLLLLLLLLLLLLLLLLLLLLLLLMLLLMLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLFLLFLLLLLLFLLLLLLLLLLLLLLLLLLLLLMLGDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNGDDNDELLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLDNNENNENNGGNDDDNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDNENNNDNNNNDNNGGENDDDDGNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMMMMLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLADDLLLLLLLLLLLLLLLMLLMLLLLMLMLLLLLLLMMCCCCCCCCNNDNNNDNNNNNEEGNNDENNNNDENNNDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCCCNEDNENNNDNNDDNLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLCCCCCCCCCCCCCCCCCCCCCCCCCCNCECNCNCNCNFLLCLLACFFLLCLLFFFFFFFLLCFCCLLCFFFFFFFFFFFFFLLLLFFDQILLFFLLFFLLFLLFLLFFFKLLLFLLKLLLLLDLLLLLLLLLLLLLLLLLLLLLCCCCCDLLLLLLLLLLLLMLLALLLLAMMMDLLLLLLLLLLLLLLLLLLLLLFCCCCCCCCCCCCCCCCCCCCCCCCCCCC","n":["A8","AnimationDecoder","Avif","Bgr","Bgr8","Bgr8","Bgra","Bgra8","Bgra8","Bmp","Bmp","CHANNEL_COUNT","COLOR_MODEL","COLOR_TYPE","ColorType","Dds","Delay","DynamicImage","EncodableLayout","ExtendedColorType","Farbfeld","Farbfeld","FlatSamples","Frame","Frames","GenericImage","GenericImageView","Gif","Gif","GrayAlphaImage","GrayImage","Hdr","Ico","Ico","ImageBgr8","ImageBgra8","ImageBuffer","ImageDecoder","ImageDecoderExt","ImageEncoder","ImageError","ImageFormat","ImageLuma16","ImageLuma8","ImageLumaA16","ImageLumaA8","ImageOutputFormat","ImageResult","ImageRgb16","ImageRgb8","ImageRgba16","ImageRgba8","InnerImage","InnerImageView","Jpeg","Jpeg","L1","L16","L16","L2","L4","L8","L8","La1","La16","La16","La2","La4","La8","La8","Luma","LumaA","Pixel","Pixel","Pixels","Png","Png","Pnm","Pnm","Primitive","Progress","Reader","Rgb","Rgb1","Rgb16","Rgb16","Rgb2","Rgb4","Rgb8","Rgb8","RgbImage","Rgba","Rgba1","Rgba16","Rgba16","Rgba2","Rgba4","Rgba8","Rgba8","RgbaImage","SubImage","Subpixel","Tga","Tga","Tiff","Unknown","Unsupported","WebP","adjust_contrast","apply","apply","apply","apply","apply","apply","apply","apply2","apply2","apply2","apply2","apply2","apply2","apply2","apply_with_alpha","apply_with_alpha","apply_with_alpha","apply_with_alpha","apply_with_alpha","apply_with_alpha","apply_with_alpha","apply_without_alpha","apply_without_alpha","as_bgr8","as_bgra8","as_bytes","as_bytes","as_flat_samples","as_flat_samples_mut","as_flat_samples_u16","as_flat_samples_u8","as_luma16","as_luma8","as_luma_alpha16","as_luma_alpha8","as_mut_bgr8","as_mut_bgra8","as_mut_luma16","as_mut_luma8","as_mut_luma_alpha16","as_mut_luma_alpha8","as_mut_rgb16","as_mut_rgb8","as_mut_rgba16","as_mut_rgba8","as_raw","as_rgb16","as_rgb8","as_rgba16","as_rgba8","bits_per_pixel","blend","blend","blend","blend","blend","blend","blend","blend_pixel","blend_pixel","blend_pixel","blend_pixel","blur","bmp","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","bounds","bounds","bounds","brighten","buffer","buffer","buffer_mut","bytes_per_pixel","can_read","can_write","change_bounds","channel_count","channel_count","channel_count","channel_count","channels","channels","channels","channels","channels","channels","channels","channels4","channels4","channels4","channels4","channels4","channels4","channels4","channels_mut","channels_mut","channels_mut","channels_mut","channels_mut","channels_mut","channels_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","codecs","collect_frames","color","color_model","color_model","color_type","color_type","color_type","convert","copy_from","copy_from","copy_within","copy_within","copy_within","crop","crop_imm","current","dds","default","delay","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","dxt","enumerate_pixels","enumerate_pixels_mut","enumerate_rows","enumerate_rows_mut","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","expand_palette","expand_palette","extensions_str","farbfeld","filter3x3","flat","fliph","flipv","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_channels","from_channels","from_channels","from_channels","from_channels","from_channels","from_channels","from_decoder","from_extension","from_fn","from_numer_denom_ms","from_parts","from_path","from_pixel","from_raw","from_saturating_duration","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice_mut","from_slice_mut","from_slice_mut","from_slice_mut","from_slice_mut","from_slice_mut","from_slice_mut","from_vec","get_pixel","get_pixel","get_pixel","get_pixel","get_pixel","get_pixel_mut","get_pixel_mut","get_pixel_mut","get_pixel_mut","get_pixel_mut","gif","grayscale","guess_format","has_alpha","has_color","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hdr","height","height","height","huerotate","ico","image_dimensions","imageops","in_bounds","in_bounds","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","inner","inner","inner","inner","inner_mut","inner_mut","inner_mut","inner_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_bgr","into_bgr8","into_bgra","into_bgra8","into_buffer","into_bytes","into_flat_samples","into_frames","into_iter","into_iter","into_luma","into_luma16","into_luma8","into_luma_alpha","into_luma_alpha16","into_luma_alpha8","into_raw","into_reader","into_rgb","into_rgb16","into_rgb8","into_rgba","into_rgba16","into_rgba8","into_vec","invert","invert","invert","invert","invert","invert","invert","invert","io","jpeg","left","load","load_from_memory","load_from_memory_with_format","map","map","map","map","map","map","map","map2","map2","map2","map2","map2","map2","map2","map_with_alpha","map_with_alpha","map_with_alpha","map_with_alpha","map_with_alpha","map_with_alpha","map_with_alpha","map_without_alpha","map_without_alpha","math","new","new","new","new","new_bgr8","new_bgra8","new_luma16","new_luma8","new_luma_a16","new_luma_a8","new_rgb16","new_rgb8","new_rgba16","new_rgba8","next","next","numer_denom_ms","open","original_color_type","original_color_type","partial_cmp","pixels","pixels","pixels","pixels_mut","png","pnm","put_pixel","put_pixel","put_pixel","put_pixel","put_pixel","read_image","read_image","read_image_with_progress","read_image_with_progress","read_rect","read_rect","read_rect_with_progress","remaining","resize","resize_exact","resize_to_fill","rotate180","rotate270","rotate90","rows","rows_mut","sample_layout","save","save","save_buffer","save_buffer_with_format","save_with_format","save_with_format","scanline_bytes","scanline_bytes","sub_image","sub_image","sub_image","tga","thumbnail","thumbnail_exact","tiff","to_bgr","to_bgr","to_bgr","to_bgr","to_bgr","to_bgr","to_bgr","to_bgr","to_bgr8","to_bgra","to_bgra","to_bgra","to_bgra","to_bgra","to_bgra","to_bgra","to_bgra","to_bgra8","to_bytes","to_image","to_luma","to_luma","to_luma","to_luma","to_luma","to_luma","to_luma","to_luma","to_luma16","to_luma8","to_luma_alpha","to_luma_alpha","to_luma_alpha","to_luma_alpha","to_luma_alpha","to_luma_alpha","to_luma_alpha","to_luma_alpha","to_luma_alpha16","to_luma_alpha8","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_rgb","to_rgb","to_rgb","to_rgb","to_rgb","to_rgb","to_rgb","to_rgb","to_rgb16","to_rgb8","to_rgba","to_rgba","to_rgba","to_rgba","to_rgba","to_rgba","to_rgba","to_rgba","to_rgba16","to_rgba8","top","total","total_bytes","total_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unsafe_get_pixel","unsafe_get_pixel","unsafe_get_pixel","unsafe_put_pixel","unsafe_put_pixel","unsafe_put_pixel","unsharpen","view","view","view","webp","width","width","width","write_image","write_to","BMPEncoder","BmpDecoder","BmpEncoder","ConvertBuffer","EnumeratePixels","EnumeratePixelsMut","EnumerateRows","EnumerateRowsMut","Pixels","PixelsMut","Rows","RowsMut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","convert","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","len","len","len","len","len","len","len","len","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","bmp","dds","dxt","farbfeld","gif","hdr","ico","jpeg","png","pnm","tga","tiff","webp","BMPEncoder","BmpDecoder","BmpEncoder","borrow","borrow","borrow_mut","borrow_mut","color_type","deref","deref","deref_mut","deref_mut","dimensions","drop","drop","encode","from","from","init","init","into","into","into_reader","new","new","read_image","read_rect_with_progress","try_from","try_from","try_into","try_into","type_id","type_id","write_image","DdsDecoder","borrow","borrow_mut","color_type","deref","deref_mut","dimensions","drop","from","init","into","into_reader","new","read_image","scanline_bytes","try_from","try_into","type_id","DXT1","DXT3","DXT5","DXTEncoder","DXTReader","DXTVariant","DxtDecoder","DxtEncoder","DxtReader","DxtVariant","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","color_type","color_type","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","dimensions","drop","drop","drop","drop","encode","eq","equivalent","fmt","from","from","from","from","init","init","init","init","into","into","into","into","into_reader","new","new","read","read_image","read_rect_with_progress","scanline_bytes","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","FarbfeldDecoder","FarbfeldEncoder","FarbfeldReader","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","color_type","deref","deref","deref","deref_mut","deref_mut","deref_mut","dimensions","drop","drop","drop","encode","from","from","from","init","init","init","into","into","into","into_reader","new","new","read","read_rect_with_progress","scanline_bytes","seek","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write_image","Encoder","Finite","GifDecoder","GifEncoder","GifReader","Infinite","Repeat","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","color_type","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","dimensions","drop","drop","drop","drop","encode","encode_frame","encode_frames","fmt","from","from","from","from","init","init","init","init","into","into","into","into","into_frames","into_reader","new","new","new_with_speed","read","read_image","read_to_end","set_repeat","to_owned","try_encode_frames","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","HDRAdapter","HDREncoder","HDRImageDecoderIterator","HDRMetadata","HdrAdapter","HdrDecoder","HdrEncoder","HdrImageDecoderIterator","HdrMetadata","HdrReader","RGBE8Pixel","Rgbe8Pixel","SIGNATURE","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c","clone","clone","clone_into","clone_into","color_correction","color_type","custom_attributes","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","dimensions","drop","drop","drop","drop","drop","drop","drop","e","encode","eq","equivalent","exposure","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","height","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into_iter","into_iter","into_reader","metadata","new","new","new","new_nonstrict","next","orientation","pixel_aspect_ratio","read","read_image","read_image_hdr","read_image_ldr","read_image_native","read_image_transform","read_raw_file","read_rect_with_progress","read_to_end","rgbe8","size_hint","to_hdr","to_ldr","to_ldr_scale_gamma","to_owned","to_owned","to_rgbe8","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","width","with_strictness","ICOEncoder","IcoDecoder","IcoEncoder","borrow","borrow","borrow_mut","borrow_mut","color_type","deref","deref","deref_mut","deref_mut","dimensions","drop","drop","encode","from","from","init","init","into","into","into_reader","new","new","read_image","try_from","try_from","try_into","try_into","type_id","type_id","write_image","Centimeters","Inches","JPEGEncoder","JpegDecoder","JpegEncoder","PixelAspectRatio","PixelDensity","PixelDensityUnit","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","color_type","default","density","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","dimensions","dpi","drop","drop","drop","drop","encode","encode_image","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","into_reader","new","new","new_with_quality","read_image","scale","set_pixel_density","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unit","write_image","ApngDecoder","Avg","Best","CompressionType","Default","Fast","FilterType","Huffman","NoFilter","PNGEncoder","PNGReader","Paeth","PngDecoder","PngEncoder","PngReader","Rle","Sub","Up","apng","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","color_type","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","dimensions","drop","drop","drop","drop","drop","drop","encode","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from","from","from","from","init","init","init","init","init","init","into","into","into","into","into","into","into_frames","into_reader","is_apng","new","new","new_with_quality","read","read_image","read_to_end","scanline_bytes","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","write_image","ArbitraryHeader","ArbitraryMap","ArbitraryTuplType","Ascii","Binary","Bitmap","BitmapHeader","BlackAndWhite","BlackAndWhiteAlpha","Custom","Graymap","GraymapHeader","Grayscale","GrayscaleAlpha","PNMEncoder","PNMHeader","PNMSubtype","Pixmap","PixmapHeader","PnmDecoder","PnmEncoder","PnmHeader","PnmSubtype","RGB","RGBAlpha","SampleEncoding","as_arbitrary","as_bitmap","as_graymap","as_pixmap","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","color_type","depth","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","dimensions","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","encode","encoding","encoding","encoding","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","height","height","height","height","height","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into_inner","into_reader","magic_constant","maximal_sample","maxval","maxval","maxwhite","new","new","original_color_type","read_image","sample_encoding","subtype","subtype","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tupltype","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","width","width","width","width","width","with_dynamic_header","with_header","with_subtype","write","write_image","TgaDecoder","TgaEncoder","borrow","borrow","borrow_mut","borrow_mut","color_type","deref","deref","deref_mut","deref_mut","dimensions","drop","drop","encode","from","from","init","init","into","into","into_reader","new","new","original_color_type","read_image","scanline_bytes","try_from","try_from","try_into","try_into","type_id","type_id","write_image","TiffDecoder","TiffEncoder","TiffReader","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","color_type","deref","deref","deref","deref_mut","deref_mut","deref_mut","dimensions","drop","drop","drop","encode","from","from","from","init","init","init","into","into","into","into_reader","new","new","read","read_image","read_to_end","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write_image","WebPDecoder","borrow","borrow_mut","color_type","deref","deref_mut","dimensions","drop","from","init","into","into_reader","new","read_image","try_from","try_into","type_id","vp8","Frame","Vp8Decoder","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","decode_frame","default","deref","deref","deref_mut","deref_mut","drop","drop","fmt","for_display","from","from","height","init","init","into","into","keyframe","new","pixel_type","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","width","ybuf","DdsDecoder","DXTEncoder","DXTReader","DXTVariant","DxtDecoder","DxtEncoder","DxtReader","DxtVariant","Color","Decoding","DecodingError","DimensionError","DimensionMismatch","Encoding","EncodingError","Exact","FailedAlready","Format","Generic","GenericFeature","ImageError","ImageFormatHint","ImageResult","InsufficientMemory","IoError","LimitError","LimitErrorKind","Limits","Name","NoMoreData","Parameter","ParameterError","ParameterErrorKind","PathExtension","Unknown","Unsupported","UnsupportedError","UnsupportedErrorKind","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format_hint","format_hint","format_hint","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_format_and_kind","from_format_hint","from_format_hint","from_kind","from_kind","hash","hash","hash","hash","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","kind","kind","kind","new","new","source","source","source","source","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","FarbfeldDecoder","FarbfeldEncoder","FarbfeldReader","ColumnMajorPacked","Error","FlatSamples","ImagePacked","NormalForm","NormalFormRequired","PixelPacked","RowMajorPacked","SampleLayout","TooLarge","Unaliased","View","ViewMut","WrongColor","as_mut","as_mut_slice","as_ref","as_slice","as_view","as_view_mut","as_view_with_mut_samples","blend_pixel","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","bounds","bounds","bounds","channel_stride","channels","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","color_hint","column_major_packed","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","dimensions","dimensions","drop","drop","drop","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","extents","extents","fits","fits","flat","flat","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_mut_sample","get_mut_sample","get_mut_sample","get_pixel","get_pixel","get_pixel_mut","get_sample","get_sample","get_sample","has_aliased_samples","has_aliased_samples","hash","hash","hash","height","height_stride","image_mut_slice","image_mut_slice","image_mut_slice","image_slice","image_slice","image_slice","in_bounds","in_bounds","in_bounds","in_bounds","in_bounds_index","in_bounds_index","index","index","index","index_ignoring_bounds","index_ignoring_bounds","index_mut","init","init","init","init","init","init","inner","inner","inner_mut","into","into","into","into","into","into","into_inner","into_inner","is_normal","is_normal","layout","min_length","min_length","min_length","min_length","partial_cmp","put_pixel","row_major_packed","samples","samples","samples","shrink_to","shrink_to","shrink_to","shrink_to","strides_cwh","strides_cwh","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_vec","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into_buffer","try_upgrade","type_id","type_id","type_id","type_id","type_id","type_id","width","width_stride","with_monocolor","Encoder","GifDecoder","GifEncoder","GifReader","Repeat","HDRAdapter","HDREncoder","HDRImageDecoderIterator","HDRMetadata","HdrAdapter","HdrDecoder","HdrEncoder","HdrImageDecoderIterator","HdrMetadata","HdrReader","RGBE8Pixel","Rgbe8Pixel","SIGNATURE","read_raw_file","rgbe8","to_rgbe8","ICOEncoder","IcoDecoder","IcoEncoder","BiLevel","CatmullRom","CatmullRom","ColorMap","FilterType","Gaussian","Gaussian","Lanczos3","Lanczos3","Nearest","Nearest","Triangle","Triangle","blur","borrow","borrow_mut","brighten","clone","clone_into","colorops","contrast","crop","crop_imm","deref","deref_mut","dither","drop","eq","filter3x3","flip_horizontal","flip_horizontal_in","flip_horizontal_in_place","flip_vertical","flip_vertical_in","flip_vertical_in_place","fmt","from","grayscale","horizontal_gradient","huerotate","index_colors","init","into","invert","overlay","overlay_bounds","replace","resize","rotate180","rotate180_in","rotate180_in_place","rotate270","rotate270_in","rotate90","rotate90_in","thumbnail","tile","to_owned","try_from","try_into","type_id","unsharpen","vertical_gradient","BiLevel","Color","ColorMap","borrow","borrow_mut","brighten","brighten_in_place","clone","clone_into","contrast","contrast_in_place","deref","deref_mut","dither","drop","from","grayscale","has_lookup","has_lookup","huerotate","huerotate_in_place","index_colors","index_of","index_of","init","into","invert","lookup","lookup","map_color","map_color","to_owned","try_from","try_into","type_id","Reader","borrow","borrow_mut","clear_format","decode","deref","deref_mut","drop","format","from","init","into","into_dimensions","into_inner","new","open","set_format","try_from","try_into","type_id","with_format","with_guessed_format","JPEGEncoder","JpegDecoder","JpegEncoder","PixelDensity","PixelDensityUnit","Rect","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","fmt","from","hash","height","init","into","nq","to_owned","try_from","try_into","type_id","utils","width","x","y","NeuQuant","borrow","borrow_mut","deref","deref_mut","drop","from","from","has_lookup","index_of","index_of","init","init","into","lookup","lookup","map_color","map_pixel","new","try_from","try_into","type_id","clamp","ApngDecoder","CompressionType","FilterType","PNGEncoder","PNGReader","PngDecoder","PngEncoder","PngReader","ArbitraryHeader","ArbitraryTuplType","BitmapHeader","GraymapHeader","PNMEncoder","PNMHeader","PNMSubtype","PixmapHeader","PnmDecoder","PnmEncoder","PnmHeader","PnmSubtype","SampleEncoding","TgaDecoder","TgaEncoder","TiffDecoder","TiffEncoder","TiffReader","WebPDecoder","vp8"],"q":[[0,"image"],[845,"image::bmp"],[848,"image::buffer"],[994,"image::codecs"],[1007,"image::codecs::bmp"],[1041,"image::codecs::dds"],[1059,"image::codecs::dxt"],[1130,"image::codecs::farbfeld"],[1177,"image::codecs::gif"],[1247,"image::codecs::hdr"],[1387,"image::codecs::ico"],[1420,"image::codecs::jpeg"],[1500,"image::codecs::png"],[1613,"image::codecs::pnm"],[1826,"image::codecs::tga"],[1860,"image::codecs::tiff"],[1906,"image::codecs::webp"],[1924,"image::codecs::webp::vp8"],[1961,"image::dds"],[1962,"image::dxt"],[1969,"image::error"],[2176,"image::farbfeld"],[2179,"image::flat"],[2379,"image::gif"],[2384,"image::hdr"],[2400,"image::ico"],[2403,"image::imageops"],[2466,"image::imageops::colorops"],[2501,"image::io"],[2523,"image::jpeg"],[2528,"image::math"],[2553,"image::math::nq"],[2575,"image::math::utils"],[2576,"image::png"],[2584,"image::pnm"],[2597,"image::tga"],[2599,"image::tiff"],[2602,"image::webp"]],"d":["Pixel is 8-bit alpha","AnimationDecoder trait","An Image in AVIF format.","BGR colors","Pixel contains 8-bit B, G and R channels","Pixel contains 8-bit B, G and R channels","BGR colors + alpha channel","Pixel is 8-bit BGR with an alpha channel","Pixel is 8-bit BGR with an alpha channel","An Image in BMP Format","An Image in BMP Format","The number of channels of this pixel type.","A string that can help to interpret the meaning each …","ColorType for this pixel format","An enumeration over supported color types and bit depths","An Image in DDS Format","The delay of a frame relative to the previous one.","A Dynamic Image","Types which are safe to treat as an immutable byte slice …","An enumeration of color types encountered in image formats.","An Image in farbfeld Format","An Image in farbfeld Format","","A single animation frame","An implementation dependent iterator, reading the frames …","A trait for manipulating images.","Trait to inspect an image.","An Image in GIF Format","An Image in GIF Format","Sendable grayscale + alpha channel image buffer","Sendable grayscale image buffer","An Image in Radiance HDR Format","An Image in ICO Format","An Image in ICO Format","Each pixel in this image is 8-bit Bgr","Each pixel in this image is 8-bit Bgr with alpha","Generic image buffer","The trait that all decoders implement","Specialized image decoding not be supported by all formats","The trait all encoders implement","","An enumeration of supported image formats. Not all formats …","Each pixel in this image is 16-bit Luma","Each pixel in this image is 8-bit Luma","Each pixel in this image is 16-bit Luma with alpha","Each pixel in this image is 8-bit Luma with alpha","An enumeration of supported image formats for encoding.","","Each pixel in this image is 16-bit Rgb","Each pixel in this image is 8-bit Rgb","Each pixel in this image is 16-bit Rgb with alpha","Each pixel in this image is 8-bit Rgb with alpha","Underlying image type. This is mainly used by SubImages in …","Underlying image type. This is mainly used by SubImages in …","An Image in JPEG Format","An Image in JPEG Format with specified quality","Pixel is 1-bit luminance","Pixel is 16-bit luminance","Pixel is 16-bit luminance","Pixel is 2-bit luminance","Pixel is 4-bit luminance","Pixel is 8-bit luminance","Pixel is 8-bit luminance","Pixel is 1-bit luminance with an alpha channel","Pixel is 16-bit luminance with an alpha channel","Pixel is 16-bit luminance with an alpha channel","Pixel is 2-bit luminance with an alpha channel","Pixel is 4-bit luminance with an alpha channel","Pixel is 8-bit luminance with an alpha channel","Pixel is 8-bit luminance with an alpha channel","Grayscale colors","Grayscale colors + alpha channel","A generalized pixel.","The type of pixel.","Immutable pixel iterator","An Image in PNG Format","An Image in PNG Format","An Image in general PNM Format","An Image in one of the PNM Formats","Primitive trait from old stdlib","Represents the progress of an image operation.","The type of reader produced by <code>into_reader</code>.","RGB colors","Pixel contains 1-bit R, G and B channels","Pixel is 16-bit RGB","Pixel contains 16-bit R, G and B channels","Pixel contains 2-bit R, G and B channels","Pixel contains 4-bit R, G and B channels","Pixel contains 8-bit R, G and B channels","Pixel contains 8-bit R, G and B channels","Sendable Rgb image buffer","RGB colors + alpha channel","Pixel is 1-bit RGB with an alpha channel","Pixel is 16-bit RGBA","Pixel is 16-bit RGB with an alpha channel","Pixel is 2-bit RGB with an alpha channel","Pixel is 4-bit RGB with an alpha channel","Pixel is 8-bit RGB with an alpha channel","Pixel is 8-bit RGB with an alpha channel","Sendable Rgb + alpha channel image buffer","A View into another image","The underlying subpixel type.","An Image in TGA Format","An Image in TGA Format","An Image in TIFF Format","Pixel is of unknown color type with the specified bits per …","A value for signalling an error: An unsupported format was …","An Image in WEBP Format","Adjust the contrast of this image. <code>contrast</code> is the amount …","Apply the function <code>f</code> to each channel of this pixel.","","","","","","","Apply the function <code>f</code> to each channel of this pixel and …","","","","","","","Apply the function <code>f</code> to each channel except the alpha …","","","","","","","Apply the function <code>f</code> to each channel except the alpha …","Apply the function <code>f</code> to each channel except the alpha …","Return a reference to an 8bit BGR image","Return a reference to an 8bit BGRA image","Get the bytes of this value.","Return this image’s pixels as a native endian byte slice.","Return a view on the raw sample buffer.","Return a mutable view on the raw sample buffer.","Return a view on the raw sample buffer for 16 bit per …","Return a view on the raw sample buffer for 8 bit per …","Return a reference to an 16bit Grayscale image","Return a reference to an 8bit Grayscale image","Return a reference to an 16bit Grayscale image with an …","Return a reference to an 8bit Grayscale image with an …","Return a mutable reference to an 8bit BGR image","Return a mutable reference to an 8bit RGBA image","Return a mutable reference to an 16bit Grayscale image","Return a mutable reference to an 8bit Grayscale image","Return a mutable reference to an 16bit Grayscale image …","Return a mutable reference to an 8bit Grayscale image with …","Return a mutable reference to an 16bit RGB image","Return a mutable reference to an 8bit RGB image","Return a mutable reference to an 16bit RGBA image","Return a mutable reference to an 8bit RGBA image","Returns the underlying raw buffer","Return a reference to an 16bit RGB image","Return a reference to an 8bit RGB image","Return a reference to an 16bit RGBA image","Return a reference to an 8bit RGBA image","Returns the number of bits contained in a pixel of …","Blend the color of a given pixel into ourself, taking into …","","","","","","","Put a pixel at location (x, y), taking into account alpha …","DEPRECATED: This method will be removed. Blend the pixel …","Put a pixel at location (x, y), taking into account alpha …","DEPRECATED: Use iterator <code>pixels_mut</code> to blend the pixels …","Performs a Gaussian blur on this image. <code>sigma</code> is a measure …","Decoding and Encoding of BMP Images","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bounding rectangle of this image.","","","","Brighten the pixels of this image. <code>value</code> is the amount to …","Iterators and other auxiliary structure for the <code>ImageBuffer</code>…","Returns the image buffer","Returns a mutable image buffer","Returns the number of bytes contained in a pixel of …","Return if the ImageFormat can be decoded by the lib.","Return if the ImageFormat can be encoded by the lib.","Change the coordinates of this subimage.","Returns the number of channels of this pixel type.","Returns the number of channels of this pixel type.","Returns the number of color channels that make up this …","Get the number of channels for colors of this type.","Returns the components as a slice.","","","","","","","Returns the channels of this pixel as a 4 tuple. If the …","","","","","","","Returns the components as a mutable slice","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encoding and decoding for various image file formats.","Steps through the iterator from the current frame until …","Return this image’s color type.","Returns a string that can help to interpret the meaning …","Returns a string that can help to interpret the meaning …","Returns the color type of the image data produced by this …","Returns the ColorType for this pixel format","Returns the ColorType for this pixel format","Examples","Copies all of the pixels from another image into this …","Copies all of the pixels from another image into this …","Copies all of the pixels from one part of this image to …","Copies all of the pixels from one part of this image to …","","Return a cut-out of this image delimited by the bounding …","Return a cut-out of this image delimited by the bounding …","A measure of completed decoding.","Decoding of DDS images","","Delay of this frame","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a tuple containing the width and height of the …","The width and height of this image.","","The width and height of this image.","","","","","","","","","","","","","","","","","","","","","Decoding of DXT (S3TC) compression","Enumerates over the pixels of the image. The iterator …","Enumerates over the pixels of the image. The iterator …","Enumerates over the rows of the image. The iterator yields …","Enumerates over the rows of the image. The iterator yields …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains detailed error representation.","Expands a color palette by re-using the existing buffer. …","Expands a color palette by re-using the existing buffer. …","Return a list of applicable extensions for this format.","Decoding of farbfeld images","Filters this image with the specified 3x3 kernel.","Image representations for ffi.","Flip this image horizontally","Flip this image vertically","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Construct a pixel from the 4 channels a, b, c and d. If …","","","","","","","Decodes an encoded image into a dynamic image.","Return the image format specified by a path’s file …","Constructs a new ImageBuffer by repeated application of …","Create a delay from a ratio of milliseconds.","Contructs a new frame","Return the image format specified by the path’s file …","Constructs a new ImageBuffer by copying a pixel","Contructs a buffer from a generic container (for example a …","Convert from a duration, clamped between 0 and an …","Returns a view into a slice.","","","","","","","Returns mutable view into a mutable slice.","","","","","","","Creates an image buffer out of an existing buffer. Returns …","Returns the pixel located at (x, y). Indexed from top left.","","","Gets a reference to the pixel at location <code>(x, y)</code>","","Gets a reference to the mutable pixel at location <code>(x, y)</code>. …","","","Gets a reference to the mutable pixel at location <code>(x, y)</code>","DEPRECATED: Do not use is function: It is unimplemented!","Decoding of GIF Images","Return a grayscale version of this image.","Guess image format from memory block","Returns if there is an alpha channel.","Returns false if the color scheme is grayscale, true …","","","","","","","","","","","","Decoding of Radiance HDR Images","The height of this image.","The height of this image.","The height of this image.","Hue rotate the supplied image. <code>value</code> is the degrees to …","Decoding and Encoding of ICO files","Read the dimensions of the image located at the specified …","Image Processing Functions","Returns true if this x, y coordinate is contained inside …","Returns true if this x, y coordinate is contained inside …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the underlying image.","","","","Returns a mutable reference to the underlying image.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consume the image and returns a BGR image.","Consume the image and returns a BGR image.","Consume the image and returns a BGRA image.","Consume the image and returns a BGRA image.","Returns the image buffer","Return this image’s pixels as a byte vector. If the …","Return the raw sample buffer with its stride an dimension …","Consume the decoder producing a series of frames.","","","Consume the image and returns a Luma image.","Consume the image and returns a Luma image.","Consume the image and returns a Luma image.","Consume the image and returns a LumaA image.","Consume the image and returns a LumaA image.","Consume the image and returns a LumaA image.","Returns the underlying raw buffer","Returns a reader that can be used to obtain the bytes of …","Consume the image and returns a RGB image.","Consume the image and returns a RGB image.","Consume the image and returns a RGB image.","Consume the image and returns a RGBA image.","Consume the image and returns a RGBA image.","Consume the image and returns a RGBA image.","Consumes the image buffer and returns the underlying data …","Invert this pixel","","","","","","","Invert the colors of this image. This method operates …","Input and output of images.","Decoding and Encoding of JPEG Images","Returns the x offset","Create a new image from a Reader","Create a new image from a byte slice","Create a new image from a byte slice","Apply the function <code>f</code> to each channel of this pixel.","","","","","","","Apply the function <code>f</code> to each channel of this pixel and …","","","","","","","Apply the function <code>f</code> to each channel except the alpha …","","","","","","","Apply the function <code>f</code> to each channel except the alpha …","Apply the function <code>f</code> to each channel except the alpha …","Mathematical helper functions and types.","Creates a new <code>Frames</code> from an implementation specific …","Construct a new subimage The coordinates set the position …","Contructs a new frame without any delay.","Creates a new image buffer based on a <code>Vec&lt;P::Subpixel&gt;</code>.","Creates a dynamic image backed by a buffer of BGR pixels.","Creates a dynamic image backed by a buffer of BGRA pixels.","Creates a dynamic image backed by a buffer of grey pixels.","Creates a dynamic image backed by a buffer of grey pixels.","Creates a dynamic image backed by a buffer of grey pixels …","Creates a dynamic image backed by a buffer of grey pixels …","Creates a dynamic image backed by a buffer of RGB pixels.","Creates a dynamic image backed by a buffer of RGB pixels.","Creates a dynamic image backed by a buffer of RGBA pixels.","Creates a dynamic image backed by a buffer of RGBA pixels.","","","The numerator and denominator of the delay in milliseconds.","Open the image located at the path specified. The image’…","Retuns the color type of the image file before decoding","Retuns the color type of the image file before decoding","","Returns an Iterator over the pixels of this image. The …","Returns an Iterator over the pixels of this image. The …","Returns an iterator over the pixels of this image. The …","Returns an iterator over the mutable pixels of this image.","Decoding and Encoding of PNG Images","Decoding and Encoding of netpbm image formats (pbm, pgm, …","Put a pixel at location (x, y). Indexed from top left.","","","Puts a pixel at location <code>(x, y)</code>","","Returns all the bytes in the image.","Returns all the bytes in the image.","Same as <code>read_image</code> but periodically calls the provided …","Same as <code>read_image</code> but periodically calls the provided …","Decode a rectangular section of the image; see …","Decode a rectangular section of the image; see …","Decode a rectangular section of the image, periodically …","Calculate a measure for remaining decoding work.","Resize this image using the specified filter algorithm. …","Resize this image using the specified filter algorithm. …","Resize this image using the specified filter algorithm. …","Rotate this image 180 degrees clockwise.","Rotate this image 270 degrees clockwise.","Rotate this image 90 degrees clockwise.","Returns an iterator over the rows of this image.","Returns an iterator over the mutable rows of this image.","Get the format of the buffer when viewed as a matrix of …","Saves the buffer to a file at the path specified.","Saves the buffer to a file at the path specified.","Saves the supplied buffer to a file at the path specified.","Saves the supplied buffer to a file at the path specified …","Saves the buffer to a file at the specified path in the …","Saves the buffer to a file at the specified path in the …","Returns the minimum number of bytes that can be …","Returns the minimum number of bytes that can be …","Returns a mutable subimage that is a view into this image. …","Returns a mutable subimage that is a view into this image. …","","Decoding and Encoding of TGA Images","Scale this image down to fit within a specific size. …","Scale this image down to a specific size. Returns a new …","Decoding and Encoding of TIFF Images","Convert this pixel to BGR","","","","","","","Returns a copy of this image as an BGR image.","Returns a copy of this image as an BGR image.","Convert this pixel to BGR with an alpha channel","","","","","","","Returns a copy of this image as an BGRA image.","Returns a copy of this image as an BGRA image.","Return a copy of this image’s pixels as a byte vector.","Convert this subimage to an ImageBuffer","Convert this pixel to luma","","","","","","","Returns a copy of this image as a Luma image.","Returns a copy of this image as a Luma image.","Returns a copy of this image as a Luma image.","Convert this pixel to luma with an alpha channel","","","","","","","Returns a copy of this image as a LumaA image.","Returns a copy of this image as a LumaA image.","Returns a copy of this image as a LumaA image.","","","","","","","","","","","","","","","","","Convert this pixel to RGB","","","","","","","Returns a copy of this image as an RGB image.","Returns a copy of this image as an RGB image.","Returns a copy of this image as an RGB image.","Convert this pixel to RGB with an alpha channel","","","","","","","Returns a copy of this image as an RGBA image.","Returns a copy of this image as an RGBA image.","Returns a copy of this image as an RGBA image.","Returns the y offset","A measure of all necessary decoding work.","Returns the total number of bytes in the decoded image.","Returns the total number of bytes in the decoded image.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the pixel located at (x, y). Indexed from top left.","Returns the pixel located at (x, y). Indexed from top left.","Returns the pixel located at (x, y), ignoring bounds …","Puts a pixel at location (x, y). Indexed from top left.","Puts a pixel at location (x, y). Indexed from top left.","Puts a pixel at location (x, y), ignoring bounds checking.","Performs an unsharpen mask on this image. <code>sigma</code> is the …","Returns an subimage that is an immutable view into this …","Returns an subimage that is an immutable view into this …","","Decoding of WebP Images","The width of this image.","The width of this image.","The width of this image.","Writes all the bytes in an image to the encoder.","Encode this image and write it to <code>w</code>","","","","Provides color conversions for whole image buffers.","Enumerate the pixels of an image.","Enumerate the pixels of an image.","Enumerate the rows of an image.","Enumerate the rows of an image.","Iterate over pixel refs.","Iterate over mutable pixel refs.","Iterate over rows of an image","Iterate over mutable rows of an image","","","","","","","","","","","","","","","","","","","","","","","","","Converts <code>self</code> to a buffer of type T","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Decoding and Encoding of BMP Images","Decoding of DDS images","Decoding of DXT (S3TC) compression","Decoding of farbfeld images","Decoding of GIF Images","Decoding of Radiance HDR Images","Decoding and Encoding of ICO files","Decoding and Encoding of JPEG Images","Decoding and Encoding of PNG Images","Decoding of netpbm image formats (pbm, pgm, ppm and pam).","Decoding of TGA Images","Decoding and Encoding of TIFF Images","Decoding of WebP Images","BMP Encoder","A bmp decoder","The representation of a BMP encoder.","","","","","","","","","","","","","Encodes the image <code>image</code> that has dimensions <code>width</code> and …","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new decoder that decodes from the stream <code>r</code>","Create a new encoder that writes its output to <code>w</code>.","","","","","","","","","","The representation of a DDS decoder","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Create a new decoder that decodes from the stream <code>r</code>","","","","","","The DXT1 format. 48 bytes of RGB data in a 4x4 pixel …","The DXT3 format. 64 bytes of RGBA data in a 4x4 pixel …","The DXT5 format. 64 bytes of RGBA data in a 4x4 pixel …","DXT encoder","DXT reader","What version of DXT compression are we using? Note that …","DXT decoder","DXT encoder","DXT reader","DXT compression version.","","","","","","","","","","","","Returns the color type that is stored in this DXT variant","","","","","","","","","","","","","","Encodes the image data <code>data</code> that has dimensions <code>width</code> and …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new DXT decoder that decodes from the stream <code>r</code>. …","Create a new encoder that writes its output to <code>w</code>","","","","","","","","","","","","","","","","","","farbfeld decoder","farbfeld encoder","farbfeld Reader","","","","","","","","","","","","","","","","","","Encodes the image <code>data</code> (native endian) that has dimensions …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a new decoder that decodes from the stream <code>r</code>","Create a new encoder that writes its output to <code>w</code>","","","","","","","","","","","","","","","GIF encoder","Finite number of repetitions","GIF decoder","GIF encoder.","Wrapper struct around a <code>Cursor&lt;Vec&lt;u8&gt;&gt;</code>","Looping GIF","Number of repetitions for a GIF animation","","","","","","","","","","","","","","","","","","","","","","","","","Encode a single image.","Encode one frame of animation.","Encodes Frames. Consider using <code>try_encode_frames</code> instead …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Creates a new decoder that decodes the input steam <code>r</code>","Creates a new GIF encoder.","Create a new GIF encoder, and has the speed parameter <code>speed</code>…","","","","Set the repeat behaviour of the encoded GIF","","Try to encode a collection of <code>ImageResult&lt;animation::Frame&gt;</code>…","","","","","","","","","","","","","HDR Adapter","HDR Encoder","Scanline buffered pixel by pixel iterator","HDR MetaData","Adapter to conform to <code>ImageDecoder</code> trait","An Radiance HDR decoder","Radiance HDR encoder","Scanline buffered pixel by pixel iterator","Metadata for Radiance HDR image","Wrapper struct around a <code>Cursor&lt;Vec&lt;u8&gt;&gt;</code>","Refer to wikipedia","Refer to wikipedia","Radiance HDR file signature","","","","","","","","","","","","","","","Color components","","","","","Divide color values by corresponding tuple member (r, g, …","","All lines contained in image header are put here. Ordering …","","","","","","","","","","","","","","","","","","","","","","","","Exponent","Encodes the image <code>data</code> that has dimensions <code>width</code> and <code>height</code>","","","Divide color values by exposure to get to get physical …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Height of decoded image. It depends on orientation too.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns file metadata. Refer to <code>HDRMetadata</code> for details.","Creates encoder","Creates adapter","Reads Radiance HDR image header from stream <code>r</code> if the …","Allows reading old Radiance HDR images","","Orientation matrix. For standard orientation it is …","Pixel height divided by pixel width","","","Consumes decoder and returns a vector of Rgb pixels.","Consumes decoder and returns a vector of Rgb pixels. scale …","Consumes decoder and returns a vector of RGBE8 pixels","Consumes decoder and returns a vector of transformed pixels","Helper function for reading raw 3-channel f32 images","","","Creates <code>RGBE8Pixel</code> from components","","Converts <code>RGBE8Pixel</code> into <code>Rgb&lt;f32&gt;</code> linearly","Converts <code>RGBE8Pixel</code> into <code>Rgb&lt;T&gt;</code> with scale=1 and gamma=2.2","Converts RGBE8Pixel into Rgb using provided scale and gamma","","","Converts <code>Rgb&lt;f32&gt;</code> into <code>RGBE8Pixel</code>","","","","","","","","","","","","","","","","","","","","","","Width of decoded image. It could be either scanline length,","Reads Radiance HDR image header from stream <code>reader</code>, if the …","ICO encoder","An ico decoder","ICO encoder","","","","","","","","","","","","","Encodes the image <code>image</code> that has dimensions <code>width</code> and …","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new decoder that decodes from the stream <code>r</code>","Create a new encoder that writes its output to <code>w</code>.","","","","","","","","","Pixels per centimeter","Pixels per inch (2.54 cm)","JPEG Encoder","JPEG decoder","The representation of a JPEG encoder","Represents the absence of a unit, the values indicate only …","Represents the pixel density of an image","Represents a unit in which the density of an image is …","","","","","","","","","","","","","","Returns a pixel density with a pixel aspect ratio of 1","A couple of values for (Xdensity, Ydensity)","","","","","","","","","","Creates the most common pixel density type: the horizontal …","","","","","Encodes the image stored in the raw byte buffer <code>image</code> that …","Encodes the given image.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new decoder that decodes from the stream <code>r</code>","Create a new encoder that writes its output to <code>w</code>","Create a new encoder that writes its output to <code>w</code>, and has …","","Configure the decoder to scale the image during decoding.","Set the pixel density of the images the encoder will …","","","","","","","","","","","","","","","The unit in which the density is measured","","An <code>AnimationDecoder</code> adapter of <code>PngDecoder</code>.","Filters based on the average of left and right neighbor …","High compression level","Compression level of a PNG encoder. The default setting is …","Default compression level","Fast, minimal compression","Filter algorithms used to process image data to improve …","Huffman coding compression","No processing done, best used for low bit depth greyscale …","PNG Encoder","PNG Reader","Algorithm that takes into account the left, upper left, …","PNG decoder","PNG encoder","Png Reader","Run-length encoding compression","Filters based on previous pixel in the same scanline","Filters based on the scanline above","Turn this into an iterator over the animation frames.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encodes the image <code>data</code> that has dimensions <code>width</code> and <code>height</code>…","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns if the image contains an animation.","Creates a new decoder that decodes from the stream <code>r</code>","Create a new encoder that writes its output to <code>w</code>","Create a new encoder that writes its output to <code>w</code> with …","","","","","","","","","","","","","","","","","","","","","","","","","","Header produced by a <code>pam</code> file (“Portable Arbitrary Map”…","Magic number P7","Standardized tuple type specifiers in the header of a <code>pam</code>.","Samples are encoded as decimal ascii strings separated by …","Samples are unsigned binary integers in big endian","Magic numbers P1 and P4","Header produced by a <code>pbm</code> file (“Portable Bit Map”)","Pixels are either black (0) or white (1)","Pixels are either black (0) or white (1) and a second …","An image format which is not standardized","Magic numbers P2 and P5","Header produced by a <code>pgm</code> file (“Portable Gray Map”)","Pixels represent the amount of white","Grayscale with an additional alpha channel","PNM Encoder","PNM Header","Denotes the category of the magic number","Magic numbers P3 and P6","Header produced by a <code>ppm</code> file (“Portable Pixel Map”)","PNM decoder","Encodes images to any of the <code>pnm</code> image formats.","Stores the complete header data of a file.","PNM Subtype","Three channels: Red, Green, Blue","Four channels: Red, Green, Blue, Alpha","The kind of encoding used to store sample values","Retrieve the underlying arbitrary header if any","Retrieve the underlying bitmap header if any","Retrieve the underlying graymap header if any","Retrieve the underlying pixmap header if any","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Number of color channels","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encode an image whose samples are represented as <code>u8</code>.","Binary or Ascii encoded file","Binary or Ascii encoded file","Binary or Ascii encoded file","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The height of the image this header is for.","Height of the image file","Height of the image file","Height of the image file","Height of the image file","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Extract the reader and header after an image has been read.","","Get the two magic constant bytes corresponding to this …","The biggest value a sample can have. In other words, the …","Maximum sample value within the image","Maximum sample value within the image","Maximum sample value within the image","Create a new decoder that decodes from the stream <code>read</code>","Create new PNMEncoder from the <code>writer</code>.","","","Whether samples are stored as binary or as decimal ascii","Get the pnm subtype, depending on the magic constant …","Retrieve the format subtype from which the header was …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Color interpretation of image pixels","","","","","","","","","","","The width of the image this header is for.","Width of the image file","Width of the image file","Width of the image file","Width of the image file","Create the header dynamically for each image.","Enforce the use of a chosen header.","Encode a specific pnm subtype image.","Write the header back into a binary stream","","A decoder for TGA images","TGA encoder.","","","","","","","","","","","","","Encodes the image <code>buf</code> that has dimensions <code>width</code> and <code>height</code> …","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new decoder that decodes from the stream <code>r</code>","Create a new encoder that writes its output to <code>w</code>.","","","","","","","","","","","Decoder for TIFF images.","Encoder for tiff images","Wrapper struct around a <code>Cursor&lt;Vec&lt;u8&gt;&gt;</code>","","","","","","","","","","","","","","","","","","Encodes the image <code>image</code> that has dimensions <code>width</code> and …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new TiffDecoder.","Create a new encoder that writes its output to <code>w</code>","","","","","","","","","","","","","","WebP Image format decoder. Currently only supportes the …","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Create a new WebPDecoder from the Reader <code>r</code>. This function …","","","","","An implementation of the VP8 Video Codec","A Representation of the last decoded video frame","VP8 Decoder","","","","","","","Decodes the current frame and returns a reference to it","","","","","","","","","Indicates whether this frame is intended for display","Returns the argument unchanged.","Returns the argument unchanged.","The height of the luma plane","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Indicates whether this frame is a keyframe","Create a new decoder. The reader must present a raw vp8 …","The pixel type of the frame as defined by Section 9.2 of …","","","","","","","","The width of the luma plane","The luma plane of the frame","","","","","","","","","The required color type can not be handled.","An error was encountered while decoding.","An error was encountered while decoding an image.","The resulting image exceed dimension limits in either …","The dimensions passed are wrong.","An error was encountered while encoding.","An error was encountered while encoding an image.","The format is known exactly.","Repeated an operation for which error that could not be …","An image format is not supported.","A string describing the parameter. This is discouraged and …","Some feature specified by string. This is discouraged and …","The generic error type for image operations.","A best effort representation for image formats.","Result of an image decoding/encoding process","The operation would have performed an allocation larger …","An error occurred while interacting with the environment.","Completing the operation would have required more …","Indicates the limit that prevented an operation from …","Completing the operation would have required more …","The format can be identified by a name.","The end of the image has been reached.","An error was encountered in input arguments.","An error was encountered in inputs arguments.","Details how a parameter is malformed.","A common path extension for the format is known.","The format is not known or could not be determined.","An operation can not be completed by the chosen …","The implementation for an operation was not provided.","Details what feature is not supported.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the image format associated with this error.","Return the image format associated with this error.","Returns the image format associated with this error.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Create an <code>UnsupportedError</code> for an image with details on …","Create an <code>EncodingError</code> for an image format.","Create a <code>DecodingError</code> for an image format.","Construct a <code>ParameterError</code> directly from a corresponding …","Construct a generic <code>LimitError</code> directly from a …","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the corresponding <code>UnsupportedErrorKind</code> of the …","Returns the corresponding <code>ParameterErrorKind</code> of the error.","Returns the corresponding <code>LimitErrorKind</code> of the error.","Create an <code>EncodingError</code> that stems from an arbitrary error …","Create a <code>DecodingError</code> that stems from an arbitrary error …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The samples are in column-major form and all samples are …","Denotes invalid flat sample buffers when trying to convert …","A flat buffer over a (multi channel) image.","All samples are packed.","Different normal forms of buffers.","The represented image can not use this representation.","At least pixels are packed.","The samples are in row-major form and all samples are …","A ffi compatible description of a sample buffer.","The represented image was too large.","No pixel aliases another.","A flat buffer that can be used as an image view.","A mutable owning version of a flat buffer.","The color format did not match the channel count.","Get a mutable reference based version.","View the samples as a slice.","Get a reference based version.","View the samples as a slice.","View this buffer as an image over some type of pixel.","Interpret this buffer as a mutable image.","View this buffer but keep mutability at a sample level.","","","","","","","","","","","","","","Tuple of bounds in the order of coordinate inputs.","Tuple of bounds in the order of coordinate inputs.","","","Add this to an index to get to the sample in the next …","The number of channels in the color representation of the …","","","","","","","","","","","","","Supplementary color information.","Describe a column-major image packed in all directions.","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the dimensions <code>(channels, width, height)</code>.","Get the dimensions <code>(channels, width, height)</code>.","Check if a buffer of length <code>len</code> is large enough.","Check if a buffer of length <code>len</code> is large enough.","Get a reference on the inner sample descriptor.","Get a reference on the sample buffer descriptor.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get a mutable reference to a single sample.","Get a mutable reference to a selected subpixel if it is …","Get a mutable reference to a selected sample.","","","","Get a reference to a single sample.","Get a reference to a selected subpixel if it is in-bounds.","Get a reference to a selected subpixel.","If there are any samples aliasing each other.","If there are any samples aliasing each other.","","","","The height of the represented image.","Add this to an index to get to the next sample in …","Mutable portion of the buffer that holds sample values.","Return the mutable portion of the buffer that holds sample …","Return the mutable buffer that holds sample values.","Return the portion of the buffer that holds sample values.","Return the portion of the buffer that holds sample values.","Return the portion of the buffer that holds sample values.","Check that the pixel and the channel index are in bounds.","Check that the pixel and the channel index are in bounds.","","","Get an index provided it is inbouds.","Get an index provided it is inbouds.","Resolve the index of a particular sample.","Return a reference to a single sample at specified …","Resolve the index of a particular sample.","Get the theoretical position of sample (x, y, channel).","Get the theoretical position of sample (channel, x, y).","Return a mutable reference to a single sample at specified …","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Take out the sample buffer.","Take out the sample buffer.","Check if a buffer fulfills the requirements of a normal …","Check if a buffer fulfills the requirements of a normal …","A <code>repr(C)</code> description of the layout of buffer samples.","Get the minimum length of a buffer such that all in-bounds …","Get the minimum length of a buffer such that all in-bounds …","Get the minimum length of a buffer such that all in-bounds …","Get the minimum length of a buffer such that all in-bounds …","Compares the logical preconditions.","","Describe a row-major image packed in all directions.","Get a reference on the inner buffer.","Get a reference on the inner buffer.","Underlying linear container holding sample values.","Shrink the image to the minimum of current and given …","Shrink the image to the minimum of current and given …","Shrink the inner image.","Shrink the inner image.","Get the strides for indexing matrix-like <code>[(c, w, h)]</code>.","Get the strides for indexing matrix-like <code>[(c, w, h)]</code>.","","","","","","","","Copy the data into an owned vector.","","","","","","","","","","","","","Move the data into an image buffer.","Try to convert this into an image with mutable pixels.","","","","","","","The width of the represented image.","Add this to an index to get to the next sample in …","Create a monocolor image from a single pixel.","","","","","","","","","","","","","","","","","","","","","","","","","Color operations","","Cubic Filter","Color operations","Available Sampling Filters.","","Gaussian Filter","","Lanczos with window 3","","Nearest Neighbor","","Linear Filter","Image sampling Performs a Gaussian blur on the supplied …","","","Color operations","","","Functions for altering and converting the color of …","Color operations","Return a mutable view into an image The coordinates set …","Return an immutable view into an image The coordinates set …","","","Color operations","","","Image sampling Perform a 3x3 box filter on the supplied …","Affine transformations Flip an image horizontally","Affine transformations Flip an image horizontally and put …","Affine transformations Flip an image horizontally in place.","Affine transformations Flip an image vertically","Affine transformations Flip an image vertically and put …","Affine transformations Flip an image vertically in place.","","Returns the argument unchanged.","Color operations","Fill the image with a linear horizontal gradient","Color operations","Color operations","","Calls <code>U::from(self)</code>.","Color operations","Overlay an image at a given coordinate (x, y)","Calculate the region that can be copied from top to bottom.","Replace the contents of an image at a given coordinate (x, …","Image sampling Resize the supplied image to the specified …","Affine transformations Rotate an image 180 degrees …","Affine transformations Rotate an image 180 degrees …","Affine transformations Rotate an image 180 degrees …","Affine transformations Rotate an image 270 degrees …","Affine transformations Rotate an image 270 degrees …","Affine transformations Rotate an image 90 degrees …","Affine transformations Rotate an image 90 degrees …","Image sampling Resize the supplied image to the specific …","Tile an image by repeating it multiple times","","","","","Image sampling Performs an unsharpen mask on the supplied …","Fill the image with a linear vertical gradient","A bi-level color map","The color type on which the map operates on","A color map","","","Brighten the supplied image. <code>value</code> is the amount to …","Brighten the supplied image in place. <code>value</code> is the amount …","","","Adjust the contrast of the supplied image. <code>contrast</code> is the …","Adjust the contrast of the supplied image in place. …","","","Reduces the colors of the image using the supplied …","","Returns the argument unchanged.","Convert the supplied image to grayscale","Determine if this implementation of ColorMap overrides the …","Indicate NeuQuant implements <code>lookup</code>.","Hue rotate the supplied image. <code>value</code> is the degrees to …","Hue rotate the supplied image in place. <code>value</code> is the …","Reduces the colors using the supplied <code>color_map</code> and …","Returns the index of the closest match of <code>color</code> in the …","","","Calls <code>U::from(self)</code>.","Invert each pixel within the supplied image. This function …","Looks up color by index in the color map.  If <code>idx</code> is out …","","Maps <code>color</code> to the closest color in the color map.","","","","","","A multi-format image reader.","","","Remove the current information on the image format.","Read the image (replaces <code>load</code>).","","","","Get the currently determined format.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Read the image dimensions.","Unwrap the reader.","Create a new image reader without a preset format.","Open a file to read, format will be guessed from path.","Supply the format as which to interpret the read image.","","","","Construct a reader with specified format.","Make a format guess based on the content, replacing it on …","","","","","","A Rectangle defined by its top left corner, width and …","","","","","","","","","","","Returns the argument unchanged.","","The rectangle’s height.","","Calls <code>U::from(self)</code>.","NEUQUANT Neural-Net quantization algorithm by Anthony …","","","","","Shared mathematical utility functions.","The rectangle’s width.","The x coordinate of the top left corner.","The y coordinate of the top left corner.","Neural network color quantizer","","","","","","","Returns the argument unchanged.","Indicate NeuQuant implements <code>lookup</code>.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","Cut value to be inside given range","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[34,0,32,0,26,34,0,26,34,32,37,16,16,16,0,32,0,0,0,0,32,37,0,0,0,0,0,32,37,0,0,32,32,37,1,1,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,159,44,32,37,34,26,34,34,34,26,34,34,26,34,34,34,26,34,0,0,0,44,0,32,37,32,37,0,0,59,0,34,26,34,34,34,26,34,0,0,34,26,34,34,34,26,34,0,0,16,32,37,32,34,37,32,1,16,5,6,7,8,9,10,16,5,6,7,8,9,10,16,5,6,7,8,9,10,16,16,1,1,168,1,13,13,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,13,1,1,1,1,26,16,5,6,7,8,9,10,159,29,13,1,1,0,41,29,31,35,13,26,34,5,6,7,8,9,10,1,32,37,38,40,41,29,31,35,13,26,34,5,6,7,8,9,10,1,32,37,38,40,44,29,13,1,1,0,31,31,26,32,32,29,16,16,26,34,16,5,6,7,8,9,10,16,5,6,7,8,9,10,16,5,6,7,8,9,10,31,35,13,26,34,5,6,7,8,9,10,1,32,37,38,40,31,35,13,26,34,5,6,7,8,9,10,1,32,37,38,40,0,41,1,16,16,59,16,16,13,159,159,159,159,13,1,1,38,0,13,31,41,29,31,35,13,13,26,34,5,6,7,8,9,10,1,32,37,38,40,41,29,31,35,13,13,26,34,5,6,7,8,9,10,1,32,37,38,40,59,44,29,13,13,1,41,29,31,35,13,26,34,5,6,7,8,9,10,1,32,37,38,40,0,13,13,13,13,35,13,26,34,5,6,7,8,9,10,1,32,37,38,35,13,26,34,5,6,7,8,9,10,1,32,37,38,0,22,13,32,0,1,0,1,1,35,13,26,34,5,6,7,8,9,10,1,32,37,38,40,41,29,31,35,13,26,34,34,5,5,6,6,7,7,8,8,9,9,10,10,1,32,37,37,38,40,16,5,6,7,8,9,10,1,32,13,35,31,32,13,13,35,16,5,6,7,8,9,10,16,5,6,7,8,9,10,13,44,29,13,13,1,159,29,13,13,1,0,1,0,26,26,13,26,34,5,6,7,8,9,10,1,32,0,44,44,13,1,0,0,0,44,44,13,5,6,7,8,9,10,13,5,6,7,8,9,10,41,29,31,35,13,26,34,5,6,7,8,9,10,1,32,37,38,40,44,29,13,1,159,29,13,1,41,29,31,35,13,26,34,5,6,7,8,9,10,1,32,37,38,40,1,1,1,1,31,1,13,169,41,40,1,1,1,1,1,1,13,59,1,1,1,1,1,1,13,16,5,6,7,8,9,10,1,0,0,31,0,0,0,16,5,6,7,8,9,10,16,5,6,7,8,9,10,16,5,6,7,8,9,10,16,16,0,41,29,31,13,1,1,1,1,1,1,1,1,1,1,41,40,35,0,59,59,35,44,44,13,13,0,0,159,29,13,13,1,59,59,59,59,170,170,170,38,1,1,1,1,1,1,13,13,13,13,1,0,0,13,1,59,59,159,159,29,0,1,1,0,16,5,6,7,8,9,10,1,1,16,5,6,7,8,9,10,1,1,1,29,16,5,6,7,8,9,10,1,1,1,16,5,6,7,8,9,10,1,1,1,31,35,13,26,34,5,6,7,8,9,10,1,32,37,38,40,16,5,6,7,8,9,10,1,1,1,16,5,6,7,8,9,10,1,1,1,31,38,59,59,41,29,31,35,13,26,34,5,6,7,8,9,10,1,32,37,38,40,41,29,31,35,13,26,34,5,6,7,8,9,10,1,32,37,38,40,41,29,31,35,13,26,34,5,6,7,8,9,10,1,32,37,38,40,44,44,13,159,159,13,1,44,44,29,0,44,44,13,171,1,0,0,0,0,0,0,0,0,0,0,0,0,70,71,74,75,49,51,50,52,70,71,74,75,49,51,50,52,70,74,49,51,70,74,49,51,172,70,71,74,75,49,51,50,52,70,71,74,75,49,51,50,52,70,71,74,75,49,51,50,52,70,71,74,75,49,51,50,52,70,71,74,75,49,51,50,52,70,71,74,75,49,51,50,52,70,71,74,75,49,51,50,52,70,71,74,75,49,51,50,52,70,71,74,75,49,51,50,52,70,71,74,75,49,51,50,52,70,71,74,75,70,74,49,51,70,71,74,75,49,51,50,52,70,71,74,75,49,51,50,52,70,71,74,75,49,51,50,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,83,82,83,82,82,83,82,83,82,82,83,83,82,83,82,83,82,83,82,82,83,82,82,82,83,82,83,82,83,83,0,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,85,85,85,0,0,0,0,0,0,0,86,89,87,85,86,89,87,85,85,85,86,85,86,89,87,85,86,89,87,85,86,86,89,87,85,87,85,85,85,86,89,87,85,86,89,87,85,86,89,87,85,86,86,87,89,86,86,86,85,86,89,87,85,86,89,87,85,86,89,87,85,0,0,0,93,91,92,93,91,92,91,93,91,92,93,91,92,91,93,91,92,92,93,91,92,93,91,92,93,91,92,91,91,92,93,91,91,93,93,91,92,93,91,92,93,91,92,92,0,95,0,0,0,95,0,96,99,97,95,96,99,97,95,95,95,96,96,99,97,95,96,99,97,95,96,96,99,97,95,97,97,97,95,96,99,97,95,96,99,97,95,96,99,97,95,96,96,96,97,97,99,96,99,97,95,97,96,99,97,95,96,99,97,95,96,99,97,95,0,0,0,0,0,0,0,0,0,0,0,0,0,106,105,103,102,104,100,101,106,105,103,102,104,100,101,100,100,101,100,101,101,102,101,100,106,105,103,102,104,100,101,106,105,103,102,104,100,101,102,106,105,103,102,104,100,101,100,103,100,100,101,102,104,100,101,106,105,103,102,104,100,101,101,106,105,103,102,104,100,101,106,105,103,102,104,100,101,105,104,102,104,103,102,104,102,105,101,101,106,102,104,104,104,104,0,102,106,0,105,100,100,100,100,101,0,106,105,103,102,104,100,101,106,105,103,102,104,100,101,106,105,103,102,104,100,101,101,104,0,0,0,110,111,110,111,110,110,111,110,111,110,110,111,111,110,111,110,111,110,111,110,110,111,110,110,111,110,111,110,111,111,112,112,0,0,0,112,0,0,114,115,112,113,114,115,112,113,112,113,112,113,114,113,113,114,115,112,113,114,115,112,113,114,113,114,115,112,113,115,115,112,113,112,113,112,113,114,115,112,113,114,115,112,113,114,115,112,113,114,114,115,115,114,114,115,112,113,114,115,112,113,114,115,112,113,114,115,112,113,113,115,0,119,118,0,118,118,0,118,119,0,0,119,0,0,0,118,119,119,116,121,116,117,120,118,119,121,116,117,120,118,119,118,119,118,119,116,118,119,121,116,117,120,118,119,121,116,117,120,118,119,116,121,116,117,120,118,119,120,118,119,118,119,118,119,121,116,117,120,118,119,121,116,117,120,118,119,121,116,117,120,118,119,117,116,116,116,120,120,121,116,121,116,118,119,121,116,117,120,118,119,121,116,117,120,118,119,121,116,117,120,118,119,120,0,128,0,127,127,128,0,129,129,129,128,0,129,129,0,0,0,128,0,0,0,0,0,129,129,0,122,122,122,122,130,131,122,127,128,124,125,126,123,129,130,131,122,127,128,124,125,126,123,129,127,128,124,125,126,123,129,127,128,124,125,126,123,129,130,123,130,131,122,127,128,124,125,126,123,129,130,131,122,127,128,124,125,126,123,129,130,130,131,122,127,128,124,125,126,123,129,131,124,125,126,127,128,127,128,127,128,124,125,126,123,129,130,131,122,122,122,122,122,127,128,124,125,126,123,129,122,124,125,126,123,130,131,122,127,128,124,125,126,123,129,130,131,122,127,128,124,125,126,123,129,130,130,128,122,126,123,125,130,131,130,130,128,130,122,127,128,124,125,126,123,129,130,131,122,127,128,124,125,126,123,129,130,131,122,127,128,124,125,126,123,129,123,130,131,122,127,128,124,125,126,123,129,122,124,125,126,123,131,131,131,122,131,0,0,132,133,132,133,132,132,133,132,133,132,132,133,133,132,133,132,133,132,133,132,132,133,132,132,132,132,133,132,133,132,133,133,0,0,0,134,136,135,134,136,135,134,134,136,135,134,136,135,134,134,136,135,135,134,136,135,134,136,135,134,136,135,134,134,135,136,134,136,134,136,135,134,136,135,134,136,135,135,0,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,0,0,0,139,138,139,138,138,138,139,138,139,138,139,138,139,138,138,138,139,138,138,139,138,139,138,138,139,138,138,139,138,139,138,139,138,138,138,0,0,0,0,0,0,0,0,140,88,0,142,141,88,0,143,141,140,141,140,0,0,0,142,88,0,0,88,143,141,88,0,0,143,143,88,0,0,88,145,140,146,147,141,148,149,142,143,88,145,140,146,147,141,148,149,142,143,140,141,142,143,140,141,142,143,88,145,140,146,147,141,148,149,142,143,88,145,140,146,147,141,148,149,142,143,88,145,140,146,147,141,148,149,142,143,140,141,142,143,142,88,88,145,145,140,146,146,147,147,141,148,148,149,149,142,143,143,145,146,148,88,88,88,145,145,140,146,147,141,148,149,142,143,143,143,145,146,148,147,149,140,141,142,143,88,145,140,146,147,141,148,149,142,143,88,145,140,146,147,141,148,149,142,143,145,147,149,146,148,88,146,147,148,140,141,142,143,88,145,146,147,148,149,143,88,145,140,146,147,141,148,149,142,143,88,145,140,146,147,141,148,149,142,143,88,145,140,146,147,141,148,149,142,143,0,0,0,156,0,0,156,0,150,156,156,0,150,156,0,0,150,19,19,19,19,19,19,19,155,19,76,154,155,150,156,19,76,154,155,150,156,19,76,154,155,76,76,19,76,154,155,150,156,19,76,154,155,150,156,19,76,19,76,154,155,150,156,19,76,154,155,150,156,154,155,19,76,154,155,150,156,76,150,156,76,150,156,19,76,19,76,154,155,19,76,154,155,150,150,156,19,76,154,155,150,156,19,154,155,154,155,155,19,154,155,19,76,76,150,156,76,76,19,154,155,19,154,155,19,76,154,155,19,76,19,19,76,19,76,19,19,76,154,155,150,156,154,155,155,19,76,154,155,150,156,154,155,19,76,19,19,76,154,155,156,155,76,154,155,19,19,76,154,155,19,76,19,76,154,155,150,156,150,19,19,76,154,155,150,156,19,76,154,155,150,156,19,154,19,76,154,155,150,156,76,76,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,0,0,0,73,0,73,0,73,0,73,0,73,73,0,73,73,0,0,0,0,73,73,0,73,73,0,0,0,0,0,0,0,73,73,0,0,0,0,73,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,73,73,73,0,0,0,161,0,160,160,0,0,160,160,0,0,160,160,0,160,160,0,161,160,0,0,0,161,160,160,160,0,161,160,161,160,160,160,160,160,0,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,0,0,0,0,0,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,45,45,45,45,0,45,45,45,0,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],1],[3],[[[5,[4]],3]],[[[6,[4]],3]],[[[7,[4]],3]],[[[8,[4]],3]],[[[9,[4]],3]],[[[10,[4]],3]],[3],[[[5,[4]],[5,[4]],3]],[[[6,[4]],[6,[4]],3]],[[[7,[4]],[7,[4]],3]],[[[8,[4]],[8,[4]],3]],[[[9,[4]],[9,[4]],3]],[[[10,[4]],[10,[4]],3]],[[3,3]],[[[5,[4]],3,3]],[[[6,[4]],3,3]],[[[7,[4]],3,3]],[[[8,[4]],3,3]],[[[9,[4]],3,3]],[[[10,[4]],3,3]],[3],[3],[1,[[14,[[13,[[6,[11]],[12,[11]]]]]]]],[1,[[14,[[13,[[9,[11]],[12,[11]]]]]]]],[[],[[15,[11]]]],[1,[[15,[11]]]],[[[13,[16,[17,[15]],18]]],[[19,[15]]]],[[[13,[16,[20,[15]],18]]],[[19,[15]]]],[1,[[14,[[19,[[15,[21]]]]]]]],[1,[[14,[[19,[[15,[11]]]]]]]],[1,[[14,[[13,[[7,[21]],[12,[21]]]]]]]],[1,[[14,[22]]]],[1,[[14,[[13,[[10,[21]],[12,[21]]]]]]]],[1,[[14,[23]]]],[1,[[14,[[13,[[6,[11]],[12,[11]]]]]]]],[1,[[14,[[13,[[9,[11]],[12,[11]]]]]]]],[1,[[14,[[13,[[7,[21]],[12,[21]]]]]]]],[1,[[14,[22]]]],[1,[[14,[[13,[[10,[21]],[12,[21]]]]]]]],[1,[[14,[23]]]],[1,[[14,[[13,[[5,[21]],[12,[21]]]]]]]],[1,[[14,[24]]]],[1,[[14,[[13,[[8,[21]],[12,[21]]]]]]]],[1,[[14,[25]]]],[[[13,[16,18]]],18],[1,[[14,[[13,[[5,[21]],[12,[21]]]]]]]],[1,[[14,[24]]]],[1,[[14,[[13,[[8,[21]],[12,[21]]]]]]]],[1,[[14,[25]]]],[26,21],[[]],[[[5,[4]],[5,[4]]]],[[[6,[4]],[6,[4]]]],[[[7,[4]],[7,[4]]]],[[[8,[4]],[8,[4]]]],[[[9,[4]],[9,[4]]]],[[[10,[4]],[10,[4]]]],[[27,27]],[[[29,[28]],27,27]],[[[13,[16,[0,[18,28]]]],27,27,16]],[[1,27,27,[8,[11]]]],[[1,2],1],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[29,[18]]]],[[[13,[16,[0,[18,18]]]]]],[1],[[1,30],1],0,[31,25],[31,25],[26,11],[32,33],[32,33],[[29,27,27,27,27]],[[],11],[[],11],[26,11],[34,11],[[],15],[[[5,[4]]],[[15,[4]]]],[[[6,[4]]],[[15,[4]]]],[[[7,[4]]],[[15,[4]]]],[[[8,[4]]],[[15,[4]]]],[[[9,[4]]],[[15,[4]]]],[[[10,[4]]],[[15,[4]]]],[[]],[[[5,[4]]]],[[[6,[4]]]],[[[7,[4]]]],[[[8,[4]]]],[[[9,[4]]]],[[[10,[4]]]],[[],15],[[[5,[4]]],[[15,[4]]]],[[[6,[4]]],[[15,[4]]]],[[[7,[4]]],[[15,[4]]]],[[[8,[4]]],[[15,[4]]]],[[[9,[4]]],[[15,[4]]]],[[[10,[4]]],[[15,[4]]]],[31,31],[35,35],[[[13,[16,[0,[18,36]]]]],[[13,[16,[0,[18,36]]]]]],[26,26],[34,34],[[[5,[[0,[36,4]]]]],[[5,[[0,[36,4]]]]]],[[[6,[[0,[36,4]]]]],[[6,[[0,[36,4]]]]]],[[[7,[[0,[36,4]]]]],[[7,[[0,[36,4]]]]]],[[[8,[[0,[36,4]]]]],[[8,[[0,[36,4]]]]]],[[[9,[[0,[36,4]]]]],[[9,[[0,[36,4]]]]]],[[[10,[[0,[36,4]]]]],[[10,[[0,[36,4]]]]]],[1,1],[32,32],[37,37],[38,38],[[[40,[39]]],[[40,[39]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[41,[[42,[[12,[31]]]]]],[1,26],[[],43],[[],43],[[],26],[[],26],[[],26],[[[13,[16,18]]],[[13,[[0,[[0,[16]],16]],12]]]],[[44,27,27],42],[[44,27,27],42],[[45,27,27],33],[[45,27,27],33],[[[13,[16,[0,[18,28]]]],45,27,27],33],[[1,27,27,27,27],1],[[1,27,27,27,27],1],[38,46],0,[[],[[13,[16,47]]]],[31,35],[48],[48],[48],[48],[[[13,[16,18]]]],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[[[13,[16,[0,[18,28]]]]]],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[[]],[[]],[[[29,[18]]]],[[[13,[16,18]]]],[[[13,[16,[0,[18,18]]]]]],[1],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],0,[[[13,[16,18]]],[[49,[16]]]],[[[13,[16,[0,[18,28]]]]],[[50,[16]]]],[[[13,[16,18]]],[[51,[16]]]],[[[13,[16,[0,[18,28]]]]],[[52,[16]]]],[[35,35],33],[[[13,[[0,[53,16]],53]],[13,[[0,[53,16]],53]]],33],[[26,26],33],[[34,34],33],[[[5,[[0,[53,4]]]],[5,[[0,[53,4]]]]],33],[[[6,[[0,[53,4]]]],[6,[[0,[53,4]]]]],33],[[[7,[[0,[53,4]]]],[7,[[0,[53,4]]]]],33],[[[8,[[0,[53,4]]]],[8,[[0,[53,4]]]]],33],[[[9,[[0,[53,4]]]],[9,[[0,[53,4]]]]],33],[[[10,[[0,[53,4]]]],[10,[[0,[53,4]]]]],33],[[1,1],33],[[32,32],33],[[37,37],33],[[38,38],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],0,[[22,15,[14,[11]]],25],[[[13,[[7,[11]],[12,[11,54]]]],15,[14,[11]]],25],[32,[[15,[43]]]],0,[[1,[15,[2]]],1],0,[1,1],[1,1],[[35,55],56],[[[13,[[0,[57,16]],57]],55],56],[[26,55],56],[[34,55],56],[[[5,[[0,[57,4]]]],55],56],[[[6,[[0,[57,4]]]],55],56],[[[7,[[0,[57,4]]]],55],56],[[[8,[[0,[57,4]]]],55],56],[[[9,[[0,[57,4]]]],55],56],[[[10,[[0,[57,4]]]],55],56],[[1,55],56],[[32,55],56],[[37,55],56],[[38,55],56],[[[40,[[0,[57,39]]]],55],56],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[26,34],[[[58,[4]]],[[5,[4]]]],[[]],[[]],[[[58,[4]]],[[6,[4]]]],[[]],[[[58,[4]]],[[7,[4]]]],[[[58,[4]]],[[8,[4]]]],[[]],[[[58,[4]]],[[9,[4]]]],[[]],[[[58,[4]]],[[10,[4]]]],[[]],[[]],[[]],[[]],[32,37],[[]],[[]],[[]],[[4,4,4,4],[[5,[4]]]],[[4,4,4,4],[[6,[4]]]],[[4,4,4,4],[[7,[4]]]],[[4,4,4,4],[[8,[4]]]],[[4,4,4,4],[[9,[4]]]],[[4,4,4,4],[[10,[4]]]],[59,[[42,[1]]]],[[[17,[60]]],[[14,[32]]]],[[27,27,3],[[13,[16,12]]]],[[27,27],35],[[25,27,27,35],31],[[[17,[61]]],[[42,[32]]]],[[27,27,16],[[13,[16,12]]]],[[27,27,18],[[14,[[13,[16,18]]]]]],[62,35],[15],[[[15,[4]]],[[5,[4]]]],[[[15,[4]]],[[6,[4]]]],[[[15,[4]]],[[7,[4]]]],[[[15,[4]]],[[8,[4]]]],[[[15,[4]]],[[9,[4]]]],[[[15,[4]]],[[10,[4]]]],[15],[[[15,[4]]],[[5,[4]]]],[[[15,[4]]],[[6,[4]]]],[[[15,[4]]],[[7,[4]]]],[[[15,[4]]],[[8,[4]]]],[[[15,[4]]],[[9,[4]]]],[[[15,[4]]],[[10,[4]]]],[[27,27,12],[[14,[[13,[16,12]]]]]],[[27,27]],[[[29,[18]],27,27]],[[[13,[16,[0,[18,18]]]],27,27],16],[[[13,[16,18]],27,27],16],[[1,27,27],[[8,[11]]]],[[27,27]],[[[29,[28]],27,27]],[[[13,[16,[0,[18,28]]]],27,27],16],[[[13,[16,[0,[18,28]]]],27,27],16],[[1,27,27],[[8,[11]]]],0,[1,1],[[[15,[11]]],[[42,[32]]]],[26,33],[26,33],[[[13,[[0,[63,16]],63]],64]],[[26,64]],[[34,64]],[[[5,[[0,[63,4]]]],64]],[[[6,[[0,[63,4]]]],64]],[[[7,[[0,[63,4]]]],64]],[[[8,[[0,[63,4]]]],64]],[[[9,[[0,[63,4]]]],64]],[[[10,[[0,[63,4]]]],64]],[[1,64]],[[32,64]],0,[[],27],[[],27],[[[13,[16,18]]],27],[[1,30],1],0,[[[17,[61]]],42],0,[[27,27],33],[[27,27],33],[[[13,[16,18]]],16],[[[5,[4]],48],4],[[[6,[4]],48],4],[[[7,[4]],48],4],[[[8,[4]],48],4],[[[9,[4]],48],4],[[[10,[4]],48],4],[[[13,[16,[0,[18,28]]]]],16],[[[5,[4]],48],4],[[[6,[4]],48],4],[[[7,[4]],48],4],[[[8,[4]],48],4],[[[9,[4]],48],4],[[[10,[4]],48],4],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[]],[[[29,[18]]]],[[[13,[16,[0,[18,18]]]]]],[1],[[]],[[[29,[28]]]],[[[13,[16,[0,[18,28]]]]]],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[13,[[6,[11]],[12,[11]]]]]],[1,[[13,[[6,[11]],[12,[11]]]]]],[1,[[13,[[9,[11]],[12,[11]]]]]],[1,[[13,[[9,[11]],[12,[11]]]]]],[31,25],[1,[[12,[11]]]],[[[13,[16,[17,[15]],18]]],[[19,[[17,[15]],18]]]],[[],41],[[]],[[]],[1,22],[1,[[13,[[7,[21]],[12,[21]]]]]],[1,22],[1,23],[1,[[13,[[10,[21]],[12,[21]]]]]],[1,23],[[[13,[16,18]]],18],[[],42],[1,24],[1,[[13,[[5,[21]],[12,[21]]]]]],[1,24],[1,25],[1,[[13,[[8,[21]],[12,[21]]]]]],[1,25],[[[13,[16,12]]],12],[[]],[[[5,[4]]]],[[[6,[4]]]],[[[7,[4]]]],[[[8,[4]]]],[[[9,[4]]]],[[[10,[4]]]],[1],0,0,[31,27],[[[0,[65,66]],32],[[42,[1]]]],[[[15,[11]]],[[42,[1]]]],[[[15,[11]],32],[[42,[1]]]],[3],[[[5,[4]],3],[[5,[4]]]],[[[6,[4]],3],[[6,[4]]]],[[[7,[4]],3],[[7,[4]]]],[[[8,[4]],3],[[8,[4]]]],[[[9,[4]],3],[[9,[4]]]],[[[10,[4]],3],[[10,[4]]]],[3],[[[5,[4]],[5,[4]],3],[[5,[4]]]],[[[6,[4]],[6,[4]],3],[[6,[4]]]],[[[7,[4]],[7,[4]],3],[[7,[4]]]],[[[8,[4]],[8,[4]],3],[[8,[4]]]],[[[9,[4]],[9,[4]],3],[[9,[4]]]],[[[10,[4]],[10,[4]],3],[[10,[4]]]],[[3,3]],[[[5,[4]],3,3],[[5,[4]]]],[[[6,[4]],3,3],[[6,[4]]]],[[[7,[4]],3,3],[[7,[4]]]],[[[8,[4]],3,3],[[8,[4]]]],[[[9,[4]],3,3],[[9,[4]]]],[[[10,[4]],3,3],[[10,[4]]]],[3],[3],0,[[[68,[67]]],41],[[27,27,27,27],29],[25,31],[[27,27],[[13,[16,12]]]],[[27,27],1],[[27,27],1],[[27,27],1],[[27,27],1],[[27,27],1],[[27,27],1],[[27,27],1],[[27,27],1],[[27,27],1],[[27,27],1],[41,[[14,[[42,[31]]]]]],[[[40,[44]]],14],[35],[[[17,[61]]],[[42,[1]]]],[[],34],[[],34],[[35,35],[[14,[69]]]],[[],40],[[],40],[[[13,[16,18]]],[[70,[16]]]],[[[13,[16,[0,[18,28]]]]],[[71,[16]]]],0,0,[[27,27]],[[[29,[28]],27,27]],[[[13,[16,[0,[18,28]]]],27,27,16]],[[[13,[16,[0,[18,28]]]],27,27,16]],[[1,27,27,[8,[11]]]],[[[15,[11]]],42],[[[15,[11]]],42],[[[15,[11]],72],42],[[[15,[11]],72],42],[[27,27,27,27,[15,[11]]],42],[[27,27,27,27,[15,[11]]],42],[[27,27,27,27,[15,[11]],72],42],[38,46],[[1,27,27,73],1],[[1,27,27,73],1],[[1,27,27,73],1],[1,1],[1,1],[1,1],[[[13,[16,18]]],[[74,[16]]]],[[[13,[16,[0,[18,28]]]]],[[75,[16]]]],[[[13,[16,18]]],76],[[[13,[16,18]],[17,[61]]],42],[[1,[17,[61]]],42],[[[17,[61]],[15,[11]],27,27,26],42],[[[17,[61]],[15,[11]],27,27,26,32],42],[[[13,[16,18]],[17,[61]],32],42],[[1,[17,[61]],32],42],[[],46],[[],46],[[27,27,27,27],29],[[27,27,27,27],29],[[[29,[28]],27,27,27,27],29],0,[[1,27,27],1],[[1,27,27],1],0,[[],6],[[[5,[4]]],[[6,[4]]]],[[[6,[4]]],[[6,[4]]]],[[[7,[4]]],[[6,[4]]]],[[[8,[4]]],[[6,[4]]]],[[[9,[4]]],[[6,[4]]]],[[[10,[4]]],[[6,[4]]]],[1,[[13,[[6,[11]],[12,[11]]]]]],[1,[[13,[[6,[11]],[12,[11]]]]]],[[],9],[[[5,[4]]],[[9,[4]]]],[[[6,[4]]],[[9,[4]]]],[[[7,[4]]],[[9,[4]]]],[[[8,[4]]],[[9,[4]]]],[[[9,[4]]],[[9,[4]]]],[[[10,[4]]],[[9,[4]]]],[1,[[13,[[9,[11]],[12,[11]]]]]],[1,[[13,[[9,[11]],[12,[11]]]]]],[1,[[12,[11]]]],[[[29,[18]]],[[13,[12]]]],[[],7],[[[5,[4]]],[[7,[4]]]],[[[6,[4]]],[[7,[4]]]],[[[7,[4]]],[[7,[4]]]],[[[8,[4]]],[[7,[4]]]],[[[9,[4]]],[[7,[4]]]],[[[10,[4]]],[[7,[4]]]],[1,22],[1,[[13,[[7,[21]],[12,[21]]]]]],[1,22],[[],10],[[[5,[4]]],[[10,[4]]]],[[[6,[4]]],[[10,[4]]]],[[[7,[4]]],[[10,[4]]]],[[[8,[4]]],[[10,[4]]]],[[[9,[4]]],[[10,[4]]]],[[[10,[4]]],[[10,[4]]]],[1,23],[1,[[13,[[10,[21]],[12,[21]]]]]],[1,23],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[[5,[4]]],[[5,[4]]]],[[[6,[4]]],[[5,[4]]]],[[[7,[4]]],[[5,[4]]]],[[[8,[4]]],[[5,[4]]]],[[[9,[4]]],[[5,[4]]]],[[[10,[4]]],[[5,[4]]]],[1,24],[1,[[13,[[5,[21]],[12,[21]]]]]],[1,24],[[],8],[[[5,[4]]],[[8,[4]]]],[[[6,[4]]],[[8,[4]]]],[[[7,[4]]],[[8,[4]]]],[[[8,[4]]],[[8,[4]]]],[[[9,[4]]],[[8,[4]]]],[[[10,[4]]],[[8,[4]]]],[1,25],[1,[[13,[[8,[21]],[12,[21]]]]]],[1,25],[31,27],[38,46],[[],46],[[],46],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[27,27]],[[27,27]],[[[13,[16,[0,[18,18]]]],27,27],16],[[27,27]],[[27,27]],[[[13,[16,[0,[18,28]]]],27,27,16]],[[1,2,30],1],[[27,27,27,27],29],[[27,27,27,27],29],[[[29,[18]],27,27,27,27],29],0,[[],27],[[],27],[[[13,[16,18]]],27],[[[15,[11]],27,27,26],42],[[1,79,[80,[37]]],42],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[70,[16]]],[[70,[16]]]],[[[74,[16]]],[[74,[16]]]],[[[49,[16]]],[[49,[16]]]],[[[51,[16]]],[[51,[16]]]],[[]],[[]],[[]],[[]],[[]],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[[[70,[16]],55],56],[[[71,[16]],55],56],[[[74,[16]],55],56],[[[75,[16]],55],56],[[[49,[16]],55],56],[[[51,[16]],55],56],[[[50,[16]],55],56],[[[52,[16]],55],56],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[70,[16]]],48],[[[71,[16]]],48],[[[74,[16]]],48],[[[75,[16]]],48],[[[49,[16]]],48],[[[51,[16]]],48],[[[50,[16]]],48],[[[52,[16]]],48],[[[70,[16]]],[[14,[16]]]],[[[71,[16]]],[[14,[16]]]],[[[74,[16]]],[[14,[[70,[16]]]]]],[[[75,[16]]],[[14,[[71,[16]]]]]],[[[49,[16]]],14],[[[51,[16]]],14],[[[50,[16]]],14],[[[52,[16]]],14],[[[70,[16]]],[[14,[16]]]],[[[71,[16]]],[[14,[16]]]],[[[74,[16]]],[[14,[[70,[16]]]]]],[[[75,[16]]],[[14,[[71,[16]]]]]],[[]],[[]],[[]],[[]],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[[82,[[0,[81,66]]]]],26],[48],[48],[48],[48],[[[82,[[0,[81,66]]]]]],[48],[48],[[[83,[79]],[15,[11]],27,27,26],42],[[]],[[]],[[],48],[[],48],[[]],[[]],[[[82,[[0,[81,66]]]]],42],[[[0,[81,66]]],[[42,[[82,[[0,[81,66]]]]]]]],[79,[[83,[79]]]],[[[82,[[0,[81,66]]]],[15,[11]]],42],[[[82,[[0,[81,66]]]],27,27,27,27,[15,[11]],72],42],[[],77],[[],77],[[],77],[[],77],[[],78],[[],78],[[[83,[79]],[15,[11]],27,27,26],42],0,[[]],[[]],[[[84,[81]]],26],[48],[48],[[[84,[81]]]],[48],[[]],[[],48],[[]],[[[84,[81]]],42],[81,[[42,[[84,[81]]]]]],[[[84,[81]],[15,[11]]],42],[[[84,[81]]],46],[[],77],[[],77],[[],78],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[85,85],[[]],[[[86,[81]]],26],[85,26],[48],[48],[48],[48],[48],[48],[48],[48],[[[86,[81]]]],[48],[48],[48],[48],[[[87,[79]],[15,[11]],27,27,85],42],[[85,85],33],[[],33],[[85,55],56],[[]],[[]],[[]],[[]],[[],48],[[],48],[[],48],[[],48],[[]],[[]],[[]],[[]],[[[86,[81]]],42],[[81,27,27,85],[[77,[[86,[81]],88]]]],[79,[[87,[79]]]],[[[89,[81]],[15,[11]]],[[90,[48]]]],[[[86,[81]],[15,[11]]],42],[[[86,[[0,[81,66]]]],27,27,27,27,[15,[11]],72],42],[[[86,[81]]],46],[[]],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],78],[[],78],[[],78],[[],78],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[91,[81]]],26],[48],[48],[48],[48],[48],[48],[[[91,[81]]]],[48],[48],[48],[[[92,[79]],[15,[11]],27,27],42],[[]],[[]],[[]],[[],48],[[],48],[[],48],[[]],[[]],[[]],[[[91,[81]]],42],[81,[[42,[[91,[81]]]]]],[79,[[92,[79]]]],[[[93,[81]],[15,[11]]],[[90,[48]]]],[[[91,[[0,[81,66]]]],27,27,27,27,[15,[11]],72],42],[[[91,[81]]],46],[[[93,[[0,[81,66]]]],94],[[90,[46]]]],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],78],[[],78],[[],78],[[[92,[79]],[15,[11]],27,27,26],42],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[95,95],[[]],[[[96,[81]]],26],[48],[48],[48],[48],[48],[48],[48],[48],[[[96,[81]]]],[48],[48],[48],[48],[[[97,[79]],[15,[11]],27,27,26],42],[[[97,[79]],31],42],[[[97,[79]],98],42],[[95,55],56],[[]],[[]],[[]],[[]],[[],48],[[],48],[[],48],[[],48],[[]],[[]],[[]],[[]],[[[96,[81]]],41],[[[96,[81]]],42],[81,[[42,[[96,[81]]]]]],[79,[[97,[79]]]],[[79,30],[[97,[79]]]],[[99,[15,[11]]],[[90,[48]]]],[[[96,[81]],[15,[11]]],42],[[99,[12,[11]]],[[90,[48]]]],[[[97,[79]],95],42],[[]],[[[97,[79]],98],42],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],78],[[],78],[[],78],[[],78],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[100,100],[101,101],[[]],[[]],0,[[[102,[65]]],26],0,[[],100],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[[[102,[65]]]],[48],[48],[48],[48],[48],[48],[48],0,[[[103,[79]],[15,[[5,[2]]]],48,48],42],[[100,100],33],[[],33],0,[[[102,[[0,[57,65]]]],55],56],[[[104,[57]],55],56],[[100,55],56],[[101,55],56],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[104,[65]]]],[[[102,[65]]],42],[[[104,[65]]],101],[79,[[103,[79]]]],[65,[[42,[[102,[65]]]]]],[65,[[42,[[104,[65]]]]]],[65,[[42,[[102,[65]]]]]],[[[105,[65]]],14],0,0,[[106,[15,[11]]],[[90,[48]]]],[[[102,[65]],[15,[11]]],42],[[[104,[65]]],[[42,[[12,[[5,[2]]]]]]]],[[[104,[65]]],[[42,[[12,[[5,[11]]]]]]]],[[[104,[65]]],[[42,[[12,[100]]]]]],[[[104,[65]],[0,[107,108,72]],[15,[107]]],42],[[[17,[61]]],[[90,[[12,[[5,[2]]]]]]]],[[[102,[[0,[65,66]]]],27,27,27,27,[15,[11]],72],42],[[106,[12,[11]]],[[90,[48]]]],[[11,11,11,11],100],[[[105,[65]]]],[100,[[5,[2]]]],[100,[[5,[[0,[4,109]]]]]],[[100,2,2],[[5,[[0,[4,109]]]]]],[[]],[[]],[[[5,[2]]],100],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],0,[[65,33],[[42,[[104,[65]]]]]],0,0,0,[[]],[[]],[[]],[[]],[[[110,[[0,[81,66]]]]],26],[48],[48],[48],[48],[[[110,[[0,[81,66]]]]]],[48],[48],[[[111,[79]],[15,[11]],27,27,26],42],[[]],[[]],[[],48],[[],48],[[]],[[]],[[[110,[[0,[81,66]]]]],42],[[[0,[81,66]]],[[42,[[110,[[0,[81,66]]]]]]]],[79,[[111,[79]]]],[[[110,[[0,[81,66]]]],[15,[11]]],42],[[],77],[[],77],[[],77],[[],77],[[],78],[[],78],[[[111,[79]],[15,[11]],27,27,26],42],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[112,112],[113,113],[[]],[[]],[[[114,[81]]],26],[[],113],0,[48],[48],[48],[48],[48],[48],[48],[48],[[[114,[81]]]],[21,113],[48],[48],[48],[48],[[[115,[79]],[15,[11]],27,27,26],42],[[[115,[79]],44],42],[[112,112],33],[[113,113],33],[[],33],[[],33],[[112,55],56],[[113,55],56],[[]],[[]],[[]],[[]],[[],48],[[],48],[[],48],[[],48],[[]],[[]],[[]],[[]],[[[114,[81]]],42],[81,[[42,[[114,[81]]]]]],[79,[[115,[79]]]],[[79,11],[[115,[79]]]],[[[114,[81]],[15,[11]]],42],[[[114,[81]],21,21],42],[[[115,[79]],113]],[[]],[[]],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],78],[[],78],[[],78],[[],78],0,[[[115,[79]],[15,[11]],27,27,26],42],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[116,[81]]],[[117,[81]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[118,118],[119,119],[[]],[[]],[[[116,[81]]],26],[[],118],[[],119],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[[[116,[81]]]],[48],[48],[48],[48],[48],[48],[[[120,[79]],[15,[11]],27,27,26],42],[[118,118],33],[[119,119],33],[[],33],[[],33],[[118,55],56],[[119,55],56],[[]],[[]],[[]],[[]],[[]],[[]],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[]],[[]],[[]],[[]],[[]],[[]],[[[117,[81]]],41],[[[116,[81]]],42],[[[116,[81]]],33],[81,[[42,[[116,[81]]]]]],[79,[[120,[79]]]],[[79,118,119],[[120,[79]]]],[[[121,[81]],[15,[11]]],[[90,[48]]]],[[[116,[81]],[15,[11]]],42],[[[121,[81]],[12,[11]]],[[90,[48]]]],[[[116,[81]]],46],[[]],[[]],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[[120,[79]],[15,[11]],27,27,26],42],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[122,[[14,[123]]]],[122,[[14,[124]]]],[122,[[14,[125]]]],[122,[[14,[126]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[127,127],[128,128],[124,124],[125,125],[126,126],[123,123],[129,129],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[130,[81]]],26],0,[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[[[130,[81]]]],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[[[131,[79]],[80,[0]],27,27,26],42],0,0,0,[[127,127],33],[[128,128],33],[[],33],[[],33],[[127,55],56],[[128,55],56],[[124,55],56],[[125,55],56],[[126,55],56],[[123,55],56],[[129,55],56],[[]],[[]],[[]],[125,122],[126,122],[124,122],[123,122],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[122,27],0,0,0,0,[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[130,[81]]]],[[[130,[81]]],42],[128,[[58,[11]]]],[122,27],0,0,0,[81,[[42,[[130,[81]]]]]],[79,[[131,[79]]]],[[[130,[81]]],34],[[[130,[81]],[15,[11]]],42],[128,127],[[[130,[81]]],128],[122,128],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],0,[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[122,27],0,0,0,0,[[[131,[79]]],[[131,[79]]]],[[[131,[79]],122],[[131,[79]]]],[[[131,[79]],128],[[131,[79]]]],[[122,79],90],[[[131,[79]],[15,[11]],27,27,26],42],0,0,[[]],[[]],[[]],[[]],[[[132,[[0,[81,66]]]]],26],[48],[48],[48],[48],[[[132,[[0,[81,66]]]]]],[48],[48],[[[133,[79]],[15,[11]],27,27,26],42],[[]],[[]],[[],48],[[],48],[[]],[[]],[[[132,[[0,[81,66]]]]],42],[[[0,[81,66]]],[[42,[[132,[[0,[81,66]]]]]]]],[79,[[133,[79]]]],[[[132,[[0,[81,66]]]]],34],[[[132,[[0,[81,66]]]],[15,[11]]],42],[[[132,[[0,[81,66]]]]],46],[[],77],[[],77],[[],77],[[],77],[[],78],[[],78],[[[133,[79]],[15,[11]],27,27,26],42],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[134,[[0,[81,66]]]]],26],[48],[48],[48],[48],[48],[48],[[[134,[[0,[81,66]]]]]],[48],[48],[48],[[[135,[[0,[79,66]]]],[15,[11]],27,27,26],42],[[]],[[]],[[]],[[],48],[[],48],[[],48],[[]],[[]],[[]],[[[134,[[0,[81,66]]]]],42],[[[0,[81,66]]],[[77,[[134,[[0,[81,66]]]],88]]]],[[[0,[79,66]]],[[135,[[0,[79,66]]]]]],[[136,[15,[11]]],[[90,[48]]]],[[[134,[[0,[81,66]]]],[15,[11]]],42],[[136,[12,[11]]],[[90,[48]]]],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],78],[[],78],[[],78],[[[135,[[0,[79,66]]]],[15,[11]],27,27,26],42],0,[[]],[[]],[[[137,[81]]],26],[48],[48],[[[137,[81]]]],[48],[[]],[[],48],[[]],[[[137,[81]]],42],[81,[[42,[[137,[81]]]]]],[[[137,[81]],[15,[11]]],42],[[],77],[[],77],[[],78],0,0,0,[[]],[[]],[[]],[[]],[138,138],[[]],[[[139,[81]]],[[42,[138]]]],[[],138],[48],[48],[48],[48],[48],[48],[[138,55],56],0,[[]],[[]],0,[[],48],[[],48],[[]],[[]],0,[81,[[139,[81]]]],0,[[]],[[],77],[[],77],[[],77],[[],77],[[],78],[[],78],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[140,140],[141,141],[142,142],[143,143],[[]],[[]],[[]],[[]],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[[140,140],33],[[141,141],33],[[142,142],33],[[143,143],33],[[],33],[[88,55],56],[[88,55],[[77,[144]]]],[[145,55],56],[[145,55],[[77,[144]]]],[[140,55],56],[[146,55],56],[[146,55],[[77,[144]]]],[[147,55],[[77,[144]]]],[[147,55],56],[[141,55],56],[[148,55],[[77,[144]]]],[[148,55],56],[[149,55],[[77,[144]]]],[[149,55],56],[[142,55],56],[[143,55],56],[[143,55],[[77,[144]]]],[145,143],[146,143],[148,143],[150,88],[151,88],[[]],[[]],[143,145],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[32,143],[61,143],[[143,140],145],[143,146],[143,148],[141,147],[142,149],[[140,64]],[[141,64]],[[142,64]],[[143,64]],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[145,140],[147,141],[149,142],[[143,[80,[[68,[152]]]]],146],[[143,[80,[[68,[152]]]]],148],[88,[[14,[152]]]],[146,[[14,[152]]]],[147,[[14,[152]]]],[148,[[14,[152]]]],[[]],[[]],[[]],[[]],[[],153],[[],153],[[],153],[[],153],[[],153],[[],153],[[],153],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[19,[[20,[15]]]]],[[19,[15]]]],[[[19,[[20,[15]]]]],15],[[[19,[[17,[15]]]]],[[19,[15]]]],[[[19,[[17,[15]]]]],15],[[[19,[[17,[15]]]]],[[77,[[154,[15,16]],150]]]],[[[19,[[20,[15]]]]],[[77,[[155,[15,16]],150]]]],[[[19,[[20,[15]]]]],[[77,[[154,[15,16]],150]]]],[[[155,[[0,[[20,[15]],[17,[15]]]],16]],27,27]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[19],[76],[[[154,[[17,[15]],16]]]],[[[155,[[0,[[20,[15]],[17,[15]]]],16]]]],0,0,[[[19,[36]]],[[19,[36]]]],[76,76],[[[154,[[0,[[17,[15]],36]],[0,[36,16]]]]],[[154,[[0,[[17,[15]],36]],[0,[36,16]]]]]],[[[155,[[0,[[20,[15]],36]],[0,[36,16]]]]],[[155,[[0,[[20,[15]],36]],[0,[36,16]]]]]],[150,150],[156,156],[[]],[[]],[[]],[[]],[[]],[[]],0,[[11,27,27],76],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[[[154,[[17,[15]],16]]]],[[[155,[[0,[[20,[15]],[17,[15]]]],16]]]],[48],[48],[48],[48],[48],[48],[[76,76],33],[[150,150],33],[[156,156],33],[[],33],[[],33],[[],33],[19],[76],[[19,48],33],[[76,48],33],[[[154,[[17,[15]],16]]],[[19,[[17,[15]]]]]],[[[155,[[20,[15]],16]]],[[19,[[20,[15]]]]]],[[[19,[57]],55],56],[[76,55],56],[[[154,[[0,[[17,[15]],57]],[0,[57,16]]]],55],56],[[[155,[[0,[[20,[15]],57]],[0,[57,16]]]],55],56],[[150,55],56],[[150,55],56],[[156,55],56],[[]],[[]],[[]],[[]],[[]],[[]],[[[19,[[20,[15]]]],11,27,27],14],[[[154,[[20,[15]],[17,[15]],16]],11,27,27],14],[[[155,[[20,[15]],16]],11,27,27],14],[[[154,[[17,[15]],16]],27,27]],[[[155,[[0,[[20,[15]],[17,[15]]]],16]],27,27]],[[[155,[[0,[[20,[15]],[17,[15]]]],16]],27,27]],[[[19,[[17,[15]]]],11,27,27],14],[[[154,[[17,[15]],16]],11,27,27],14],[[[155,[[17,[15]],[20,[15]],16]],11,27,27],14],[19,33],[76,33],[[76,64]],[[150,64]],[[156,64]],0,0,[[[19,[[20,[15]]]]],[[14,[15]]]],[[[154,[[20,[15]],[17,[15]],16]]],15],[[[155,[[20,[15]],16]]],15],[[[19,[[17,[15]]]]],[[14,[15]]]],[[[154,[[17,[15]],16]]],15],[[[155,[[17,[15]],[20,[15]],16]]],15],[[19,11,27,27],33],[[76,11,27,27],33],[[[154,[[17,[15]],16]],27,27],33],[[[155,[[0,[[20,[15]],[17,[15]]]],16]],27,27],33],[[19,11,27,27],48],[[76,11,27,27],48],[[19,11,27,27],[[14,[48]]]],[[[19,[[157,[48]]]]]],[[76,11,27,27],[[14,[48]]]],[[19,48,48,48],[[14,[48]]]],[[76,48,48,48],[[14,[48]]]],[[[19,[[158,[48]]]]]],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[[154,[[17,[15]],16]]],[[154,[[17,[15]],16]]]],[[[155,[[0,[[20,[15]],[17,[15]]]],16]]],[[155,[[0,[[20,[15]],[17,[15]]]],16]]]],[[[155,[[0,[[20,[15]],[17,[15]]]],16]]],[[155,[[0,[[20,[15]],[17,[15]]]],16]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[154,[[17,[15]],16]]],[[19,[[17,[15]]]]]],[[[155,[[20,[15]],16]]],[[19,[[20,[15]]]]]],[[19,156],33],[[76,156],33],0,[19,[[14,[48]]]],[76,[[14,[48]]]],[[[154,[[17,[15]],16]]],48],[[[155,[[20,[15]],16]]],48],[[156,156],[[14,[69]]]],[[[155,[[0,[[20,[15]],[17,[15]]]],16]],27,27]],[[11,27,27],76],[[[154,[[17,[15]],16]]],[[17,[15]]]],[[[155,[[20,[15]],16]]],[[20,[15]]]],0,[[19,11,27,27]],[[76,11,27,27]],[[[154,[[17,[15]],16]],27,27]],[[[155,[[20,[15]],16]],27,27]],[19],[76],[[]],[[]],[[]],[[]],[[]],[[]],[[],153],[[[19,[[17,[[15,[36]]]]]]],[[19,[[12,[36]]]]]],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[[19,[18]]],[[77,[[13,[16,18]]]]]],[[[154,[[20,[15]],[17,[15]],16]]],[[77,[[155,[[20,[15]],[17,[15]],16]]]]]],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],0,0,[[16,27,27],[[19,[[15,[4]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[44,2],[[13,[12]]]],[[]],[[]],0,[73,73],[[]],0,0,[[44,27,27,27,27],[[29,[44]]]],[[44,27,27,27,27],[[29,[44]]]],[48],[48],0,[48],[[73,73],33],[[44,[15,[2]]],[[13,[16,[12,[4]]]]]],[44,[[13,[12]]]],[[44,[13,[28]]],42],[159],[44,[[13,[12]]]],[[44,[13,[28]]],42],[159],[[73,55],56],[[]],0,[[159,16,16]],0,0,[[],48],[[]],0,[[159,44,27,27]],[[27,27]],[[159,44,27,27]],[[44,27,27,73],[[13,[12]]]],[44,[[13,[12]]]],[[44,[13,[28]]],42],[159],[44,[[13,[12]]]],[[44,[13,[28]]],42],[44,[[13,[12]]]],[[44,[13,[28]]],42],[[44,27,27],[[13,[16,[12,[[0,[4,0]]]]]]]],[[159,44]],[[]],[[],77],[[],77],[[],78],[[44,2,30],[[13,[16,[12,[4]]]]]],[[159,16,16]],0,0,0,[[]],[[]],[[44,30],[[13,[16,[12,[4]]]]]],[[159,30]],[160,160],[[]],[[44,2],[[13,[16,[12,[4]]]]]],[[159,2]],[48],[48],[[[13,[16,[12,[11]]]],[0,[161,39]]]],[48],[[]],[44,[[13,[7,12]]]],[[],33],[160,33],[[44,30],[[13,[16,[12,[4]]]]]],[[159,30]],[[[13,[16,[12,[11]]]],[0,[161,39]]],[[13,[[7,[11]],[12,[11]]]]]],[[],48],[[160,[7,[11]]],48],[[],48],[[]],[159],[48,14],[[160,48],14],[[]],[[160,[7,[11]]]],[[]],[[],77],[[],77],[[],78],0,[[]],[[]],[[[162,[81]]]],[[[162,[[0,[65,66]]]]],[[42,[1]]]],[48],[48],[48],[[[162,[81]]],[[14,[32]]]],[[]],[[],48],[[]],[[[162,[[0,[65,66]]]]],42],[[[162,[81]]],81],[81,[[162,[81]]]],[[[17,[61]]],[[90,[[162,[[164,[163]]]]]]]],[[[162,[81]],32]],[[],77],[[],77],[[],78],[[81,32],[[162,[81]]]],[[[162,[[0,[65,66]]]]],[[90,[[162,[[0,[65,66]]]]]]]],0,0,0,0,0,0,[[]],[[]],[45,45],[[]],[48],[48],[48],[[45,45],33],[[],33],[[45,55],56],[[]],[[45,64]],0,[[],48],[[]],0,[[]],[[],77],[[],77],[[],78],0,0,0,0,0,[[]],[[]],[48],[48],[48],[165,166],[[]],[166,33],[[166,[15,[11]]],48],[[166,[8,[11]]],48],[[166,[15,[11]]]],[[],48],[[]],[[166,48],[[14,[[58,[11]]]]]],[[166,48],14],[[166,[8,[11]]]],[[166,[15,[11]]]],[[30,48,[15,[11]]],166],[[],77],[[],77],[[],78],[[167,167,167],167],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[172,221,222,281,282,284,285,295,360,397,484,500,505,568,570,578,581,586,589,602,656,657,691,694,702,711,722,732,758,768,839,845,846,847,1007,1062,1063,1177,1247,1248,1249,1250,1257,1387,1422,1509,1510,1627,1628,1961,1962,1963,1964,1965,1966,1967,1968,2176,2177,2178,2379,2380,2381,2382,2383,2384,2385,2386,2387,2388,2389,2390,2391,2392,2393,2394,2395,2396,2397,2398,2399,2400,2401,2402,2523,2524,2525,2526,2527,2553,2575,2576,2577,2578,2579,2580,2581,2582,2583,2584,2585,2586,2587,2588,2589,2590,2591,2592,2593,2594,2595,2596,2597,2598,2599,2600,2601,2602,2603],"p":[[4,"DynamicImage"],[15,"f32"],[8,"FnMut"],[8,"Primitive"],[3,"Rgb"],[3,"Bgr"],[3,"Luma"],[3,"Rgba"],[3,"Bgra"],[3,"LumaA"],[15,"u8"],[3,"Vec"],[3,"ImageBuffer"],[4,"Option"],[15,"slice"],[8,"Pixel"],[8,"AsRef"],[8,"Deref"],[3,"FlatSamples"],[8,"AsMut"],[15,"u16"],[6,"GrayImage"],[6,"GrayAlphaImage"],[6,"RgbImage"],[6,"RgbaImage"],[4,"ColorType"],[15,"u32"],[8,"DerefMut"],[3,"SubImage"],[15,"i32"],[3,"Frame"],[4,"ImageFormat"],[15,"bool"],[4,"ExtendedColorType"],[3,"Delay"],[8,"Clone"],[4,"ImageOutputFormat"],[3,"Progress"],[8,"Sized"],[3,"Pixels"],[3,"Frames"],[6,"ImageResult"],[15,"str"],[8,"GenericImageView"],[3,"Rect"],[15,"u64"],[8,"Default"],[15,"usize"],[3,"EnumeratePixels"],[3,"EnumeratePixelsMut"],[3,"EnumerateRows"],[3,"EnumerateRowsMut"],[8,"PartialEq"],[3,"Global"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[15,"array"],[8,"ImageDecoder"],[3,"OsStr"],[3,"Path"],[3,"Duration"],[8,"Hash"],[8,"Hasher"],[8,"BufRead"],[8,"Seek"],[8,"Iterator"],[3,"Box"],[4,"Ordering"],[3,"Pixels"],[3,"PixelsMut"],[8,"Fn"],[4,"FilterType"],[3,"Rows"],[3,"RowsMut"],[3,"SampleLayout"],[4,"Result"],[3,"TypeId"],[8,"Write"],[8,"Into"],[8,"Read"],[3,"BmpDecoder"],[3,"BmpEncoder"],[3,"DdsDecoder"],[4,"DXTVariant"],[3,"DxtDecoder"],[3,"DxtEncoder"],[4,"ImageError"],[3,"DxtReader"],[6,"Result"],[3,"FarbfeldDecoder"],[3,"FarbfeldEncoder"],[3,"FarbfeldReader"],[4,"SeekFrom"],[4,"Repeat"],[3,"GifDecoder"],[3,"GifEncoder"],[8,"IntoIterator"],[3,"GifReader"],[3,"Rgbe8Pixel"],[3,"HdrMetadata"],[3,"HdrAdapter"],[3,"HdrEncoder"],[3,"HdrDecoder"],[3,"HdrImageDecoderIterator"],[3,"HdrReader"],[8,"Send"],[8,"Sync"],[8,"Zero"],[3,"IcoDecoder"],[3,"IcoEncoder"],[4,"PixelDensityUnit"],[3,"PixelDensity"],[3,"JpegDecoder"],[3,"JpegEncoder"],[3,"PngDecoder"],[3,"ApngDecoder"],[4,"CompressionType"],[4,"FilterType"],[3,"PngEncoder"],[3,"PngReader"],[3,"PnmHeader"],[3,"ArbitraryHeader"],[3,"BitmapHeader"],[3,"GraymapHeader"],[3,"PixmapHeader"],[4,"SampleEncoding"],[4,"PNMSubtype"],[4,"ArbitraryTuplType"],[3,"PnmDecoder"],[3,"PnmEncoder"],[3,"TgaDecoder"],[3,"TgaEncoder"],[3,"TiffDecoder"],[3,"TiffEncoder"],[3,"TiffReader"],[3,"WebPDecoder"],[3,"Frame"],[3,"Vp8Decoder"],[4,"UnsupportedErrorKind"],[4,"ParameterErrorKind"],[4,"LimitErrorKind"],[4,"ImageFormatHint"],[3,"Error"],[3,"UnsupportedError"],[3,"EncodingError"],[3,"ParameterError"],[3,"DecodingError"],[3,"LimitError"],[4,"Error"],[3,"Error"],[8,"Error"],[3,"String"],[3,"View"],[3,"ViewMut"],[4,"NormalForm"],[8,"Index"],[8,"IndexMut"],[8,"GenericImage"],[3,"BiLevel"],[8,"ColorMap"],[3,"Reader"],[3,"File"],[3,"BufReader"],[3,"NeuQuant"],[3,"NeuQuant"],[8,"PartialOrd"],[8,"EncodableLayout"],[8,"AnimationDecoder"],[8,"ImageDecoderExt"],[8,"ImageEncoder"],[8,"ConvertBuffer"]]},\
"jpeg_decoder":{"doc":"This crate contains a JPEG decoder.","t":"NNNNDENNDNNNNNENNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLM","n":["ArithmeticEntropyCoding","CMYK32","ComponentCount","DNL","Decoder","Error","Format","Hierarchical","ImageInfo","Internal","Io","L8","Lossless","NonIntegerSubsamplingRatio","PixelFormat","RGB24","SamplePrecision","SubsamplingRatio","Unsupported","UnsupportedFeature","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","decode","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","height","icc_profile","info","init","init","init","init","init","into","into","into","into","into","new","pixel_bytes","pixel_format","read_info","scale","source","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","width"],"q":[[0,"jpeg_decoder"]],"d":["JPEG using arithmetic entropy coding instead of Huffman …","CMYK, 8 bits per channel","Number of components in an image. 1, 3 and 4 components …","An image can specify a zero height in the frame header and …","JPEG decoder","Errors that can occur while decoding a JPEG image.","The image is not formatted properly. The string contains …","Hierarchical JPEG.","Represents metadata of an image.","An internal error occurred while decoding the image.","An I/O error occurred while decoding the image.","Luminance (grayscale), 8 bits","Lossless JPEG.","A subsampling ratio not representable as an integer.","An enumeration over combinations of color spaces and bit …","RGB, 8 bits per channel","Sample precision in bits. 8 bit sample precision is what …","Subsampling ratio.","The image makes use of a JPEG feature not (currently) …","An enumeration over JPEG features (currently) unsupported …","","","","","","","","","","","","","","","Decodes the image and returns the decoded pixels if …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","The height of the image, in pixels.","Returns the embeded icc profile if the image contains one.","Returns metadata about the image.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new <code>Decoder</code> using the reader <code>reader</code>.","Determine the size in bytes of each pixel in this format","The pixel format of the image.","Tries to read metadata from the image without decoding it.","Configure the decoder to scale the image during decoding.","","","","","","","","","","","","","","","","","","","","The width of the image, in pixels."],"i":[13,1,13,13,0,0,7,13,0,7,7,1,13,13,0,1,13,13,7,0,4,1,2,13,7,4,1,2,13,7,1,2,1,2,4,4,1,2,13,7,4,1,2,13,7,4,1,2,13,7,1,2,1,2,13,7,7,4,1,2,13,7,7,2,4,4,4,1,2,13,7,4,1,2,13,7,4,1,2,4,4,7,1,2,7,4,1,2,13,7,4,1,2,13,7,4,1,2,13,7,2],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[[[4,[3]]],[[8,[[6,[5]],7]]]],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[[1,1],10],[[2,2],10],[[1,11],12],[[2,11],12],[[13,11],12],[[7,11],12],[[7,11],12],[[]],[[]],[[]],[[]],[14,7],[[]],0,[[[4,[3]]],[[15,[[6,[5]]]]]],[[[4,[3]]],[[15,[2]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[3,[[4,[3]]]],[1,9],0,[[[4,[3]]],[[8,[7]]]],[[[4,[3]],16,16],[[8,[7]]]],[7,[[15,[17]]]],[[]],[[]],[[],18],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],19],[[],19],[[],19],[[],19],[[],19],0],"c":[],"p":[[4,"PixelFormat"],[3,"ImageInfo"],[8,"Read"],[3,"Decoder"],[15,"u8"],[3,"Vec"],[4,"Error"],[4,"Result"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"UnsupportedFeature"],[3,"Error"],[4,"Option"],[15,"u16"],[8,"Error"],[3,"String"],[3,"TypeId"]]},\
"memoffset":{"doc":"A crate used for calculating offsets of struct members and …","t":"OOOOOOO","n":["offset_of","offset_of_tuple","offset_of_union","raw_field","raw_field_tuple","raw_field_union","span_of"],"q":[[0,"memoffset"]],"d":["Calculates the offset of the specified field from the …","Calculates the offset of the specified field from the …","Calculates the offset of the specified union member from …","Computes a const raw pointer to the given field of the …","Computes a const raw pointer to the given field of the …","Computes a const raw pointer to the given field of the …","Produces a range instance representing the sub-slice …"],"i":[0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0],"c":[],"p":[]},\
"miniz_oxide":{"doc":"A pure rust replacement for the miniz DEFLATE/zlib …","t":"NNNENNNEEGECCNNNNNNNNNDNNNLLLLLLLLLLMMLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLALLLLLCLMLLLLLLLLLLLLLLLLLLLLNNENNNNLLLLFFALLLLLALLLLNDEDNNNNNNNNNNNNEELLLLLLLLLLLLLLLLLFFFLLALLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLRRRRRRRRFNNNNNNNELLLLAFFFFLLLLLLALLLLDRLLLFLLALLLLLLRRRRDDDIDLLLLLLLLLLLLLLFLLLLLLLLKLLLLLLLLLLLLLLLLL","n":["Block","Buf","Data","DataFormat","ErrNo","Finish","Full","MZError","MZFlush","MZResult","MZStatus","MZ_ADLER32_INIT","MZ_DEFAULT_WINDOW_BITS","Mem","NeedDict","None","Ok","Param","Partial","Raw","Stream","StreamEnd","StreamResult","Sync","Version","Zlib","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes_consumed","bytes_written","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","deflate","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","inflate","into","into","into","into","into","mz_adler32_oxide","new","status","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","BestCompression","BestSpeed","CompressionLevel","DefaultCompression","DefaultLevel","NoCompression","UberCompression","borrow","borrow_mut","clone","clone_into","compress_to_vec","compress_to_vec_zlib","core","eq","fmt","from","hash","into","stream","to_owned","try_from","try_into","type_id","BadParam","CallbackFunc","CompressionStrategy","CompressorOxide","Default","Done","Filtered","Finish","Fixed","Full","HuffmanOnly","None","Okay","PutBufFailed","RLE","Sync","TDEFLFlush","TDEFLStatus","adler32","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","compress","compress_to_output","create_comp_flags_from_zip_params","data_format","default","deflate_flags","eq","eq","eq","flags","fmt","fmt","fmt","from","from","from","from","from","from","hash","hash","hash","into","into","into","into","into","new","new","prev_return_status","put_buf_func","reset","set_compression_level","set_compression_level_raw","set_format_and_level","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","TDEFL_COMPUTE_ADLER32","TDEFL_FILTER_MATCHES","TDEFL_FORCE_ALL_RAW_BLOCKS","TDEFL_FORCE_ALL_STATIC_BLOCKS","TDEFL_GREEDY_PARSING_FLAG","TDEFL_NONDETERMINISTIC_PARSING_FLAG","TDEFL_RLE_MATCHES","TDEFL_WRITE_ZLIB_HEADER","deflate","Adler32Mismatch","BadParam","Done","Failed","FailedCannotMakeProgress","HasMoreOutput","NeedsMoreInput","TINFLStatus","borrow","borrow_mut","clone","clone_into","core","decompress_to_vec","decompress_to_vec_with_limit","decompress_to_vec_zlib","decompress_to_vec_zlib_with_limit","eq","fmt","from","from_i32","hash","into","stream","to_owned","try_from","try_into","type_id","DecompressorOxide","TINFL_LZ_DICT_SIZE","adler32","borrow","borrow_mut","decompress","default","from","inflate_flags","init","into","new","try_from","try_into","type_id","TINFL_FLAG_COMPUTE_ADLER32","TINFL_FLAG_HAS_MORE_INPUT","TINFL_FLAG_PARSE_ZLIB_HEADER","TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF","FullReset","InflateState","MinReset","ResetPolicy","ZeroReset","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","decompressor","default","from","from","from","from","inflate","into","into","into","into","last_status","new","new_boxed","new_boxed_with_window_bits","reset","reset","reset","reset","reset","reset_as","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"miniz_oxide"],[100,"miniz_oxide::deflate"],[124,"miniz_oxide::deflate::core"],[212,"miniz_oxide::deflate::core::deflate_flags"],[220,"miniz_oxide::deflate::stream"],[221,"miniz_oxide::inflate"],[249,"miniz_oxide::inflate::core"],[264,"miniz_oxide::inflate::core::inflate_flags"],[268,"miniz_oxide::inflate::stream"]],"d":["Not implemented.","","","How compressed data is wrapped.","","Attempt to flush the remaining data and end the stream.","Same as <code>Sync</code>, but resets the compression dictionary so …","A list of miniz failed status codes.","A list of flush types.","<code>Result</code> alias for all miniz status codes both successful …","A list of miniz successful status codes.","","","","","Don’t force any flushing. Used when more input data is …","","","Zlib partial flush. Currently treated as <code>Sync</code>.","Raw DEFLATE.","","","A structure containg the result of a call to the inflate …","Finish compressing the currently buffered data, and output …","","Wrapped using the zlib format.","","","","","","","","","","","The number of bytes consumed from the input slice.","The number of bytes written to the output slice.","","","","","","","","","","","This module contains functionality for compression.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","This module contains functionality for decompression.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create an MZFlush value from an integer value.","The return status of the call.","","","","","","","","","","","","","","","","","","","","","Slow/high compression. Do a lot of checks to try to find …","Fast compression. Uses a special compression routine that …","How much processing the compressor should do to compress …","Use the default compression level.","Default compromise between speed and compression.","Don’t do any compression, only output uncompressed …","Even more checks, can be very slow.","","","","","Compress the input data to a vector, using the specified …","Compress the input data to a vector, using the specified …","Streaming compression functionality.","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Extra streaming compression functionality.","","","","","","Callback function and user used in <code>compress_to_output</code>.","Strategy setting for compression.","Main compression struct.","Don’t use any of the special strategies.","","Only use matches that are at least 5 bytes long.","Try to flush everything and end the stream.","Only use static/fixed blocks. (Blocks using the default …","Same as sync, but reset the dictionary so that the …","Don’t look for matches, only huffman encode the literals.","Compress as much as there is space for, and then return …","","","Only look for matches with a distance of 1, i.e do …","Try to flush the current data and output an empty raw …","A list of deflate flush types.","Return status codes.","Get the adler32 checksum of the currently encoded data.","","","","","","","","","","","","","","","","","Main compression function. Tries to compress as much as …","Main compression function. Callbacks output.","Create a set of compression flags using parameters used by …","Returns whether the compressor is wrapping the data in a …","Initialize the compressor with a level of 4, zlib wrapper …","","","","","Get the raw compressor flags.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>CompressorOxide</code> with the given flags.","","Get the return status of the previous <code>compress</code> call with …","","Reset the state of the compressor, keeping the same …","Set the compression level of the compressor.","Set the compression level of the compressor using an …","Update the compression settings of the compressor.","","","","","","","","","","","","","","","","","","","Should we compute the adler32 checksum.","Only use matches that are at least 6 bytes long.","Force the compressor to only output raw/uncompressed …","Force the compressor to only output static blocks. (Blocks …","Should we use greedy parsing (as opposed to lazy parsing …","Used in miniz to skip zero-initializing hash and dict. We …","Only look for matches with a distance of 0.","Whether to use a zlib wrapper.","Try to compress from input to output with the given …","The decompression went fine, but the adler32 checksum did …","One or more of the input parameters were invalid.","Finished decomression without issues.","Failed to decompress due to invalid data.","More input data was expected, but the caller indicated …","There is still pending data that didn’t fit in the …","The decompressor needs more input data to continue …","Return status codes.","","","","","Streaming decompression functionality.","Decompress the deflate-encoded data in <code>input</code> to a vector.","Decompress the deflate-encoded data in <code>input</code> to a vector. …","Decompress the deflate-encoded data (with a zlib wrapper) …","Decompress the deflate-encoded data (with a zlib wrapper) …","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Extra streaming decompression functionality.","","","","","Main decompression struct.","","Returns the adler32 checksum of the currently decompressed …","","","Main decompression function. Keeps decompressing data from …","Create a new tinfl_decompressor with all fields set to 0.","Returns the argument unchanged.","","Set the current state to <code>Start</code>.","Calls <code>U::from(self)</code>.","Create a new tinfl_decompressor with all fields set to 0.","","","","Should we calculate the adler32 checksum of the output …","There is more input that hasn’t been given to the …","Should we try to parse a zlib header?","The output buffer should not wrap around.","Full reset of the state, including zeroing memory.","A struct that compbines a decompressor with extra data for …","Resets state, without performing expensive ops (e.g. …","Tag that determines reset policy of InflateState","Resets state and zero memory, continuing to use the same …","","","","","","","","","Access the innner decompressor.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Try to decompress from <code>input</code> to <code>output</code> with the given …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the status of the last call to <code>inflate</code> with this …","Create a new state.","Create a new state on the heap.","Create a new state using miniz/zlib style window bits …","Performs reset","","","","Reset the decompressor without re-allocating memory, using …","Resets the state according to specified policy.","","","","","","","","","","","",""],"i":[1,3,3,0,3,1,1,0,0,0,0,0,0,3,2,1,2,3,1,4,3,2,0,1,3,4,1,2,3,4,5,1,2,3,4,5,5,5,1,2,3,4,5,1,2,3,4,5,0,1,2,3,4,5,1,2,3,4,5,9,9,1,2,3,4,5,1,2,3,4,5,0,1,2,3,4,5,0,1,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,14,14,0,14,14,14,14,14,14,14,14,0,0,0,14,14,14,14,14,0,14,14,14,14,22,0,0,0,20,22,20,21,20,21,20,21,22,22,20,21,0,0,18,18,34,20,21,22,18,34,20,21,22,20,21,22,20,21,22,0,0,0,18,18,0,20,21,22,18,20,21,22,18,34,20,21,21,22,20,21,22,18,34,20,21,22,18,21,18,34,18,18,18,18,20,21,22,18,34,20,21,22,18,34,20,21,22,18,34,20,21,22,0,0,0,0,0,0,0,0,0,24,24,24,24,24,24,24,0,24,24,24,24,0,0,0,0,0,24,24,24,24,24,24,0,24,24,24,24,0,0,27,27,27,0,27,27,0,27,27,27,27,27,27,0,0,0,0,0,0,0,0,0,30,31,32,28,30,31,32,28,28,28,30,31,32,28,0,30,31,32,28,28,28,28,28,33,30,31,32,28,28,30,31,32,28,30,31,32,28,30,31,32,28],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[1,1],[2,2],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[]],[[]],0,[[1,1],6],[[2,2],6],[[3,3],6],[[4,4],6],[[5,5],6],[[1,7],8],[[2,7],8],[[3,7],8],[[4,7],8],[[5,7],8],[5,9],[5,9],[[]],[[]],[[]],[[]],[[]],[[1,10]],[[2,10]],[[3,10]],[[4,10]],[[5,10]],0,[[]],[[]],[[]],[[]],[[]],0,[11,[[12,[1,3]]]],0,[[]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],0,0,0,0,0,0,0,[[]],[[]],[14,14],[[]],[[[16,[15]],15],[[17,[15]]]],[[[16,[15]],15],[[17,[15]]]],0,[[14,14],6],[[14,7],8],[[]],[[14,10]],[[]],0,[[]],[[],12],[[],12],[[],13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[18,19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[20,20],[21,21],[22,22],[[]],[[]],[[]],[[18,[16,[15]],[16,[15]],21]],[[18,[16,[15]],21,23]],[[11,11,11],19],[18,4],[[],18],0,[[20,20],6],[[21,21],6],[[22,22],6],[18,11],[[20,7],8],[[21,7],8],[[22,7],8],[[]],[[]],[[]],[[]],[1,21],[[]],[[20,10]],[[21,10]],[[22,10]],[[]],[[]],[[]],[[]],[[]],[19,18],[11,[[12,[21,3]]]],[18,22],0,[18],[[18,14]],[[18,15]],[[18,4,15]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],0,0,0,0,0,0,0,0,[[18,[16,[15]],[16,[15]],1],5],0,0,0,0,0,0,0,0,[[]],[[]],[24,24],[[]],0,[[[16,[15]]],[[12,[[17,[15]],24]]]],[[[16,[15]],25],[[12,[[17,[15]],24]]]],[[[16,[15]]],[[12,[[17,[15]],24]]]],[[[16,[15]],25],[[12,[[17,[15]],24]]]],[[24,24],6],[[24,7],8],[[]],[11,[[26,[24]]]],[[24,10]],[[]],0,[[]],[[],12],[[],12],[[],13],0,0,[27,[[26,[19]]]],[[]],[[]],[[27,[16,[15]],[16,[15]],25,19]],[[],27],[[]],0,[27],[[]],[[],27],[[],12],[[],12],[[],13],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[28,27],[[],28],[[]],[[]],[[]],[[]],[[28,[16,[15]],[16,[15]],1],5],[[]],[[]],[[]],[[]],[28,24],[4,28],[4,[[29,[28]]]],[11,[[29,[28]]]],[28],[[30,28]],[[31,28]],[[32,28]],[[28,4]],[[28,33]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13]],"c":[],"p":[[4,"MZFlush"],[4,"MZStatus"],[4,"MZError"],[4,"DataFormat"],[3,"StreamResult"],[15,"bool"],[3,"Formatter"],[6,"Result"],[6,"MZResult"],[8,"Hasher"],[15,"i32"],[4,"Result"],[3,"TypeId"],[4,"CompressionLevel"],[15,"u8"],[15,"slice"],[3,"Vec"],[3,"CompressorOxide"],[15,"u32"],[4,"CompressionStrategy"],[4,"TDEFLFlush"],[4,"TDEFLStatus"],[8,"FnMut"],[4,"TINFLStatus"],[15,"usize"],[4,"Option"],[3,"DecompressorOxide"],[3,"InflateState"],[3,"Box"],[3,"MinReset"],[3,"ZeroReset"],[3,"FullReset"],[8,"ResetPolicy"],[3,"CallbackFunc"]]},\
"num_integer":{"doc":"Integer trait and functions.","t":"IDIDIFKFKFLLLLFLLLLFLFKFLFKKLLLLLLLFKMFLLLLKKKFKFKFLLLFKLFLLLLLLLLLMM","n":["Average","ExtendedGcd","Integer","IterBinomial","Roots","average_ceil","average_ceil","average_floor","average_floor","binomial","borrow","borrow","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","clone","clone_into","div_ceil","div_ceil","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","eq","equivalent","extended_gcd","extended_gcd_lcm","fmt","from","from","gcd","gcd","gcd","gcd_lcm","gcd_lcm","into","into","into_iter","is_even","is_multiple_of","is_odd","lcm","lcm","mod_floor","mod_floor","multinomial","new","next","next_multiple_of","nth_root","nth_root","prev_multiple_of","sqrt","sqrt","sqrt","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x","y"],"q":[[0,"num_integer"]],"d":["Provides methods to compute the average of two integers, …","Greatest common divisor and Bézout coefficients","","An iterator over binomial coefficients.","Provides methods to compute an integer’s square root, …","Returns the ceiling value of the average of <code>x</code> and <code>y</code> – …","Returns the ceiling value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>x</code> and <code>y</code> – see …","Returns the floor value of the average of <code>self</code> and <code>other</code>. …","Calculate the binomial coefficient.","","","","","Returns the truncated principal cube root of an integer –","Returns the truncated principal cube root of an integer –","Returns the truncated principal cube root of an integer –","","","Ceiled integer division","Ceiled integer division.","Floored integer division","Floored integer division.","Simultaneous floored integer division and modulus","Simultaneous floored integer division and modulus. Returns …","Simultaneous integer division and modulus","Simultaneous truncated integer division and modulus. …","Deprecated, use <code>is_multiple_of</code> instead.","","","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","","Returns the argument unchanged.","Returns the argument unchanged.","Calculates the Greatest Common Divisor (GCD) of the number …","Greatest Common Divisor (GCD).","","Calculates the Greatest Common Divisor (GCD) and Lowest …","Greatest Common Divisor (GCD) and Lowest Common Multiple …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the number is even.","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is odd.","Calculates the Lowest Common Multiple (LCM) of the number …","Lowest Common Multiple (LCM).","Floored integer modulus","Floored integer modulo, satisfying:","Calculate the multinomial coefficient.","For a given n, iterate over all binomial coefficients …","","Rounds up to nearest multiple of argument.","Returns the truncated principal <code>n</code>th root of an integer – …","Returns the truncated principal <code>n</code>th root of an integer – …","Rounds down to nearest multiple of argument.","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","","","","","","","","",""],"i":[0,0,0,0,0,0,1,0,1,0,14,5,14,5,0,4,4,5,5,0,2,0,2,0,2,0,2,2,5,5,2,2,5,14,5,0,2,5,0,2,14,5,14,2,2,2,0,2,0,2,0,14,14,2,0,4,2,0,4,4,5,14,5,14,5,14,5,5,5],"f":[0,0,0,0,0,[[1,1],1],[[]],[[1,1],1],[[]],[[[0,[2,3]],[0,[2,3]]],[[0,[2,3]]]],[[]],[[]],[[]],[[]],[4,4],[[]],[[]],[[[5,[3]]],[[5,[3]]]],[[]],[[2,2],2],[[]],[[2,2],2],[[]],[[2,2]],[[]],[[2,2]],[[]],[[],6],[[[5,[7]],[5,[7]]],6],[[],6],[[3,3],[[5,[3]]]],[[[0,[3,8]],[0,[3,8]]]],[[[5,[9]],10],11],[[]],[[]],[[2,2],2],[[]],0,[[2,2]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[2,2],2],[[]],[[2,2],2],[[]],[[[13,[[0,[[12,[[0,[[12,[[0,[[12,[[0,[12,2,3]]]],2,3]]]],2,3]]]],2,3]]]]],[[0,[[12,[[0,[[12,[[0,[[12,[[0,[[12,[[0,[12,2,3]]]],2,3]]]],2,3]]]],2,3]]]],2,3]]]],[2,[[14,[2]]]],[[[14,[[0,[2,3]]]]],[[15,[[0,[2,3]]]]]],[[3,3],3],[[4,16],4],[16],[[3,3],3],[4,4],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],0,0],"c":[],"p":[[8,"Average"],[8,"Integer"],[8,"Clone"],[8,"Roots"],[3,"ExtendedGcd"],[15,"bool"],[8,"PartialEq"],[8,"Signed"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Add"],[15,"slice"],[3,"IterBinomial"],[4,"Option"],[15,"u32"],[4,"Result"],[3,"TypeId"]]},\
"num_iter":{"doc":"External iterators for generic mathematics","t":"DDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Range","RangeFrom","RangeInclusive","RangeStep","RangeStepFrom","RangeStepInclusive","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","end_bound","end_bound","end_bound","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","next","next","next","next","next","next","next_back","next_back","range","range_from","range_inclusive","range_step","range_step_from","range_step_inclusive","size_hint","size_hint","size_hint","size_hint","start_bound","start_bound","start_bound","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"num_iter"]],"d":["An iterator over the range [start, stop)","An iterator over the infinite range starting at <code>start</code>","An iterator over the range [start, stop]","An iterator over the range [start, stop) by <code>step</code>. It …","An iterator over the infinite range starting at <code>start</code> by …","An iterator over the range [start, stop] by <code>step</code>. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns an iterator over the given range [start, stop) …","Return an iterator over the infinite range starting at …","Return an iterator over the range [start, stop]","Return an iterator over the range [start, stop) by <code>step</code>. …","Return an iterator over the infinite range starting at …","Return an iterator over the range [start, stop] by <code>step</code>. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,6,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,0,0,0,0,0,0,2,3,6,7,2,3,6,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7],"f":[0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[[3,[1]]],[[3,[1]]]],[[[4,[1]]],[[4,[1]]]],[[[5,[1]]],[[5,[1]]]],[[[6,[1]]],[[6,[1]]]],[[[7,[1]]],[[7,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[2,8],[3,8],[6,8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[[0,[[9,[[0,[[9,[[0,[[9,[[0,[9,10,1,11]]]],10,1,11]]]],10,1,11]]]],10,1,11]]]]],[[12,[[0,[[9,[[0,[[9,[[0,[[9,[[0,[9,10,1,11]]]],10,1,11]]]],10,1,11]]]],10,1,11]]]]]],[[[3,[[0,[[9,[[0,[[9,[[0,[[9,[[0,[9,10,1,11]]]],10,1,11]]]],10,1,11]]]],10,1,11]]]]],[[12,[[0,[[9,[[0,[[9,[[0,[[9,[[0,[9,10,1,11]]]],10,1,11]]]],10,1,11]]]],10,1,11]]]]]],[[[4,[[0,[13,10,1]]]]],[[12,[[0,[13,10,1]]]]]],[[[5,[[0,[13,10,1,14]]]]],[[12,[[0,[13,10,1,14]]]]]],[[[6,[[0,[[9,[[0,[[9,[[0,[[9,[[0,[9,1]]]],1]]]],1]]]],1]]]]],[[12,[[0,[[9,[[0,[[9,[[0,[[9,[[0,[9,1]]]],1]]]],1]]]],1]]]]]],[[[7,[[0,[[9,[[0,[[9,[[0,[[9,[[0,[9,1]]]],1]]]],1]]]],1]]]]],[[12,[[0,[[9,[[0,[[9,[[0,[[9,[[0,[9,1]]]],1]]]],1]]]],1]]]]]],[[[2,[[0,[15,1,11]]]]],[[12,[[0,[15,1,11]]]]]],[[[3,[[0,[[16,[[0,[[16,[[0,[[16,[[0,[16,15,1,11]]]],15,1,11]]]],15,1,11]]]],15,1,11]]]]],[[12,[[0,[[16,[[0,[[16,[[0,[[16,[[0,[16,15,1,11]]]],15,1,11]]]],15,1,11]]]],15,1,11]]]]]],[[[0,[[9,[[0,[[9,[[0,[[9,[[0,[[9,[[0,[9,10,1,17]]]],10,1,17]]]],10,1,17]]]],10,1,17]]]],10,1,17]],[0,[[9,[[0,[[9,[[0,[[9,[[0,[[9,[[0,[9,10,1,17]]]],10,1,17]]]],10,1,17]]]],10,1,17]]]],10,1,17]]],[[2,[[0,[[9,[[0,[[9,[[0,[[9,[[0,[9,10,1,17]]]],10,1,17]]]],10,1,17]]]],10,1,17]]]]]],[[[0,[[9,[[0,[[9,[[0,[[9,[[0,[[9,[[0,[9,1,17]]]],1,17]]]],1,17]]]],1,17]]]],1,17]]],[[6,[[0,[[9,[[0,[[9,[[0,[[9,[[0,[9,1,17]]]],1,17]]]],1,17]]]],1,17]]]]]],[[[0,[[9,[[0,[[9,[[0,[[9,[[0,[[9,[[0,[9,10,1,17]]]],10,1,17]]]],10,1,17]]]],10,1,17]]]],10,1,17]],[0,[[9,[[0,[[9,[[0,[[9,[[0,[[9,[[0,[9,10,1,17]]]],10,1,17]]]],10,1,17]]]],10,1,17]]]],10,1,17]]],[[3,[[0,[[9,[[0,[[9,[[0,[[9,[[0,[9,10,1,17]]]],10,1,17]]]],10,1,17]]]],10,1,17]]]]]],[[[0,[13,10,1,18]],[0,[13,10,1,18]],[0,[13,10,1,18]]],[[4,[[0,[13,10,1,18]]]]]],[[[0,[[9,[[0,[[9,[[0,[[9,[[0,[[9,[[0,[9,1]]]],1]]]],1]]]],1]]]],1]],[0,[[9,[[0,[[9,[[0,[[9,[[0,[[9,[[0,[9,1]]]],1]]]],1]]]],1]]]],1]]],[[7,[[0,[[9,[[0,[[9,[[0,[[9,[[0,[9,1]]]],1]]]],1]]]],1]]]]]],[[[0,[13,10,1,18]],[0,[13,10,1,18]],[0,[13,10,1,18]]],[[5,[[0,[13,10,1,18]]]]]],[[[2,[[0,[[9,[[0,[[9,[[0,[[9,[[0,[9,10,1,11]]]],10,1,11]]]],10,1,11]]]],10,1,11]]]]]],[[[3,[[0,[[9,[[0,[[9,[[0,[[9,[[0,[9,10,1,11]]]],10,1,11]]]],10,1,11]]]],10,1,11]]]]]],[[[6,[[0,[[9,[[0,[[9,[[0,[[9,[[0,[9,1]]]],1]]]],1]]]],1]]]]]],[[[7,[[0,[[9,[[0,[[9,[[0,[[9,[[0,[9,1]]]],1]]]],1]]]],1]]]]]],[2,8],[3,8],[6,8],[[]],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20]],"c":[],"p":[[8,"Clone"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"RangeFrom"],[3,"RangeStepFrom"],[4,"Bound"],[8,"Add"],[8,"PartialOrd"],[8,"ToPrimitive"],[4,"Option"],[8,"CheckedAdd"],[8,"PartialEq"],[8,"Integer"],[8,"Sub"],[8,"One"],[8,"Zero"],[4,"Result"],[3,"TypeId"]]},\
"num_rational":{"doc":"Rational numbers","t":"DDGGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ParseRatioError","Ratio","Rational","Rational32","Rational64","abs","abs_sub","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","approximate_float","borrow","borrow","borrow_mut","borrow_mut","ceil","checked_add","checked_div","checked_mul","checked_sub","clone","clone","clone_into","clone_into","cmp","denom","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","equivalent","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","from","from","from","from","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_integer","from_str","from_str_radix","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","hash","into","into","into","inv","inv","is_integer","is_negative","is_one","is_positive","is_zero","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","new","new_raw","numer","one","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","product","product","recip","reduced","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","round","set_one","set_zero","signum","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_integer","to_owned","to_owned","to_string","to_string","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","trunc","try_from","try_from","try_into","try_into","type_id","type_id","zero"],"q":[[0,"num_rational"]],"d":["","Represents the ratio between two numbers.","Alias for a <code>Ratio</code> of machine-sized integers.","Alias for a <code>Ratio</code> of 32-bit-sized integers.","Alias for a <code>Ratio</code> of 64-bit-sized integers.","","","","","","","","","","","","","","","","","","","","Rounds towards plus infinity.","","","","","","","","","","Gets an immutable reference to the denominator.","","","","","","","","","","","","","","","","Rounds towards minus infinity.","","","","","","","","","","","Returns the fractional part of a number, with division …","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>Ratio</code> representing the integer <code>t</code>.","Parses <code>numer/denom</code> or just <code>numer</code>.","Parses <code>numer/denom</code> where the numbers are in base <code>radix</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns true if the rational number is an integer …","","","","","","","","","","","","","","","","","","","Creates a new <code>Ratio</code>.","Creates a <code>Ratio</code> without checking for <code>denom == 0</code> or …","Gets an immutable reference to the numerator.","","","","","Raises the <code>Ratio</code> to the power of an exponent.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the reciprocal.","Returns a reduced copy of self.","","","","","","","","","","","","","Rounds to the nearest integer. Rounds half-way cases away …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts to an integer, rounding towards zero.","","","","","","","","","","","","","","","","","","","","","","","","","Rounds towards zero.","","","","","","",""],"i":[0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,13,4,4,4,4,4,4,13,4,13,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,4,4,4,4,4,4,4,4,4,13,13,4,4,4,4,13,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,13,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,13,4,13,4],"f":[0,0,0,0,0,[[[4,[[0,[1,2,3]]]]],[[4,[[0,[1,2,3]]]]]],[[[4,[[0,[1,2,3]]]],[4,[[0,[1,2,3]]]]],[[4,[[0,[1,2,3]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[0,[6,7]]],[[9,[[4,[[0,[2,3,8,7,1]]]]]]]],[[]],[[]],[[]],[[]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,10,11]]]],[4,[[0,[1,2,10,11]]]]],[[9,[[4,[[0,[1,2,10,11]]]]]]]],[[[4,[[0,[1,2,10]]]],[4,[[0,[1,2,10]]]]],[[9,[[4,[[0,[1,2,10]]]]]]]],[[[4,[[0,[1,2,10]]]],[4,[[0,[1,2,10]]]]],[[9,[[4,[[0,[1,2,10]]]]]]]],[[[4,[[0,[1,2,10,12]]]],[4,[[0,[1,2,10,12]]]]],[[9,[[4,[[0,[1,2,10,12]]]]]]]],[[[4,[1]]],[[4,[1]]]],[13,13],[[]],[[]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],14],[4],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],15],[[13,13],15],[[],15],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[16,1,2]]]],17],18],[[[4,[[0,[19,1,2]]]],17],18],[[[4,[[0,[20,1,2]]]],17],18],[[[4,[[0,[21,1,2]]]],17],18],[[[4,[[0,[22,1,2]]]],17],18],[[[4,[[0,[23,1,2]]]],17],18],[[[4,[[0,[24,1,2]]]],17],18],[[[4,[25]],17],18],[[13,17],18],[[13,17],18],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[],[[4,[[0,[1,2]]]]]],[[]],[[[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[]],[26,[[9,[[4,[27]]]]]],[26,[[9,[[4,[28]]]]]],[26,[[9,[[4,[29]]]]]],[26,[[9,[[4,[30]]]]]],[26,[[9,[[4,[31]]]]]],[26,[[9,[[4,[32]]]]]],[26,[[9,[[4,[33]]]]]],[26,[[9,[[4,[34]]]]]],[26,[[9,[[4,[35]]]]]],[26,[[9,[[4,[36]]]]]],[26,[[9,[[4,[37]]]]]],[26,[[9,[[4,[38]]]]]],[39,[[9,[[4,[31]]]]]],[39,[[9,[[4,[28]]]]]],[39,[[9,[[4,[33]]]]]],[39,[[9,[[4,[37]]]]]],[39,[[9,[[4,[38]]]]]],[39,[[9,[[4,[36]]]]]],[39,[[9,[[4,[29]]]]]],[39,[[9,[[4,[32]]]]]],[39,[[9,[[4,[35]]]]]],[39,[[9,[[4,[34]]]]]],[39,[[9,[[4,[30]]]]]],[39,[[9,[[4,[27]]]]]],[33,[[9,[[4,[28]]]]]],[33,[[9,[[4,[30]]]]]],[33,[[9,[[4,[31]]]]]],[33,[[9,[[4,[34]]]]]],[33,[[9,[[4,[36]]]]]],[33,[[9,[[4,[32]]]]]],[33,[[9,[[4,[37]]]]]],[33,[[9,[[4,[33]]]]]],[33,[[9,[[4,[35]]]]]],[33,[[9,[[4,[38]]]]]],[33,[[9,[[4,[29]]]]]],[33,[[9,[[4,[27]]]]]],[27,[[9,[[4,[28]]]]]],[27,[[9,[[4,[38]]]]]],[27,[[9,[[4,[31]]]]]],[27,[[9,[[4,[29]]]]]],[27,[[9,[[4,[34]]]]]],[27,[[9,[[4,[35]]]]]],[27,[[9,[[4,[32]]]]]],[27,[[9,[[4,[37]]]]]],[27,[[9,[[4,[27]]]]]],[27,[[9,[[4,[30]]]]]],[27,[[9,[[4,[33]]]]]],[27,[[9,[[4,[36]]]]]],[[[0,[1,2]]],[[4,[[0,[1,2]]]]]],[40,[[42,[[4,[[0,[41,1,2]]]],13]]]],[[40,34],[[42,[[4,[[0,[1,2]]]],13]]]],[28,[[9,[[4,[27]]]]]],[28,[[9,[[4,[36]]]]]],[28,[[9,[[4,[31]]]]]],[28,[[9,[[4,[34]]]]]],[28,[[9,[[4,[32]]]]]],[28,[[9,[[4,[33]]]]]],[28,[[9,[[4,[37]]]]]],[28,[[9,[[4,[38]]]]]],[28,[[9,[[4,[28]]]]]],[28,[[9,[[4,[30]]]]]],[28,[[9,[[4,[29]]]]]],[28,[[9,[[4,[35]]]]]],[30,[[9,[[4,[30]]]]]],[30,[[9,[[4,[32]]]]]],[30,[[9,[[4,[38]]]]]],[30,[[9,[[4,[35]]]]]],[30,[[9,[[4,[31]]]]]],[30,[[9,[[4,[29]]]]]],[30,[[9,[[4,[34]]]]]],[30,[[9,[[4,[33]]]]]],[30,[[9,[[4,[36]]]]]],[30,[[9,[[4,[28]]]]]],[30,[[9,[[4,[27]]]]]],[30,[[9,[[4,[37]]]]]],[[[4,[[0,[1,2,43]]]],44]],[4],[[]],[[]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]],15],[[[4,[[0,[1,2,3]]]]],15],[[[4,[[0,[1,2]]]]],15],[[[4,[[0,[1,2,3]]]]],15],[[[4,[[0,[1,2]]]]],15],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,45]]]]],[[4,[[0,[1,2,45]]]]]],[[[4,[[0,[1,2,45]]]]],[[4,[[0,[1,2,45]]]]]],[[[0,[1,2]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[],4],[4],[[],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[9,[14]]]],[[[4,[[0,[1,2,[46,[29]]]]]],35],[[4,[[0,[1,2,[46,[29]]]]]]]],[[[4,[[0,[1,2,[46,[28]]]]]],33],[[4,[[0,[1,2,[46,[28]]]]]]]],[[[4,[[0,[1,2]]]],36],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],29],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[30]]]]]],30],[[4,[[0,[1,2,[46,[30]]]]]]]],[[[4,[[0,[1,2]]]],35],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],32],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],30],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[34]]]]]],34],[[4,[[0,[1,2,[46,[34]]]]]]]],[[[4,[[0,[1,2]]]],27],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],34],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[29]]]]]],29],[[4,[[0,[1,2,[46,[29]]]]]]]],[[[4,[[0,[1,2,[46,[29]]]]]],29],[[4,[[0,[1,2,[46,[29]]]]]]]],[[[4,[[0,[1,2,[46,[37]]]]]],38],[[4,[[0,[1,2,[46,[37]]]]]]]],[[[4,[[0,[1,2,[46,[30]]]]]],27],[[4,[[0,[1,2,[46,[30]]]]]]]],[[[4,[[0,[1,2]]]],34],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],32],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],28],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],31],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[28]]]]]],28],[[4,[[0,[1,2,[46,[28]]]]]]]],[[[4,[[0,[1,2]]]],31],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],33],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[28]]]]]],28],[[4,[[0,[1,2,[46,[28]]]]]]]],[[[4,[[0,[1,2]]]],37],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[29]]]]]],35],[[4,[[0,[1,2,[46,[29]]]]]]]],[[[4,[[0,[1,2,[46,[37]]]]]],37],[[4,[[0,[1,2,[46,[37]]]]]]]],[[[4,[[0,[1,2,[46,[30]]]]]],30],[[4,[[0,[1,2,[46,[30]]]]]]]],[[[4,[[0,[1,2]]]],27],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[31]]]]]],31],[[4,[[0,[1,2,[46,[31]]]]]]]],[[[4,[[0,[1,2]]]],29],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[30]]]]]],27],[[4,[[0,[1,2,[46,[30]]]]]]]],[[[4,[[0,[1,2]]]],36],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],35],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],33],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],30],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],37],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[37]]]]]],37],[[4,[[0,[1,2,[46,[37]]]]]]]],[[[4,[[0,[1,2,[46,[34]]]]]],36],[[4,[[0,[1,2,[46,[34]]]]]]]],[[[4,[[0,[1,2,[46,[28]]]]]],33],[[4,[[0,[1,2,[46,[28]]]]]]]],[[[4,[[0,[1,2,[46,[37]]]]]],38],[[4,[[0,[1,2,[46,[37]]]]]]]],[[[4,[[0,[1,2,[46,[31]]]]]],32],[[4,[[0,[1,2,[46,[31]]]]]]]],[[[4,[[0,[1,2,[46,[34]]]]]],36],[[4,[[0,[1,2,[46,[34]]]]]]]],[[[4,[[0,[1,2]]]],38],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[31]]]]]],31],[[4,[[0,[1,2,[46,[31]]]]]]]],[[[4,[[0,[1,2]]]],38],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[31]]]]]],32],[[4,[[0,[1,2,[46,[31]]]]]]]],[[[4,[[0,[1,2,[46,[34]]]]]],34],[[4,[[0,[1,2,[46,[34]]]]]]]],[[[4,[[0,[1,2]]]],28],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],36],[[4,[[0,[1,2]]]]]],[47,[[4,[[0,[2,1]]]]]],[47,[[4,[[0,[2,1]]]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,3]]]]],[[4,[[0,[1,2,3]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[47,[[4,[[0,[2,1]]]]]],[47,[[4,[[0,[2,1]]]]]],[[[4,[38]]],[[9,[39]]]],[[[4,[36]]],[[9,[39]]]],[[[4,[31]]],[[9,[39]]]],[[[4,[27]]],[[9,[39]]]],[[[4,[37]]],[[9,[39]]]],[[[4,[34]]],[[9,[39]]]],[[[4,[30]]],[[9,[39]]]],[[[4,[35]]],[[9,[39]]]],[[[4,[29]]],[[9,[39]]]],[[[4,[32]]],[[9,[39]]]],[[[4,[31]]],[[9,[33]]]],[[[4,[34]]],[[9,[33]]]],[[[4,[30]]],[[9,[33]]]],[[[4,[32]]],[[9,[33]]]],[[[4,[27]]],[[9,[33]]]],[[[4,[38]]],[[9,[33]]]],[[[4,[35]]],[[9,[33]]]],[[[4,[37]]],[[9,[33]]]],[[[4,[29]]],[[9,[33]]]],[[[4,[36]]],[[9,[33]]]],[[[4,[36]]],[[9,[27]]]],[[[4,[29]]],[[9,[27]]]],[[[4,[34]]],[[9,[27]]]],[[[4,[32]]],[[9,[27]]]],[[[4,[27]]],[[9,[27]]]],[[[4,[30]]],[[9,[27]]]],[[[4,[35]]],[[9,[27]]]],[[[4,[31]]],[[9,[27]]]],[[[4,[38]]],[[9,[27]]]],[[[4,[37]]],[[9,[27]]]],[[[4,[[0,[1,2]]]]],[[0,[1,2]]]],[[]],[[]],[[],48],[[],48],[[[4,[32]]],[[9,[28]]]],[[[4,[38]]],[[9,[28]]]],[[[4,[34]]],[[9,[28]]]],[[[4,[35]]],[[9,[28]]]],[[[4,[37]]],[[9,[28]]]],[[[4,[36]]],[[9,[28]]]],[[[4,[29]]],[[9,[28]]]],[[[4,[27]]],[[9,[28]]]],[[[4,[30]]],[[9,[28]]]],[[[4,[31]]],[[9,[28]]]],[[[4,[38]]],[[9,[30]]]],[[[4,[34]]],[[9,[30]]]],[[[4,[31]]],[[9,[30]]]],[[[4,[29]]],[[9,[30]]]],[[[4,[32]]],[[9,[30]]]],[[[4,[36]]],[[9,[30]]]],[[[4,[27]]],[[9,[30]]]],[[[4,[35]]],[[9,[30]]]],[[[4,[30]]],[[9,[30]]]],[[[4,[37]]],[[9,[30]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[],42],[[],42],[[],42],[[],42],[[],49],[[],49],[[],[[4,[[0,[1,2]]]]]]],"c":[],"p":[[8,"Clone"],[8,"Integer"],[8,"Signed"],[3,"Ratio"],[8,"NumAssign"],[8,"FloatCore"],[8,"NumCast"],[8,"Bounded"],[4,"Option"],[8,"CheckedMul"],[8,"CheckedAdd"],[8,"CheckedSub"],[3,"ParseRatioError"],[4,"Ordering"],[15,"bool"],[8,"Display"],[3,"Formatter"],[6,"Result"],[8,"LowerExp"],[8,"Octal"],[8,"LowerHex"],[8,"UpperExp"],[8,"UpperHex"],[8,"Binary"],[8,"Debug"],[15,"f32"],[15,"i64"],[15,"u128"],[15,"usize"],[15,"u64"],[15,"u8"],[15,"i8"],[15,"i128"],[15,"u32"],[15,"isize"],[15,"i32"],[15,"u16"],[15,"i16"],[15,"f64"],[15,"str"],[8,"FromStr"],[4,"Result"],[8,"Hash"],[8,"Hasher"],[8,"Neg"],[8,"Pow"],[8,"Iterator"],[3,"String"],[3,"TypeId"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","t":"CCCCCCCCCCCNCCCECCQCNCCIIIICIICDCCICCCCCCCCCCCCCCCCCLLLLAACCFFFALLLLLKAALLMCAACAACLLLLLLLCIIIKKKKIIIIKFKLLLLLKLLLLLKLLLLLLLKLLLLLKLLKKKKKKKKKKIIIKKLKLKKKLKLKKKKKKKKKKLKKLKKKLKKKKLKLKKKKKKLKLKLKLKLKLLLKKKKKKLKKKLKKKKKKKKKKKKKLKLKLKLKKKKKKKLKLKLIILKFKLLFKIKKKKLKKLKKKKKKKLKKKAAAAAAAAQQIIIKKLKKLIIIIIIIIKKKKKKKKIIKKKKIQKIIQKKIIIKKKIIIIKKKKKIIIIIIKKKKKKQIFFKIKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKIIFKFKKKFK","n":["AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedEuclid","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","Empty","Euclid","Float","FloatConst","FloatErrorKind","FromBytes","FromPrimitive","FromStrRadixErr","Inv","Invalid","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","ParseFloatError","Pow","PrimInt","RefNum","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","ToBytes","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs_sub","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","checked_pow","clamp","clamp_max","clamp_min","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","one","ops","pow","pow","real","sign","signum","to_string","try_from","try_from","try_into","try_into","type_id","type_id","zero","Bounded","LowerBounded","UpperBounded","max_value","max_value","min_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","classify","classify","copysign","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_subnormal","is_subnormal","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","trunc","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_ones","leading_zeros","pow","reverse_bits","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_ones","trailing_zeros","unsigned_shl","unsigned_shr","bytes","checked","euclid","inv","mul_add","overflowing","saturating","wrapping","Bytes","Bytes","FromBytes","NumBytes","ToBytes","from_be_bytes","from_le_bytes","from_ne_bytes","to_be_bytes","to_le_bytes","to_ne_bytes","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","CheckedEuclid","Euclid","checked_div_euclid","checked_rem_euclid","div_euclid","rem_euclid","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":[[0,"num_traits"],[90,"num_traits::bounds"],[97,"num_traits::cast"],[132,"num_traits::float"],[243,"num_traits::identities"],[253,"num_traits::int"],[273,"num_traits::ops"],[281,"num_traits::ops::bytes"],[292,"num_traits::ops::checked"],[308,"num_traits::ops::euclid"],[314,"num_traits::ops::inv"],[317,"num_traits::ops::mul_add"],[322,"num_traits::ops::overflowing"],[328,"num_traits::ops::saturating"],[337,"num_traits::ops::wrapping"],[349,"num_traits::pow"],[354,"num_traits::real"],[402,"num_traits::sign"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The trait for <code>Num</code> types which also implement assignment …","Generic trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","","Generic trait for types implementing basic numeric …","The trait for <code>Num</code> types which also implement numeric …","","","","","The trait for <code>Num</code> references which implement numeric …","","","","","","","","","","","","","","","","","","","","","","","","","","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a string and radix (typically <code>2..=36</code>).","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","Numbers which have lower bounds","Numbers which have upper bounds","Returns the largest finite number this type can represent","Returns the largest finite number this type can represent","Returns the smallest finite number this type can represent","Returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value of <code>self</code>. Returns …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If only …","Returns the floating point category of the number. If only …","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns <code>true</code> if the number is subnormal.","Returns <code>true</code> if the number is subnormal.","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the integer part of a number.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","","","","","","","","Create a number from its representation as a byte array in …","Create a number from its representation as a byte array in …","Create a number from its memory representation as a byte …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","","","Performs euclid division that returns <code>None</code> instead of …","Finds the euclid remainder of dividing two numbers, …","Calculates Euclidean division, the matching method for …","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation …","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation <code>(self * a) + b</code>","Performs the fused multiply-add assignment operation …","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have …","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that can …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,39,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,5,0,0,0,0,0,0,0,0,2,5,5,2,5,39,0,0,2,5,5,0,0,0,0,0,0,0,5,2,5,2,5,2,5,0,0,0,0,40,41,40,42,0,0,0,0,43,0,11,44,44,44,44,44,44,44,44,44,44,44,44,44,44,13,13,13,13,13,13,13,13,13,13,13,13,13,13,45,45,45,45,45,45,45,45,45,45,0,0,0,45,45,45,45,45,45,45,45,45,46,47,46,46,46,46,46,46,46,46,46,46,47,47,46,46,46,46,47,46,46,46,46,46,47,46,47,46,47,46,47,46,46,47,46,47,46,47,46,47,46,47,46,47,47,46,46,46,46,46,46,46,47,47,46,46,47,47,46,47,46,46,47,46,47,46,47,46,46,46,47,46,47,46,47,46,47,46,46,46,46,46,46,47,46,47,46,46,47,0,0,33,34,0,33,33,34,0,34,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,0,0,0,0,0,0,0,49,50,0,0,0,50,50,50,49,49,49,0,0,0,0,0,0,0,0,51,52,36,53,54,55,56,57,0,0,58,58,59,59,0,60,60,0,0,61,61,62,0,0,0,63,64,65,0,0,0,0,66,67,68,66,69,0,0,0,0,0,0,70,71,72,73,74,75,76,0,0,0,76,0,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,0,0,0,38,0,38,38,38,0,38],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[1,1,1],1],[[1,1],1],[[1,1],1],0,[[2,3],4],[[5,3],4],[[5,3],4],[[]],[[]],[[6,7],8],0,0,[[]],[[]],0,0,0,0,0,0,0,0,[[],9],[[],8],[[],8],[[],8],[[],8],[[],10],[[],10],0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[]],[11,[[12,[11]]]],[13,12],[14,12],[15,12],[16,12],[17,12],[18,12],[19,12],[20,12],[21,12],[22,12],[23,12],[7,12],[24,12],[25,12],[26,12],[[],[[12,[14]]]],[[],[[12,[15]]]],[[],[[12,[16]]]],[[],[[12,[17]]]],[[],[[12,[18]]]],[[],[[12,[19]]]],[[],[[12,[20]]]],[[],[[12,[21]]]],[[],[[12,[22]]]],[[],[[12,[23]]]],[[],[[12,[7]]]],[[],[[12,[24]]]],[[],[[12,[25]]]],[[],[[12,[26]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[],[[0,[27,[28,[[0,[27,[28,[[0,[27,[28,[[0,[27,[28,[[0,[27,28]]]]]]]]]]]]]]]]]]]],[[]],[[],[[0,[27,[28,[[0,[27,[28,[[0,[27,[28,[[0,[27,[28,[[0,[27,28]]]]]]]]]]]]]]]]]]]],[[]],[[]],[[]],[[],[[0,[27,[29,[[0,[27,[29,[[0,[27,[29,[[0,[27,[29,[[0,[27,29]]]]]]]]]]]]]]]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],30],[[],30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18],[18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[32,31],[[],31],[[],33],[[]],[[]],[[]],[[],34],[[]],0,[[],7],[[],7],[[]],[[]],[[],7],[[],7],[7],[[]],[7],[7],[7],[7],[[]],[[]],[[]],[[],7],[[],7],[7],[7],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[[],12],[[],12],[[],12],[[],12],[[],12],[7,12],[7,12],[[],12],0,0,[[],12],[[],12],[[]],[[]],0,0,[[]],0,0,0,[[]],[[]],0,0,0,[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[7],[7],[[]],0,0,[[[0,[35,33,36]],26],[[12,[[0,[35,33,36]]]]]],[[[0,[35,33,[37,[[0,[35,33,[37,[[0,[35,33,[37,[[0,[35,33,[37,[[0,[35,33,37]]]]]]]]]]]]]]]]]],26],[[0,[35,33,[37,[[0,[35,33,[37,[[0,[35,33,[37,[[0,[35,33,[37,[[0,[35,33,37]]]]]]]]]]]]]]]]]]]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],31],[[],31],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[38,38],[[]],[[38,38],38],[[]],[[],31],[[],31],[38,38],[[]]],"c":[],"p":[[8,"PartialOrd"],[4,"FloatErrorKind"],[3,"Formatter"],[6,"Result"],[3,"ParseFloatError"],[15,"str"],[15,"u32"],[4,"Result"],[3,"String"],[3,"TypeId"],[8,"NumCast"],[4,"Option"],[8,"ToPrimitive"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u128"],[15,"u16"],[15,"u64"],[15,"u8"],[15,"usize"],[8,"Sized"],[8,"Div"],[8,"Add"],[4,"FpCategory"],[15,"bool"],[8,"PartialEq"],[8,"One"],[8,"Zero"],[8,"Clone"],[8,"CheckedMul"],[8,"Mul"],[8,"Signed"],[8,"Num"],[8,"Bounded"],[8,"UpperBounded"],[8,"LowerBounded"],[8,"AsPrimitive"],[8,"FromPrimitive"],[8,"FloatConst"],[8,"Float"],[8,"FloatCore"],[8,"PrimInt"],[8,"ToBytes"],[8,"FromBytes"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"CheckedSub"],[8,"CheckedEuclid"],[8,"Euclid"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"Pow"],[8,"Real"]]},\
"png":{"doc":"PNG encoder and decoder","t":"DNNSNNEENNEENNEDENESSNDENENNNDNSNNNNSSSNNNNDNNNDNNNNNNNDNSSNNDNNNNDNSSSSSSSSSNNDDNDNENNDLLMMMLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMLLLLLMMLMLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLMMLLLMLMLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMMMLLLLMMMMMMMMGRRRRRRRRFFRFFRR","n":["AnimationControl","AnimationControl","Avg","BGR","Background","Best","BitDepth","BlendOp","ChunkBegin","ChunkComplete","ColorType","Compression","CorruptFlateStream","CrcMismatch","Decoded","Decoder","DecodingError","Default","DisposeOp","EXPAND","EXPAND_16","Eight","Encoder","EncodingError","Fast","FilterType","Format","Format","Four","FrameControl","FrameControl","GRAY_TO_RGB","Grayscale","GrayscaleAlpha","Header","Huffman","IDENTITY","INVERT_ALPHA","INVERT_MONO","ImageData","ImageDataFlushed","ImageEnd","Indexed","Info","InvalidSignature","IoError","IoError","Limits","LimitsExceeded","Meter","NoFilter","None","Nothing","One","Other","OutputInfo","Over","PACKING","PACKSWAP","Paeth","PartialChunk","PixelDimensions","PixelDimensions","Previous","RGB","RGBA","Reader","Rle","SCALE_16","SHIFT","STRIP_16","STRIP_ALPHA","STRIP_FILLER","STRIP_FILLER_AFTER","STRIP_FILLER_BEFORE","SWAP_ALPHA","SWAP_ENDIAN","Sixteen","Source","StreamWriter","StreamingDecoder","Sub","Transformations","Two","Unit","Unspecified","Up","Writer","all","animation_control","animation_control","bit_depth","bit_depth","bitand","bitand_assign","bitor","bitor_assign","bits","bits_per_pixel","bitxor","bitxor_assign","blend_op","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer_size","bytes","bytes_per_pixel","cause","cause","chunk","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","color_type","color_type","complement","compression","contains","default","default","default","default","delay_den","delay_num","difference","dispose_op","drop","drop","empty","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend","filter","finish","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","frame_control","frame_control","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","hash","height","height","height","inc_seq_num","info","insert","interlaced","intersection","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_stream_writer","into_stream_writer_with_size","is_all","is_animated","is_empty","line_size","new","new","new","new_with_limits","next_frame","next_interlaced_row","next_row","not","num_frames","num_plays","output_buffer_size","output_color_type","output_line_size","palette","partial_cmp","pixel_dims","raw_bytes","raw_row_length","raw_row_length_from_width","read_info","remove","reset","samples","sequence_number","set","set_color","set_compression","set_depth","set_filter","set_limits","set_palette","set_seq_num","set_transformations","set_trns","size","stream_writer","stream_writer_with_size","sub","sub_assign","symmetric_difference","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","toggle","trns","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","unit","update","width","width","width","write","write_chunk","write_header","write_image_data","x_offset","xppu","y_offset","yppu","chunk","crc_sum","crc_val","recover","ChunkType","IDAT","IEND","IHDR","PLTE","acTL","bKGD","fcTL","fdAT","is_critical","is_private","pHYs","reserved_set","safe_to_copy","tIME","tRNS"],"q":[[0,"png"],[462,"png::DecodingError"],[466,"png::chunk"]],"d":["Animation control information","","","Flip RGB to BGR; RGBA to BGRA","Clear buffer with the background color.","Higher compression level","Bit depth of the png file","How pixels are written into the buffer.","","","Describes the layout of samples in a pixel","The type and strength of applied compression.","","","Result of the decoding process","PNG Decoder","","Default level  ","How to reset buffer of an animated png (APNG) at the end …","Expand paletted images to RGB; expand grayscale images of …","","","PNG Encoder","","Fast minimal compression","The byte level filter applied to scanlines to prepare them …","","","","Frame control information","","","","","","","No transformation","Change alpha from opacity to transparency","Invert monochrome images","Decoded raw image data.","The last of a consecutive chunk of IDAT was done. This is …","","","PNG info struct","","","","Limits on the resources the <code>Decoder</code> is allowed too use","","","","Leave the buffer unchanged.","Nothing decoded yet","","","Output info","The new pixels are blended into the current state based on …","Expand 1; 2 and 4-bit samples to bytes","Change order of packed pixels to LSB first","","","Pixel dimensions information","","Reset the buffer to the state before the current frame.","","","PNG reader (mostly high-level interface)","","","Normalize pixels to the sBIT depth","Strip 16-bit samples to 8 bits","Discard the alpha channel","","","","Flip RGBA to ARGB or GA to AG","Byte-swap 16-bit samples","","Pixels overwrite the value at their position.","Streaming png writer","PNG StreamingDecoder (low-level interface)","","Output transformations","","Physical unit of the pixel dimensions","","","PNG writer","Returns the set containing all flags.","Returns the frame control information of the image","","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the bits per pixel","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Type of frame area rendering for this frame","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the size needed to hold a decoded frame","maximum number of bytes the decoder is allowed to …","Returns the bytes per pixel","","","Chunk types and functions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","Frame delay fraction denominator","Frame delay fraction numerator","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Type of frame area disposal to be done after rendering …","","","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the frame control information of the current frame","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","u8 -&gt; Self. Temporary solution until Rust provides a …","u8 -&gt; Self. Temporary solution until Rust provides a …","u8 -&gt; Self. Temporary solution until Rust provides a …","u8 -&gt; Self. Using enum_primitive or transmute is probably …","u8 -&gt; Self. Using enum_primitive or transmute is probably …","u8 -&gt; Self. Temporary solution until Rust provides a …","","Height of the following frame","","","","Get information on the image.","Inserts the specified flags in-place.","","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Turn this into a stream writer for image data.","Turn this into a stream writer with custom buffer size.","Returns <code>true</code> if all flags are currently set.","Returns true if the image is an APNG image.","Returns <code>true</code> if no flags are currently stored.","","Creates a new StreamingDecoder","","","","Decodes the next frame into <code>buf</code>.","Returns the next processed row of the image","Returns the next processed row of the image","Returns the complement of this set of flags.","Number of frames","Number of times to loop this APNG.  0 indicates infinite …","Returns the number of bytes required to hold a …","Returns the color type and the number of bits per sample …","Returns the number of bytes required to hold a …","","","","Returns the number of bytes needed for one deinterlaced …","Returns the number of bytes needed for one deinterlaced row","Returns the number of bytes needed for one deinterlaced …","Reads all meta data until the first IDAT chunk","Removes the specified flags in-place.","Resets the StreamingDecoder","Returns the number of samples used per pixel of <code>ColorType</code>","Sequence number of the animation chunk, starting from 0","Inserts or removes the specified flags depending on the …","Set the color of the encoded image.","Set compression parameters.","Set the indicated depth of the image data.","Set the used filter type.","Limit resource usage","","","Set the allowed and performed transformations.","","Size of the image","Create an stream writer.","Create a stream writer with custom buffer size.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","","","","","","","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Either <em>Meter</em> or <em>Unspecified</em>","Low level StreamingDecoder interface.","Width of the following frame","","","","","","Writes the image data.","X position at which to render the following frame","Pixels per unit, X axis","Y position at which to render the following frame","Pixels per unit, Y axis","","Calculated CRC32 sum","Stored CRC32 value","bytes to skip to try to recover from this error","","Image data","Image trailer","Image header","Palette","Animation control","Background colour","Frame control","Frame data","Returns true if the chunk is critical.","Returns true if the chunk is private.","Physical pixel dimensions","Checks whether the reserved bit of the chunk name is set. …","Returns true if the chunk is safe to copy if unknown.","Image last-modification time","Transparency"],"i":[0,32,20,1,15,18,0,0,32,32,0,0,8,8,0,0,0,18,0,1,1,12,0,0,18,0,8,10,12,0,32,1,11,11,32,18,1,1,1,32,32,32,11,0,8,8,10,0,8,14,20,15,32,12,8,0,16,1,1,20,32,0,32,15,11,11,0,18,1,1,1,1,1,1,1,1,1,12,16,0,0,20,0,12,0,14,20,0,1,2,2,2,7,1,1,1,1,1,2,1,1,17,23,41,40,42,25,26,11,12,13,14,15,16,17,3,18,2,1,32,8,7,19,10,20,23,41,40,42,25,26,11,12,13,14,15,16,17,3,18,2,1,32,8,7,19,10,20,7,19,2,8,10,0,11,12,13,14,15,16,17,3,18,2,1,19,20,11,12,13,14,15,16,17,3,18,2,1,19,20,1,2,7,1,2,1,23,17,2,19,17,17,1,17,25,26,1,11,12,14,15,16,1,7,20,11,12,14,15,16,1,7,20,1,2,26,26,11,12,13,14,15,15,16,16,17,3,18,2,1,1,1,1,1,32,8,8,7,19,10,10,20,2,2,23,41,40,42,25,26,11,12,13,14,15,16,17,3,18,18,2,1,32,8,8,8,7,19,10,10,20,1,1,1,1,11,12,14,15,16,20,1,17,2,7,17,40,1,2,1,1,23,41,40,42,25,26,11,12,13,14,15,16,17,3,18,2,1,32,8,7,19,10,20,25,25,1,2,1,7,23,41,42,41,40,40,40,1,3,3,40,40,40,2,1,2,2,2,2,41,1,23,11,17,1,42,42,42,42,41,42,17,41,42,2,25,25,1,1,1,11,12,13,14,15,16,17,3,18,2,1,19,20,15,16,8,10,1,2,23,41,40,42,25,26,11,12,13,14,15,16,17,3,18,2,1,32,8,7,19,10,20,23,41,40,42,25,26,11,12,13,14,15,16,17,3,18,2,1,32,8,7,19,10,20,23,41,40,42,25,26,11,12,13,14,15,16,17,3,18,2,1,32,8,7,19,10,20,1,13,23,17,2,7,26,25,42,25,17,13,17,13,49,49,49,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[2,[[4,[3]]]],0,0,0,[[1,1],1],[[1,1]],[[1,1],1],[[1,1]],[1,5],[2,6],[[1,1],1],[[1,1]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,6],0,[2,6],[8,[[4,[9]]]],[10,[[4,[9]]]],0,[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[3,3],[18,18],[2,2],[1,1],[19,19],[20,20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],21],0,0,[1,1],0,[[1,1],22],[[],23],[[],17],[[],2],[[],19],0,0,[[1,1],1],0,[[[25,[24]]]],[[[26,[24]]]],[[],1],[[11,11],22],[[12,12],22],[[14,14],22],[[15,15],22],[[16,16],22],[[1,1],22],[[7,7],22],[[20,20],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[1,27]],0,[[[26,[24]]],[[28,[10]]]],[[[26,[24]]],29],[[11,30],31],[[12,30],31],[[13,30],31],[[14,30],31],[[15,30],31],[[15,30],31],[[16,30],31],[[16,30],31],[[17,30],31],[[3,30],31],[[18,30],31],[[2,30],31],[[1,30],31],[[1,30],31],[[1,30],31],[[1,30],31],[[1,30],31],[[32,30],31],[[8,30],[[28,[33]]]],[[8,30],31],[[7,30],31],[[19,30],31],[[10,30],[[28,[33]]]],[[10,30],31],[[20,30],31],[2,[[4,[17]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[34,18],[[]],[[]],[[]],[35,8],[36,8],[[]],[[]],[[]],[[]],[35,10],[[]],[5,[[4,[1]]]],[5,1],[5,1],[27,1],[37,[[4,[11]]]],[37,[[4,[12]]]],[37,[[4,[14]]]],[37,[[4,[15]]]],[37,[[4,[16]]]],[37,[[4,[20]]]],[[1,38]],0,0,0,[[17,5]],[[[40,[39]]],2],[[1,1]],0,[[1,1],1],[[1,1],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[25,[24]]],[[26,[24]]]],[[[25,[24]],6],[[26,[24]]]],[1,22],[2,22],[1,22],0,[[],23],[39,[[41,[39]]]],[[24,5,5],[[42,[24]]]],[[39,19],[[41,[39]]]],[[[40,[39]],[43,[37]]],[[28,[8]]]],[[[40,[39]]],[[28,[4,8]]]],[[[40,[39]]],[[28,[[4,[[43,[37]]]],8]]]],[1,1],0,0,[[[40,[39]]],6],[[[40,[39]]]],[[[40,[39]],5],6],0,[[1,1],[[4,[21]]]],0,[2,6],[2,6],[[2,5],6],[[[41,[39]]],[[28,[8]]]],[[1,1]],[23],[11,6],0,[[1,1,22]],[[[42,[24]],11]],[[[42,[24]],[44,[18]]]],[[[42,[24]],12]],[[[42,[24]],20]],[[[41,[39]],19]],[[[42,[24]],[45,[37]]]],[[17,5]],[[[41,[39]],1]],[[[42,[24]],[45,[37]]]],[2],[[[25,[24]]],[[26,[24]]]],[[[25,[24]],6],[[26,[24]]]],[[1,1],1],[[1,1]],[[1,1],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],36],[[],36],[[],36],[[],36],[[1,1]],0,[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[1,1],1],0,[[23,[43,[37]],[45,[37]]],[[28,[8]]]],0,0,0,[[[26,[24]],[43,[37]]],[[29,[6]]]],[[[25,[24]],[47,[37]],[43,[37]]],[[28,[10]]]],[[[42,[24]]],[[28,[[25,[24]],10]]]],[[[25,[24]],[43,[37]]],[[28,[10]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[48,22],[48,22],0,[48,22],[48,22],0,0],"c":[],"p":[[3,"Transformations"],[3,"Info"],[3,"AnimationControl"],[4,"Option"],[15,"u32"],[15,"usize"],[3,"OutputInfo"],[4,"DecodingError"],[8,"Error"],[4,"EncodingError"],[4,"ColorType"],[4,"BitDepth"],[3,"PixelDimensions"],[4,"Unit"],[4,"DisposeOp"],[4,"BlendOp"],[3,"FrameControl"],[4,"Compression"],[3,"Limits"],[4,"FilterType"],[4,"Ordering"],[15,"bool"],[3,"StreamingDecoder"],[8,"Write"],[3,"Writer"],[3,"StreamWriter"],[8,"IntoIterator"],[4,"Result"],[6,"Result"],[3,"Formatter"],[6,"Result"],[4,"Decoded"],[3,"Error"],[4,"Compression"],[3,"Error"],[3,"String"],[15,"u8"],[8,"Hasher"],[8,"Read"],[3,"Reader"],[3,"Decoder"],[3,"Encoder"],[15,"slice"],[8,"Into"],[3,"Vec"],[3,"TypeId"],[15,"array"],[6,"ChunkType"],[13,"CrcMismatch"]]},\
"rayon":{"doc":"Data-parallelism library that makes it easy to convert …","t":"DNDNDDDDDDEALLLLLLLLLLLLLLLLLLLFLLLLLLAFLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLFLLLLLLLLLLLLLLLLLLLLLLAFLFFLLLLLLALAAAALFLFLALFLLFLLLFLLLLLLAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAFLFLDLLLLLLLLLLLLLLLLLLLLLAAAAAAADDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDEDDDDDDDDDDDDIIDDDDIIIQQQQQQQQQQQDNDDDDDDDDIIIIIDDDDNDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKLKKLLLLLALLLLLLLLLFFLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIQQQQQIIIQQQIIFFFKKKLKLKKKKLLKKKKKKDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCCCCCCCCCCCCCDLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDIIDDDDDDDKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDIDDDKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["BroadcastContext","Executed","FnContext","Idle","Scope","ScopeFifo","ThreadBuilder","ThreadPool","ThreadPoolBuildError","ThreadPoolBuilder","Yield","array","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","breadth_first","broadcast","broadcast","build","build_global","build_scoped","clone","clone_into","collections","current_num_threads","current_num_threads","current_thread_has_pending_tasks","current_thread_index","current_thread_index","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","equivalent","exit_handler","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","in_place_scope","in_place_scope","in_place_scope_fifo","in_place_scope_fifo","index","index","init","init","init","init","init","init","init","init","init","install","into","into","into","into","into","into","into","into","into","iter","join","join","join_context","max_num_threads","migrated","name","new","new","num_threads","num_threads","option","panic_handler","prelude","range","range_inclusive","result","run","scope","scope","scope_fifo","scope_fifo","slice","source","spawn","spawn","spawn","spawn_broadcast","spawn_broadcast","spawn_broadcast","spawn_broadcast","spawn_fifo","spawn_fifo","spawn_fifo","spawn_handler","stack_size","stack_size","start_handler","str","string","thread_name","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","use_current_thread","vec","yield_local","yield_local","yield_now","yield_now","IntoIter","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drive","drive_unindexed","drop","fmt","from","init","into","into_par_iter","len","opt_len","to_owned","try_from","try_into","type_id","with_producer","binary_heap","btree_map","btree_set","hash_map","hash_set","linked_list","vec_deque","Drain","IntoIter","Iter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drive","drive","drive","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","into_par_iter","into_par_iter","into_par_iter","len","len","len","opt_len","opt_len","opt_len","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_producer","with_producer","with_producer","IntoIter","Iter","IterMut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","into_par_iter","into_par_iter","into_par_iter","opt_len","opt_len","opt_len","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","IntoIter","Iter","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drive_unindexed","drive_unindexed","drop","drop","fmt","fmt","from","from","init","init","into","into","into_par_iter","into_par_iter","opt_len","opt_len","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Drain","IntoIter","Iter","IterMut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","into_par_iter","into_par_iter","into_par_iter","into_par_iter","opt_len","opt_len","opt_len","opt_len","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Drain","IntoIter","Iter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","into_par_iter","into_par_iter","into_par_iter","opt_len","opt_len","opt_len","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","IntoIter","Iter","IterMut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","into_par_iter","into_par_iter","into_par_iter","opt_len","opt_len","opt_len","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Drain","IntoIter","Iter","IterMut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drive","drive","drive","drive","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","into_par_iter","into_par_iter","into_par_iter","into_par_iter","len","len","len","len","opt_len","opt_len","opt_len","opt_len","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_producer","with_producer","with_producer","with_producer","Chain","Chunks","Cloned","Copied","Either","Empty","Enumerate","Filter","FilterMap","FlatMap","FlatMapIter","Flatten","FlattenIter","Fold","FoldChunks","FoldChunksWith","FoldWith","FromParallelIterator","IndexedParallelIterator","Inspect","Interleave","InterleaveShortest","Intersperse","IntoParallelIterator","IntoParallelRefIterator","IntoParallelRefMutIterator","Item","Item","Item","Item","Item","Item","Iter","Iter","Iter","Iter","Iter","IterBridge","Left","Map","MapInit","MapWith","MaxLen","MinLen","MultiZip","Once","PanicFuse","ParallelBridge","ParallelDrainFull","ParallelDrainRange","ParallelExtend","ParallelIterator","Positions","Repeat","RepeatN","Rev","Right","Skip","SkipAny","SkipAnyWhile","Split","StepBy","Take","TakeAny","TakeAnyWhile","TryFold","TryFoldWith","Update","WhileSome","Zip","ZipEq","all","all","any","any","as_mut","as_mut","as_mut","as_mut","as_pin_mut","as_pin_ref","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","chunks","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","cmp","cmp","collect","collect","collect_into_vec","copied","count","count","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","either","either_into","either_with","empty","enumerate","eq","eq","equivalent","expect_left","expect_right","extend","factor_err","factor_first","factor_none","factor_ok","factor_second","filter","filter_map","find","find_any","find_first","find_last","find_map","find_map_any","find_map_first","find_map_last","flat_map","flat_map_iter","flatten","flatten_iter","flip","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold_chunks","fold_chunks_with","fold_with","for_each","for_each","for_each_init","for_each_with","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_par_iter","ge","gt","hash","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","inspect","interleave","interleave_shortest","intersperse","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_future","into_inner","into_iter","into_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","is_left","is_right","last","le","left","left_and_then","left_or","left_or_default","left_or_else","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","lt","map","map","map_either","map_either_with","map_init","map_left","map_right","map_with","max","max_by","max_by_key","min","min_by","min_by_key","ne","next","next_back","nth","once","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","panic_fuse","par_bridge","par_drain","par_drain","par_extend","par_extend","par_iter","par_iter_mut","partial_cmp","partial_cmp","partition","partition","partition_map","plumbing","poll","position","position_any","position_first","position_last","positions","product","reduce","reduce_with","repeat","repeatn","rev","rfind","rfold","right","right_and_then","right_or","right_or_default","right_or_else","size_hint","skip","skip_any","skip_any_while","split","step_by","sum","take","take","take_any","take_any_while","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_fold","try_fold_with","try_for_each","try_for_each_init","try_for_each_with","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reduce","try_reduce_with","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrap_left","unwrap_right","unzip","unzip_into_vecs","update","while_some","with_max_len","with_min_len","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","zip","zip","zip_eq","Consumer","Folder","Folder","IntoIter","Item","Item","Output","Producer","ProducerCallback","Reducer","Reducer","Result","Result","UnindexedConsumer","UnindexedProducer","bridge","bridge_producer_consumer","bridge_unindexed","callback","complete","consume","consume_iter","fold_with","fold_with","full","full","into_folder","into_iter","max_len","min_len","reduce","split","split_at","split_at","split_off_left","to_reducer","IntoIter","Iter","IterMut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drive","drive","drive","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","into_par_iter","into_par_iter","into_par_iter","len","len","len","opt_len","opt_len","opt_len","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_producer","with_producer","with_producer","FromParallelIterator","IndexedParallelIterator","IntoParallelIterator","IntoParallelRefIterator","IntoParallelRefMutIterator","ParallelBridge","ParallelDrainFull","ParallelDrainRange","ParallelExtend","ParallelIterator","ParallelSlice","ParallelSliceMut","ParallelString","Iter","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drive","drive","drive_unindexed","drive_unindexed","drop","fmt","from","init","into","into_par_iter","len","len","opt_len","opt_len","to_owned","try_from","try_into","type_id","with_producer","with_producer","Iter","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drive","drive","drive_unindexed","drive_unindexed","drop","fmt","from","init","into","into_par_iter","len","len","opt_len","opt_len","to_owned","try_from","try_into","type_id","with_producer","with_producer","IntoIter","Iter","IterMut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drive","drive","drive","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","into_par_iter","into_par_iter","into_par_iter","len","len","len","opt_len","opt_len","opt_len","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_producer","with_producer","with_producer","Chunks","ChunksExact","ChunksExactMut","ChunksMut","Iter","IterMut","ParallelSlice","ParallelSliceMut","RChunks","RChunksExact","RChunksExactMut","RChunksMut","Split","SplitMut","Windows","as_parallel_slice","as_parallel_slice_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_remainder","into_remainder","len","len","len","len","len","len","len","len","len","len","len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","par_chunks","par_chunks_exact","par_chunks_exact_mut","par_chunks_mut","par_rchunks","par_rchunks_exact","par_rchunks_exact_mut","par_rchunks_mut","par_sort","par_sort_by","par_sort_by_cached_key","par_sort_by_key","par_sort_unstable","par_sort_unstable_by","par_sort_unstable_by_key","par_split","par_split_mut","par_windows","remainder","remainder","remainder","remainder","take_remainder","take_remainder","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","Bytes","CharIndices","Chars","EncodeUtf16","Lines","MatchIndices","Matches","ParallelString","Split","SplitTerminator","SplitWhitespace","as_parallel_string","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","par_bytes","par_char_indices","par_chars","par_encode_utf16","par_lines","par_match_indices","par_matches","par_split","par_split_terminator","par_split_whitespace","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Drain","borrow","borrow_mut","deref","deref_mut","drive_unindexed","drop","drop","fmt","from","init","into","into_par_iter","try_from","try_into","type_id","Drain","IntoIter","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drive","drive","drive_unindexed","drive_unindexed","drop","drop","drop","fmt","fmt","from","from","init","init","into","into","into_par_iter","into_par_iter","len","len","opt_len","opt_len","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","with_producer","with_producer"],"q":[[0,"rayon"],[197,"rayon::array"],[219,"rayon::collections"],[226,"rayon::collections::binary_heap"],[290,"rayon::collections::btree_map"],[341,"rayon::collections::btree_set"],[376,"rayon::collections::hash_map"],[443,"rayon::collections::hash_set"],[494,"rayon::collections::linked_list"],[548,"rayon::collections::vec_deque"],[631,"rayon::iter"],[1871,"rayon::iter::plumbing"],[1907,"rayon::option"],[1970,"rayon::prelude"],[1983,"rayon::range"],[2010,"rayon::range_inclusive"],[2037,"rayon::result"],[2100,"rayon::slice"],[2390,"rayon::str"],[2582,"rayon::string"],[2598,"rayon::vec"]],"d":["Provides context to a closure called by <code>broadcast</code>.","Work was found and executed.","Provides the calling context to a closure called by …","No available work was found.","Represents a fork-join scope which can be used to spawn …","Represents a fork-join scope which can be used to spawn …","Thread builder used for customization via …","Represents a user created thread-pool.","Error when initializing a thread pool.","Used to create a new <code>ThreadPool</code> or to configure the global …","Result of <code>yield_now()</code> or <code>yield_local()</code>.","Parallel iterator types for arrays (<code>[T; N]</code>)","","","","","","","","","","","","","","","","","","","<strong>(DEPRECATED)</strong> Suggest to worker threads that they execute …","Executes <code>op</code> within every thread in the current threadpool. …","Executes <code>op</code> within every thread in the threadpool. Any …","Creates a new <code>ThreadPool</code> initialized using this …","Initializes the global thread pool. This initialization is …","Creates a scoped <code>ThreadPool</code> initialized using this …","","","Parallel iterator types for standard collections","Returns the number of threads in the current registry. If …","Returns the (current) number of threads in the thread pool.","Returns true if the current worker thread currently has “…","If called from a Rayon worker thread, returns the index of …","If called from a Rayon worker thread in this thread-pool, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets a callback to be invoked on thread exit.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a “fork-join” scope <code>s</code> and invokes the closure …","Creates a scope that spawns work into this thread-pool.","Creates a “fork-join” scope <code>s</code> with FIFO order, and …","Creates a scope that spawns work into this thread-pool in …","Our index amongst the broadcast threads (ranges from …","Gets the index of this thread in the pool, within …","","","","","","","","","","Executes <code>op</code> within the threadpool. Any attempts to use <code>join</code>…","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Traits for writing parallel programs using an …","Takes two closures and <em>potentially</em> runs them in parallel. …","Execute <code>oper_a</code> and <code>oper_b</code> in the thread-pool and return …","Identical to <code>join</code>, except that the closures have a …","Returns the maximum number of threads that Rayon supports …","Returns <code>true</code> if the closure was called from a different …","Gets the string that was specified by …","Deprecated in favor of <code>ThreadPoolBuilder::build</code>.","Creates and returns a valid rayon thread pool builder, but …","The number of threads receiving the broadcast in the …","Sets the number of threads to be used in the rayon …","Parallel iterator types for options","Normally, whenever Rayon catches a panic, it tries to …","The rayon prelude imports the various <code>ParallelIterator</code> …","Parallel iterator types for ranges, the type for values …","Parallel iterator types for inclusive ranges, the type for …","Parallel iterator types for results","Executes the main loop for this thread. This will not …","Creates a “fork-join” scope <code>s</code> and invokes the closure …","Creates a scope that executes within this thread-pool. …","Creates a “fork-join” scope <code>s</code> with FIFO order, and …","Creates a scope that executes within this thread-pool. …","Parallel iterator types for slices","","Fires off a task into the Rayon threadpool in the “static…","Spawns a job into the fork-join scope <code>self</code>. This job will …","Spawns an asynchronous task in this thread-pool. This task …","Spawns an asynchronous task on every thread in this …","Spawns a job into every thread of the fork-join scope <code>self</code>…","Spawns a job into every thread of the fork-join scope <code>self</code>…","Spawns an asynchronous task on every thread in this …","Fires off a task into the Rayon threadpool in the “static…","Spawns a job into the fork-join scope <code>self</code>. This job will …","Spawns an asynchronous task in this thread-pool. This task …","Sets a custom function for spawning threads.","Gets the value that was specified by …","Sets the stack size of the worker threads","Sets a callback to be invoked on thread start.","Parallel iterator types for strings","This module contains the parallel iterator types for owned …","Sets a closure which takes a thread index and returns the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Use the current thread as one of the threads in the pool.","Parallel iterator types for vectors (<code>Vec&lt;T&gt;</code>)","Cooperatively yields execution to local Rayon work.","Cooperatively yields execution to local Rayon work.","Cooperatively yields execution to Rayon.","Cooperatively yields execution to Rayon.","Parallel iterator that moves out of an array.","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","This module contains the parallel iterator types for heaps …","This module contains the parallel iterator types for …","This module contains the parallel iterator types for …","This module contains the parallel iterator types for hash …","This module contains the parallel iterator types for hash …","This module contains the parallel iterator types for …","This module contains the parallel iterator types for …","Draining parallel iterator that moves out of a binary heap,","Parallel iterator over a binary heap","Parallel iterator over an immutable reference to a binary …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Parallel iterator over a B-Tree map","Parallel iterator over an immutable reference to a B-Tree …","Parallel iterator over a mutable reference to a B-Tree map","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Parallel iterator over a B-Tree set","Parallel iterator over an immutable reference to a B-Tree …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Draining parallel iterator that moves out of a hash map, …","Parallel iterator over a hash map","Parallel iterator over an immutable reference to a hash map","Parallel iterator over a mutable reference to a hash map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Draining parallel iterator that moves out of a hash set, …","Parallel iterator over a hash set","Parallel iterator over an immutable reference to a hash set","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Parallel iterator over a linked list","Parallel iterator over an immutable reference to a linked …","Parallel iterator over a mutable reference to a linked list","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Draining parallel iterator that moves a range out of a …","Parallel iterator over a double-ended queue","Parallel iterator over an immutable reference to a …","Parallel iterator over a mutable reference to a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Chain</code> is an iterator that joins <code>b</code> after <code>a</code> in one …","<code>Chunks</code> is an iterator that groups elements of an …","<code>Cloned</code> is an iterator that clones the elements of an …","<code>Copied</code> is an iterator that copies the elements of an …","The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","Iterator adaptor for the <code>empty()</code> function.","<code>Enumerate</code> is an iterator that returns the current count …","<code>Filter</code> takes a predicate <code>filter_op</code> and filters out …","<code>FilterMap</code> creates an iterator that uses <code>filter_op</code> to both …","<code>FlatMap</code> maps each element to a parallel iterator, then …","<code>FlatMapIter</code> maps each element to a serial iterator, then …","<code>Flatten</code> turns each element to a parallel iterator, then …","<code>FlattenIter</code> turns each element to a serial iterator, then …","<code>Fold</code> is an iterator that applies a function over an …","<code>FoldChunks</code> is an iterator that groups elements of an …","<code>FoldChunksWith</code> is an iterator that groups elements of an …","<code>FoldWith</code> is an iterator that applies a function over an …","<code>FromParallelIterator</code> implements the creation of a …","An iterator that supports “random access” to its data, …","<code>Inspect</code> is an iterator that calls a function with a …","<code>Interleave</code> is an iterator that interleaves elements of …","<code>InterleaveShortest</code> is an iterator that works similarly to …","<code>Intersperse</code> is an iterator that inserts a particular item …","<code>IntoParallelIterator</code> implements the conversion to a …","<code>IntoParallelRefIterator</code> implements the conversion to a …","<code>IntoParallelRefMutIterator</code> implements the conversion to a …","The type of item that the parallel iterator will produce.","The type of item that the parallel iterator will produce. …","The type of item that will be produced; this is typically …","The type of item that this parallel iterator produces. For …","The type of item that the parallel iterator will produce. …","The type of item that the parallel iterator will produce. …","The parallel iterator type that will be created.","The type of the parallel iterator that will be returned.","The type of iterator that will be created.","The draining parallel iterator type that will be created.","The draining parallel iterator type that will be created.","<code>IterBridge</code> is a parallel iterator that wraps a sequential …","A value of type <code>L</code>.","<code>Map</code> is an iterator that transforms the elements of an …","<code>MapInit</code> is an iterator that transforms the elements of an …","<code>MapWith</code> is an iterator that transforms the elements of an …","<code>MaxLen</code> is an iterator that imposes a maximum length on …","<code>MinLen</code> is an iterator that imposes a minimum length on …","<code>MultiZip</code> is an iterator that zips up a tuple of parallel …","Iterator adaptor for the <code>once()</code> function.","<code>PanicFuse</code> is an adaptor that wraps an iterator with a fuse …","Conversion trait to convert an <code>Iterator</code> to a …","<code>ParallelDrainFull</code> creates a parallel iterator that moves …","<code>ParallelDrainRange</code> creates a parallel iterator that moves …","<code>ParallelExtend</code> extends an existing collection with items …","Parallel version of the standard iterator trait.","<code>Positions</code> takes a predicate <code>predicate</code> and filters out …","Iterator adaptor for the <code>repeat()</code> function.","Iterator adaptor for the <code>repeatn()</code> function.","<code>Rev</code> is an iterator that produces elements in reverse …","A value of type <code>R</code>.","<code>Skip</code> is an iterator that skips over the first <code>n</code> elements. …","<code>SkipAny</code> is an iterator that skips over <code>n</code> elements from …","<code>SkipAnyWhile</code> is an iterator that skips over elements from …","<code>Split</code> is a parallel iterator using arbitrary data and a …","<code>StepBy</code> is an iterator that skips <code>n</code> elements between each …","<code>Take</code> is an iterator that iterates over the first <code>n</code> …","<code>TakeAny</code> is an iterator that iterates over <code>n</code> elements from …","<code>TakeAnyWhile</code> is an iterator that iterates over elements …","<code>TryFold</code> is an iterator that applies a function over an …","<code>TryFoldWith</code> is an iterator that applies a function over an …","<code>Update</code> is an iterator that mutates the elements of an …","<code>WhileSome</code> is an iterator that yields the <code>Some</code> elements of …","<code>Zip</code> is an iterator that zips up <code>a</code> and <code>b</code> into a single …","An <code>IndexedParallelIterator</code> that iterates over two parallel …","","Tests that every item in the parallel iterator matches the …","","Searches for <strong>some</strong> item in the parallel iterator that …","Convert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.","","","","Convert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …","Convert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …","","Convert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Takes two iterators and creates a new iterator over both.","Splits an iterator up into fixed-size chunks.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an iterator which clones all of its elements.  …","","Lexicographically compares the elements of this …","","Creates a fresh collection containing all the elements …","Collects the results of the iterator into the specified …","Creates an iterator which copies all of its elements.  …","","Counts the number of items in this parallel iterator.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Internal method used to define the behavior of this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Internal method used to define the behavior of this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Apply one of two functions depending on contents, unifying …","Convert the contained value into <code>T</code>","Like <code>either</code>, but provide some context to whichever of the …","Creates a parallel iterator that produces nothing.","Yields an index along with each item.","","Determines if the elements of this <code>ParallelIterator</code> are …","","Returns the left value","Returns the right value","","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Factors out <code>None</code> from an <code>Either</code> of <code>Option</code>.","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Applies <code>filter_op</code> to each item of this iterator, producing …","Applies <code>filter_op</code> to each item of this iterator to get an …","","Searches for <strong>some</strong> item in the parallel iterator that …","Searches for the sequentially <strong>first</strong> item in the parallel …","Searches for the sequentially <strong>last</strong> item in the parallel …","","Applies the given predicate to the items in the parallel …","Applies the given predicate to the items in the parallel …","Applies the given predicate to the items in the parallel …","Applies <code>map_op</code> to each item of this iterator to get nested …","Applies <code>map_op</code> to each item of this iterator to get nested …","An adaptor that flattens parallel-iterable <code>Item</code>s into one …","An adaptor that flattens serial-iterable <code>Item</code>s into one …","Convert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parallel fold is similar to sequential fold except that the","Splits an iterator into fixed-size chunks, performing a …","Splits an iterator into fixed-size chunks, performing a …","Applies <code>fold_op</code> to the given <code>init</code> value with each item of …","","Executes <code>OP</code> on each item produced by the iterator, in …","Executes <code>OP</code> on a value returned by <code>init</code> with each item …","Executes <code>OP</code> on the given <code>init</code> value with each item …","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates an instance of the collection from the parallel …","Determines if the elements of this <code>ParallelIterator</code> are …","Determines if the elements of this <code>ParallelIterator</code> are …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Applies <code>inspect_op</code> to a reference to each item of this …","Interleaves elements of this iterator and the other given …","Interleaves elements of this iterator and the other given …","Intersperses clones of an element between items of this …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Extract the value of an either over two equivalent types.","","Convert the inner value to an iterator.","Converts <code>self</code> into a parallel iterator.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return true if the value is the <code>Left</code> variant.","Return true if the value is the <code>Right</code> variant.","","Determines if the elements of this <code>ParallelIterator</code> are …","Convert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","Produces an exact count of how many items this iterator …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Determines if the elements of this <code>ParallelIterator</code> are …","Map <code>f</code> over the contained value and return the result in the","Applies <code>map_op</code> to each item of this iterator, producing a …","Apply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …","Similar to [<code>map_either</code>], with an added context <code>ctx</code> …","Applies <code>map_op</code> to a value returned by <code>init</code> with each item …","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Applies <code>map_op</code> to the given <code>init</code> value with each item of …","Computes the maximum of all the items in the iterator. If …","Computes the maximum of all the items in the iterator with …","Computes the item that yields the maximum value for the …","Computes the minimum of all the items in the iterator. If …","Computes the minimum of all the items in the iterator with …","Computes the item that yields the minimum value for the …","Determines if the elements of this <code>ParallelIterator</code> are …","","","","Creates a parallel iterator that produces an element …","","","Internal method used to define the behavior of this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wraps an iterator with a fuse in case of panics, to halt …","Creates a bridge from this type to a <code>ParallelIterator</code>.","Returns a draining parallel iterator over an entire …","Returns a draining parallel iterator over a range of the …","Extends an instance of the collection with the elements …","","Converts <code>self</code> into a parallel iterator.","Creates the parallel iterator from <code>self</code>.","","Lexicographically compares the elements of this …","","Partitions the items of a parallel iterator into a pair of …","Partitions and maps the items of a parallel iterator into …","Traits and functions used to implement parallel iteration. …","","","Searches for <strong>some</strong> item in the parallel iterator that …","Searches for the sequentially <strong>first</strong> item in the parallel …","Searches for the sequentially <strong>last</strong> item in the parallel …","Searches for items in the parallel iterator that match the …","Multiplies all the items in the iterator.","Reduces the items in the iterator into one item using <code>op</code>. …","Reduces the items in the iterator into one item using <code>op</code>. …","Creates a parallel iterator that endlessly repeats <code>elt</code> (by …","Creates a parallel iterator that produces <code>n</code> repeats of <code>elt</code> …","Produces a new iterator with the elements of this iterator …","","","Convert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","","Creates an iterator that skips the first <code>n</code> elements.","Creates an iterator that skips <code>n</code> elements from <em>anywhere</em> in …","Creates an iterator that skips elements from <em>anywhere</em> in …","The <code>split</code> function takes arbitrary data and a closure that …","Creates an iterator that steps by the given amount","Sums up the items in the iterator.","Creates an iterator that yields the first <code>n</code> elements.","Takes only <code>n</code> repeats of the element, similar to the general","Creates an iterator that yields <code>n</code> elements from <em>anywhere</em> …","Creates an iterator that takes elements from <em>anywhere</em> in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs a fallible parallel fold.","Performs a fallible parallel fold with a cloneable <code>init</code> …","Executes a fallible <code>OP</code> on each item produced by the …","Executes a fallible <code>OP</code> on a value returned by <code>init</code> with …","Executes a fallible <code>OP</code> on the given <code>init</code> value with each …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reduces the items in the iterator into one item using a …","Reduces the items in the iterator into one item using a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the left value","Returns the right value","Unzips the items of a parallel iterator into a pair of …","Unzips the results of the iterator into the specified …","Mutates each item of this iterator before yielding it.","Creates an iterator over the <code>Some</code> items of this iterator, …","Sets the maximum length of iterators desired to process in …","Sets the minimum length of iterators desired to process in …","Internal method used to define the behavior of this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Iterates over tuples <code>(A, B)</code>, where the items <code>A</code> are from …","Iterates tuples, repeating the element with items from …","The same as <code>Zip</code>, but requires that both iterators have the …","A consumer is effectively a generalized “fold” …","The <code>Folder</code> trait encapsulates the standard fold operation. …","The type of folder that this consumer can be converted …","The type of iterator we will become.","The type of item that will be produced by this producer …","The type of item returned by this producer.","The type of value returned by this callback. Analogous to …","A <code>Producer</code> is effectively a “splittable <code>IntoIterator</code>”. …","The <code>ProducerCallback</code> trait is a kind of generic closure, …","The reducer is the final step of a <code>Consumer</code> – after a …","The type of reducer that is produced if this consumer is …","The type of result that this consumer will ultimately …","The type of result that will ultimately be produced by the …","A stateless consumer can be freely copied. These consumers …","A variant on <code>Producer</code> which does not know its exact length …","This helper function is used to “connect” a parallel …","This helper function is used to “connect” a producer …","A variant of <code>bridge_producer_consumer</code> where the producer …","Invokes the callback with the given producer as argument. …","Finish consuming items, produce final result.","Consume next item and return new sequential state.","Consume items from the iterator until full, and return new …","Iterate the producer, feeding each element to <code>folder</code>, and …","Iterate the producer, feeding each element to <code>folder</code>, and …","Hint whether this <code>Consumer</code> would like to stop processing …","Hint whether this <code>Folder</code> would like to stop processing …","Convert the consumer into a folder that can consume items …","Convert <code>self</code> into an iterator; at this point, no more …","The maximum number of items that we will process …","The minimum number of items that we will process …","Reduce two final results into one; this is executed after a","Split midway into a new producer if possible, otherwise …","Split into two producers; one produces items <code>0..index</code>, the …","Divide the consumer into two consumers, one processing …","Splits off a “left” consumer and returns it. The <code>self</code> …","Creates a reducer that can be used to combine the results …","A parallel iterator over the value in <code>Some</code> variant of an …","A parallel iterator over a reference to the <code>Some</code> variant …","A parallel iterator over a mutable reference to the <code>Some</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parallel iterator over a range, implemented for all …","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Parallel iterator over an inclusive range, implemented for …","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Parallel iterator over a result","Parallel iterator over an immutable reference to a result","Parallel iterator over a mutable reference to a result","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Parallel iterator over immutable non-overlapping chunks of …","Parallel iterator over immutable non-overlapping chunks of …","Parallel iterator over mutable non-overlapping chunks of a …","Parallel iterator over mutable non-overlapping chunks of a …","Parallel iterator over immutable items in a slice","Parallel iterator over mutable items in a slice","Parallel extensions for slices.","Parallel extensions for mutable slices.","Parallel iterator over immutable non-overlapping chunks of …","Parallel iterator over immutable non-overlapping chunks of …","Parallel iterator over mutable non-overlapping chunks of a …","Parallel iterator over mutable non-overlapping chunks of a …","Parallel iterator over slices separated by a predicate","Parallel iterator over mutable slices separated by a …","Parallel iterator over immutable overlapping windows of a …","Returns a plain slice, which is used to implement the rest …","Returns a plain mutable slice, which is used to implement …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Return the remainder of the original slice that is not …","Return the remainder of the original slice that is not …","","","","","","","","","","","","","","","","","","","","","","","Returns a parallel iterator over at most <code>chunk_size</code> …","Returns a parallel iterator over <code>chunk_size</code> elements of …","Returns a parallel iterator over <code>chunk_size</code> elements of …","Returns a parallel iterator over at most <code>chunk_size</code> …","Returns a parallel iterator over at most <code>chunk_size</code> …","Returns a parallel iterator over <code>chunk_size</code> elements of …","Returns a parallel iterator over <code>chunk_size</code> elements of …","Returns a parallel iterator over at most <code>chunk_size</code> …","Sorts the slice in parallel.","Sorts the slice in parallel with a comparator function.","Sorts the slice in parallel with a key extraction function.","Sorts the slice in parallel with a key extraction function.","Sorts the slice in parallel, but might not preserve the …","Sorts the slice in parallel with a comparator function, …","Sorts the slice in parallel with a key extraction …","Returns a parallel iterator over subslices separated by …","Returns a parallel iterator over mutable subslices …","Returns a parallel iterator over all contiguous windows of …","Return the remainder of the original slice that is not …","Return the remainder of the original slice that is not …","Return the remainder of the original slice that is not …","Return the remainder of the original slice that is not …","Return the remainder of the original slice that is not …","Return the remainder of the original slice that is not …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parallel iterator over the bytes of a string","Parallel iterator over the characters of a string, with …","Parallel iterator over the characters of a string","Parallel iterator over a string encoded as UTF-16","Parallel iterator over lines in a string","Parallel iterator over substrings that match a pattern, …","Parallel iterator over substrings that match a pattern","Parallel extensions for strings.","Parallel iterator over substrings separated by a pattern","Parallel iterator over substrings separated by a …","Parallel iterator over substrings separated by whitespace","Returns a plain string slice, which is used to implement …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns a parallel iterator over the bytes of a string.","Returns a parallel iterator over the characters of a …","Returns a parallel iterator over the characters of a …","Returns a parallel iterator over a string encoded as …","Returns a parallel iterator over the lines of a string, …","Returns a parallel iterator over substrings that match a …","Returns a parallel iterator over substrings that match a …","Returns a parallel iterator over substrings separated by a …","Returns a parallel iterator over substrings terminated by a","Returns a parallel iterator over the sub-slices of a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Draining parallel iterator that moves a range of …","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Draining parallel iterator that moves a range out of a …","Parallel iterator that moves out of a vector.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,13,0,13,0,0,0,0,0,0,0,0,18,21,22,23,7,1,13,9,24,18,21,22,23,7,1,13,9,24,1,0,7,1,1,1,13,13,0,0,7,7,0,7,1,18,21,22,23,7,1,13,9,24,18,21,22,23,7,1,13,9,24,9,18,21,22,23,7,7,1,13,9,24,13,13,1,18,21,22,23,7,1,13,9,9,24,18,21,22,23,7,1,13,9,24,0,7,0,7,18,21,18,21,22,23,7,1,13,9,24,7,18,21,22,23,7,1,13,9,24,0,0,7,0,0,24,21,7,1,18,1,0,1,0,0,0,0,21,0,7,0,7,0,9,0,22,7,0,22,23,7,0,23,7,1,21,1,1,0,0,1,13,9,18,21,22,23,7,1,13,9,24,18,21,22,23,7,1,13,9,24,18,21,22,23,7,1,13,9,24,1,0,0,7,0,7,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,0,0,0,0,0,0,0,0,0,0,40,41,42,40,41,42,40,41,40,41,40,41,42,40,41,42,40,41,42,40,41,42,40,41,42,42,40,41,42,40,41,42,40,41,42,40,41,42,40,41,42,40,41,42,40,41,42,40,41,40,41,42,40,41,42,40,41,42,40,41,42,0,0,0,44,43,45,44,43,45,43,43,44,43,45,44,43,45,44,43,45,44,43,45,44,43,45,44,43,45,44,43,45,44,43,45,44,43,45,44,43,45,43,44,43,45,44,43,45,44,43,45,0,0,47,46,47,46,46,46,47,46,47,46,47,46,47,46,47,46,47,46,47,46,47,46,47,46,47,46,46,47,46,47,46,47,46,0,0,0,0,51,50,52,53,51,50,52,53,50,50,51,50,52,53,51,50,52,53,51,50,52,53,51,50,52,53,51,50,52,53,51,50,52,53,51,50,52,53,51,50,52,53,51,50,52,53,51,50,52,53,50,51,50,52,53,51,50,52,53,51,50,52,53,0,0,0,55,54,56,55,54,56,54,54,55,54,56,55,54,56,55,54,56,55,54,56,55,54,56,55,54,56,55,54,56,55,54,56,55,54,56,55,54,56,54,55,54,56,55,54,56,55,54,56,0,0,0,57,58,59,57,58,59,57,58,57,58,57,58,59,57,58,59,57,58,59,57,58,59,57,58,59,57,58,59,57,58,59,57,58,59,57,58,59,57,58,59,57,58,57,58,59,57,58,59,57,58,59,0,0,0,0,60,61,62,63,60,61,62,63,60,61,60,61,60,61,62,63,60,61,62,63,60,61,62,63,60,61,62,63,60,61,62,63,63,60,61,62,63,60,61,62,63,60,61,62,63,60,61,62,63,60,61,62,63,60,61,62,63,60,61,62,63,60,61,60,61,62,63,60,61,62,63,60,61,62,63,60,61,62,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,180,181,74,182,183,70,180,181,182,183,0,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,74,65,74,65,65,65,65,65,65,65,65,65,65,65,73,71,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,65,73,71,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,74,75,65,73,71,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,65,65,73,71,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,74,65,75,65,74,75,74,65,74,65,65,73,71,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,65,65,73,71,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,75,65,73,71,72,76,77,78,87,88,89,90,91,92,93,94,95,96,97,98,98,98,98,98,98,98,98,98,98,98,98,99,100,104,105,106,110,111,116,118,119,74,65,73,71,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,98,98,98,98,98,98,98,98,98,98,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,65,73,71,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,65,65,65,0,75,65,75,65,65,65,65,65,65,65,65,65,74,74,65,74,74,74,65,74,74,74,74,74,74,74,65,65,65,73,71,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,65,74,75,75,74,65,74,74,74,65,65,73,71,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,122,75,75,65,65,73,71,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,74,75,75,74,65,65,73,71,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,65,65,65,65,70,65,73,71,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,65,65,65,75,65,65,65,65,65,75,65,65,73,71,72,76,77,78,87,88,89,90,91,92,93,94,95,96,97,98,98,98,98,98,98,98,98,98,98,98,98,99,100,104,105,106,110,111,116,118,119,75,65,74,65,65,74,65,65,74,74,74,74,74,74,74,75,65,65,65,0,65,73,74,71,72,76,77,78,87,88,89,90,91,92,93,94,95,96,97,98,98,98,98,98,98,98,98,98,98,98,98,99,100,104,105,106,110,111,116,118,119,74,184,182,183,135,65,180,181,65,75,65,74,74,0,65,65,75,75,75,75,74,74,74,0,0,75,65,65,65,65,65,65,65,65,75,74,74,0,75,74,75,103,74,74,65,73,71,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,65,74,74,74,74,74,65,73,71,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,65,73,71,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,74,74,65,73,71,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,65,65,74,75,74,74,75,75,75,65,73,71,72,76,77,78,87,88,89,90,91,92,93,94,95,96,97,98,98,98,98,98,98,98,98,98,98,98,98,99,100,104,105,106,110,111,116,118,119,75,103,75,0,0,34,142,142,143,38,0,0,0,34,34,144,0,0,0,0,0,38,144,144,144,143,142,34,144,34,142,142,142,185,143,142,34,35,35,0,0,0,145,146,147,145,146,147,145,146,145,146,145,146,147,145,146,147,145,146,147,145,146,147,145,146,147,145,146,147,145,146,147,145,146,147,145,146,147,145,146,147,145,146,147,145,146,147,145,146,145,146,147,145,146,147,145,146,147,145,146,147,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,0,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,0,0,0,151,152,153,151,152,153,151,152,151,152,151,152,153,151,152,153,151,152,153,151,152,153,151,152,153,151,152,153,151,152,153,151,152,153,151,152,153,151,152,153,151,152,153,151,152,153,151,152,151,152,153,151,152,153,151,152,153,151,152,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,187,154,166,155,156,161,162,157,158,163,164,159,160,165,154,166,155,156,161,162,157,158,163,164,159,160,165,154,155,156,157,158,159,160,154,155,156,157,158,159,160,154,166,155,156,161,162,157,158,163,164,159,160,165,154,166,155,156,161,162,157,158,163,164,159,160,165,155,156,161,162,157,158,163,164,159,160,165,154,166,155,156,161,162,157,158,163,164,159,160,165,154,166,155,156,161,162,157,158,163,164,159,160,165,154,166,155,156,161,162,157,158,163,164,159,160,165,154,166,155,156,161,162,157,158,163,164,159,160,165,154,166,155,156,161,162,157,158,163,164,159,160,165,154,166,155,156,161,162,157,158,163,164,159,160,165,154,166,155,156,161,162,157,158,163,164,159,160,165,162,164,155,156,161,162,157,158,163,164,159,160,165,155,156,161,162,157,158,163,164,159,160,165,186,186,187,187,186,186,187,187,187,187,187,187,187,187,187,186,187,186,156,162,158,164,162,164,154,155,156,157,158,159,160,154,166,155,156,161,162,157,158,163,164,159,160,165,154,166,155,156,161,162,157,158,163,164,159,160,165,154,166,155,156,161,162,157,158,163,164,159,160,165,155,156,161,162,157,158,163,164,159,160,165,0,0,0,0,0,0,0,0,0,0,0,188,167,168,169,170,171,172,173,174,175,176,167,168,169,170,171,172,173,174,175,176,167,168,169,170,171,172,173,174,175,176,167,168,169,170,171,172,173,174,175,176,167,168,169,170,171,172,173,174,175,176,167,168,169,170,171,172,173,174,175,176,167,168,169,170,171,172,173,174,175,176,167,168,169,170,171,172,173,174,175,176,167,168,169,170,171,172,173,174,175,176,167,168,169,170,171,172,173,174,175,176,167,168,169,170,171,172,173,174,175,176,167,168,169,170,171,172,173,174,175,176,167,168,169,170,171,172,173,174,175,176,188,188,188,188,188,188,188,188,188,188,167,168,169,170,171,172,173,174,175,176,167,168,169,170,171,172,173,174,175,176,167,168,169,170,171,172,173,174,175,176,167,168,169,170,171,172,173,174,175,176,0,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,0,0,178,179,178,179,178,178,178,179,178,179,178,179,178,179,178,179,179,178,179,178,179,178,179,178,179,178,179,178,179,178,179,178,178,179,178,179,178,179,178,179],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[[[0,[2,3]]],[[6,[4,5]]]],[[7,[0,[2,3]]],[[6,[4,5]]]],[[[1,[8]]],[[10,[7,9]]]],[[[1,[8]]],[[10,[9]]]],[[[1,[11]],[0,[2,3]],12],[[10,[9]]]],[13,13],[[]],0,[[],14],[7,14],[7,[[16,[15]]]],[[],[[16,[14]]]],[7,[[16,[14]]]],[[],[[1,[11]]]],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[9,17],[14],[14],[14],[14],[7],[14],[14],[14],[14],[14],[[13,13],15],[[],15],[[1,[0,[2,4,3]]],1],[[18,19],[[10,[20]]]],[[21,19],[[10,[20]]]],[[22,19],[[10,[20]]]],[[23,19],[[10,[20]]]],[[7,19],[[10,[20]]]],[[1,19],[[10,[20]]]],[[13,19],[[10,[20]]]],[[9,19],[[10,[20]]]],[[9,19],[[10,[20]]]],[[24,19],[[10,[20]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[12],[[7,12]],[12],[[7,12]],[18,14],[21,14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[7,[0,[12,4]]],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[0,[12,4]],[0,[12,4]]]],[[7,[0,[12,4]],[0,[12,4]]]],[[[0,[12,4]],[0,[12,4]]]],[[],14],[24,15],[21,[[16,[17]]]],[25,[[10,[7,[27,[26,5]]]]]],[[],[[1,[11]]]],[18,14],[[1,14],1],0,[[1,[0,[2,4,3]]],1],0,0,0,0,[21],[[[0,[12,4]]],4],[[7,[0,[12,4]]],4],[[[0,[12,4]]],4],[[7,[0,[12,4]]],4],0,[9,[[16,[26]]]],[[[0,[12,4]]]],[[22,[0,[12,4]]]],[[7,[0,[12,4]]]],[[[0,[2,4,3]]]],[[22,[0,[2,4,3]]]],[[23,[0,[2,4,3]]]],[[7,[0,[2,4,3]]]],[[[0,[12,4]]]],[[23,[0,[12,4]]]],[[7,[0,[12,4]]]],[[1,28],[[1,[[29,[28]]]]]],[21,[[16,[14]]]],[[1,14],1],[[1,[0,[2,4,3]]],1],0,0,[[1,28],1],[[]],[[],30],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[1,1],0,[[],[[16,[13]]]],[7,[[16,[13]]]],[[],[[16,[13]]]],[7,[[16,[13]]]],0,[[]],[[]],[[[33,[[0,[32,4]]]]],[[33,[[0,[32,4]]]]]],[[]],[14],[14],[[[33,[4]],34]],[[[33,[4]],35]],[14],[[[33,[[0,[36,4]]]],19],37],[[]],[[],14],[[]],[[]],[[[33,[4]]],14],[[[33,[4]]],[[16,[14]]]],[[]],[[],10],[[],10],[[],31],[[[33,[4]],38]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[40,[[0,[32,39,4]]]]],[[40,[[0,[32,39,4]]]]]],[[[41,[[0,[39,3]]]]],[[41,[[0,[39,3]]]]]],[[]],[[]],[14],[14],[14],[14],[14],[14],[[[40,[[0,[39,4]]]],34]],[[[41,[[0,[39,3]]]],34]],[[[42,[[0,[39,4]]]],34]],[[[40,[[0,[39,4]]]],35]],[[[41,[[0,[39,3]]]],35]],[[[42,[[0,[39,4]]]],35]],[14],[14],[14],[[[42,[[0,[39,4]]]]]],[[[40,[[0,[36,39,4]]]],19],37],[[[41,[[0,[36,39,3]]]],19],37],[[[42,[[0,[36,39,4]]]],19],37],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[]],[[]],[[]],[[]],[[]],[[]],[[[40,[[0,[39,4]]]]],14],[[[41,[[0,[39,3]]]]],14],[[[42,[[0,[39,4]]]]],14],[[[40,[[0,[39,4]]]]],[[16,[14]]]],[[[41,[[0,[39,3]]]]],[[16,[14]]]],[[[42,[[0,[39,4]]]]],[[16,[14]]]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],31],[[],31],[[],31],[[[40,[[0,[39,4]]]],38]],[[[41,[[0,[39,3]]]],38]],[[[42,[[0,[39,4]]]],38]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[43,[[0,[39,3]],3]]],[[43,[[0,[39,3]],3]]]],[[]],[14],[14],[14],[14],[14],[14],[[[44,[[0,[39,4]],4]],35]],[[[43,[[0,[39,3]],3]],35]],[[[45,[[0,[39,3]],4]],35]],[14],[14],[14],[[[44,[[0,[36,39,4]],[0,[36,4]]]],19],37],[[[43,[[0,[36,39,3]],[0,[36,3]]]],19],37],[[[45,[[0,[36,39,3]],[0,[36,4]]]],19],37],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[]],[[]],[[]],[[]],[[]],[[]],[[[44,[[0,[39,4]],4]]],[[16,[14]]]],[[[43,[[0,[39,3]],3]]],[[16,[14]]]],[[[45,[[0,[39,3]],4]]],[[16,[14]]]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],31],[[],31],[[],31],0,0,[[]],[[]],[[]],[[]],[[[46,[[0,[39,3]]]]],[[46,[[0,[39,3]]]]]],[[]],[14],[14],[14],[14],[[[47,[[0,[39,4]]]],35]],[[[46,[[0,[39,3]]]],35]],[14],[14],[[[47,[[0,[36,39,4]]]],19],37],[[[46,[[0,[36,39,3]]]],19],37],[[]],[[]],[[],14],[[],14],[[]],[[]],[[]],[[]],[[[47,[[0,[39,4]]]]],[[16,[14]]]],[[[46,[[0,[39,3]]]]],[[16,[14]]]],[[]],[[],10],[[],10],[[],10],[[],10],[[],31],[[],31],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[50,[[0,[48,49,3]],3]]],[[50,[[0,[48,49,3]],3]]]],[[]],[14],[14],[14],[14],[14],[14],[14],[14],[[[51,[[0,[48,49,4]],4]],35]],[[[50,[[0,[48,49,3]],3]],35]],[[[52,[[0,[48,49,3]],4]],35]],[[[53,[[0,[48,49,4]],4]],35]],[14],[14],[14],[14],[[[51,[[0,[36,48,49,4]],[0,[36,4]]]],19],37],[[[50,[[0,[36,48,49,3]],[0,[36,3]]]],19],37],[[[52,[[0,[36,48,49,3]],[0,[36,4]]]],19],37],[[[53,[[0,[36,48,49,4]],[0,[36,4]]]],19],37],[[]],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[51,[[0,[48,49,4]],4]]],[[16,[14]]]],[[[50,[[0,[48,49,3]],3]]],[[16,[14]]]],[[[52,[[0,[48,49,3]],4]]],[[16,[14]]]],[[[53,[[0,[48,49,4]],4]]],[[16,[14]]]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],31],[[],31],[[],31],[[],31],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[54,[[0,[48,49,3]]]]],[[54,[[0,[48,49,3]]]]]],[[]],[14],[14],[14],[14],[14],[14],[[[55,[[0,[48,49,4]]]],35]],[[[54,[[0,[48,49,3]]]],35]],[[[56,[[0,[48,49,4]]]],35]],[14],[14],[14],[[[55,[[0,[36,48,49,4]]]],19],37],[[[54,[[0,[36,48,49,3]]]],19],37],[[[56,[[0,[36,48,49,4]]]],19],37],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[]],[[]],[[]],[[]],[[]],[[]],[[[55,[[0,[48,49,4]]]]],[[16,[14]]]],[[[54,[[0,[48,49,3]]]]],[[16,[14]]]],[[[56,[[0,[48,49,4]]]]],[[16,[14]]]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],31],[[],31],[[],31],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[57,[[0,[32,4]]]]],[[57,[[0,[32,4]]]]]],[[[58,[3]]],[[58,[3]]]],[[]],[[]],[14],[14],[14],[14],[14],[14],[[[57,[4]],35]],[[[58,[3]],35]],[[[59,[4]],35]],[14],[14],[14],[[[57,[[0,[36,4]]]],19],37],[[[58,[[0,[36,3]]]],19],37],[[[59,[[0,[36,4]]]],19],37],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[]],[[]],[[]],[[]],[[]],[[]],[[[57,[4]]],[[16,[14]]]],[[[58,[3]]],[[16,[14]]]],[[[59,[4]]],[[16,[14]]]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],31],[[],31],[[],31],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[60,[[0,[32,4]]]]],[[60,[[0,[32,4]]]]]],[[[61,[3]]],[[61,[3]]]],[[]],[[]],[14],[14],[14],[14],[14],[14],[14],[14],[[[60,[4]],34]],[[[61,[3]],34]],[[[62,[4]],34]],[[[63,[4]],34]],[[[60,[4]],35]],[[[61,[3]],35]],[[[62,[4]],35]],[[[63,[4]],35]],[14],[14],[14],[[[63,[4]]]],[14],[[[60,[[0,[36,4]]]],19],37],[[[61,[[0,[36,3]]]],19],37],[[[62,[[0,[36,4]]]],19],37],[[[63,[[0,[36,4]]]],19],37],[[]],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[60,[4]]],14],[[[61,[3]]],14],[[[62,[4]]],14],[[[63,[4]]],14],[[[60,[4]]],[[16,[14]]]],[[[61,[3]]],[[16,[14]]]],[[[62,[4]]],[[16,[14]]]],[[[63,[4]]],[[16,[14]]]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],31],[[],31],[[],31],[[],31],[[[60,[4]],38]],[[[61,[3]],38]],[[[62,[4]],38]],[[[63,[4]],38]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[65,[64,64]],28],15],[[[0,[2,3,4]]],15],[[[65,[64,64]],28],15],[[[0,[2,3,4]]],15],[65,65],[[[65,[[67,[66]],[67,[66]]]]],66],[[[65,[[67,[17]],[67,[17]]]]],17],[[[65,[67,67]]]],[[[68,[65]]],[[65,[68,68]]]],[[[68,[65]]],[[65,[68,68]]]],[[[65,[[69,[66]],[69,[66]]]]],66],[65,65],[[[65,[69,69]]]],[[[65,[[69,[17]],[69,[17]]]]],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[70,71],[14,72],[[[65,[32,32]]],[[65,[32,32]]]],[[[73,[4]]],[[73,[4]]]],[[[71,[[0,[74,32]],[0,[74,32]]]]],[[71,[[0,[74,32]],[0,[74,32]]]]]],[[[72,[[0,[75,32]]]]],[[72,[[0,[75,32]]]]]],[[[76,[[0,[32,74]]]]],[[76,[[0,[32,74]]]]]],[[[77,[[0,[32,74]]]]],[[77,[[0,[32,74]]]]]],[[[78,[[0,[32,75]]]]],[[78,[[0,[32,75]]]]]],[[[79,[[0,[32,74]],32]]],[[79,[[0,[32,74]],32]]]],[[[80,[[0,[32,74]],32]]],[[80,[[0,[32,74]],32]]]],[[[81,[[0,[32,74]],32]]],[[81,[[0,[32,74]],32]]]],[[[82,[[0,[32,74]],32]]],[[82,[[0,[32,74]],32]]]],[[[83,[[0,[32,74]]]]],[[83,[[0,[32,74]]]]]],[[[84,[[0,[32,74]]]]],[[84,[[0,[32,74]]]]]],[[[85,[32,32,32]]],[[85,[32,32,32]]]],[[[86,[32,32,32]]],[[86,[32,32,32]]]],[[[87,[[0,[75,32]],32,32]]],[[87,[[0,[75,32]],32,32]]]],[[[88,[[0,[75,32]],32,32]]],[[88,[[0,[75,32]],32,32]]]],[[[89,[[0,[32,74]],32]]],[[89,[[0,[32,74]],32]]]],[[[90,[[0,[75,32]],[0,[75,32]]]]],[[90,[[0,[75,32]],[0,[75,32]]]]]],[[[91,[[0,[75,32]],[0,[75,32]]]]],[[91,[[0,[75,32]],[0,[75,32]]]]]],[[[92,[[0,[74,32]]]]],[[92,[[0,[74,32]]]]]],[[[93,[[0,[32,75]]]]],[[93,[[0,[32,75]]]]]],[[[94,[[0,[32,75]]]]],[[94,[[0,[32,75]]]]]],[[[95,[[0,[32,74]],32]]],[[95,[[0,[32,74]],32]]]],[[[96,[[0,[32,74]],32,32]]],[[96,[[0,[32,74]],32,32]]]],[[[97,[[0,[32,74]],32,32]]],[[97,[[0,[32,74]],32,32]]]],[[[98,[32]]],[[98,[32]]]],[[[99,[[0,[32,4]]]]],[[99,[[0,[32,4]]]]]],[[[100,[[0,[32,74]]]]],[[100,[[0,[32,74]]]]]],[[[101,[32]]],[[101,[32]]]],[[[102,[[0,[32,75]],32]]],[[102,[[0,[32,75]],32]]]],[[[103,[[0,[32,32,4]]]]],[[103,[[0,[32,32,4]]]]]],[[[104,[[0,[32,32,4]]]]],[[104,[[0,[32,32,4]]]]]],[[[105,[[0,[32,75]]]]],[[105,[[0,[32,75]]]]]],[[[106,[32]]],[[106,[32]]]],[[[107,[[0,[32,74]]]]],[[107,[[0,[32,74]]]]]],[[[108,[[0,[32,74]],32]]],[[108,[[0,[32,74]],32]]]],[[[109,[32,32]]],[[109,[32,32]]]],[[[110,[[0,[32,75]]]]],[[110,[[0,[32,75]]]]]],[[[111,[32]]],[[111,[32]]]],[[[112,[[0,[32,74]]]]],[[112,[[0,[32,74]]]]]],[[[113,[[0,[32,74]],32]]],[[113,[[0,[32,74]],32]]]],[[[114,[32,32,32,32]]],[[114,[32,32,32,32]]]],[[[115,[32,[0,[32,0]],32]]],[[115,[32,[0,[32,0]],32]]]],[[[116,[[0,[32,74]],32]]],[[116,[[0,[32,74]],32]]]],[[[117,[[0,[32,74]]]]],[[117,[[0,[32,74]]]]]],[[[118,[[0,[32,75]],[0,[32,75]]]]],[[118,[[0,[32,75]],[0,[32,75]]]]]],[[[119,[[0,[32,75]],[0,[32,75]]]]],[[119,[[0,[32,75]],[0,[32,75]]]]]],[[[65,[32,32]],[65,[32,32]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[74,[[76,[74]]]],[[[65,[39,39]],[65,[39,39]]],120],[70,120],[[[65,[64,64]]],121],[[],122],[6],[74,[[77,[74]]]],[[[65,[64,64]]],14],[[],14],[[[65,[123,123]]]],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[[[65,[124,124]]]],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[34],[[[65,[75,75]],34]],[[[73,[4]],34]],[[[71,[75,75]],34]],[[[72,[75]],34]],[[[76,[75]],34]],[[[77,[75]],34]],[[[78,[75]],34]],[[[87,[75,[0,[2,4,3]],[0,[2,4,3]]]],34]],[[[88,[75,[0,[4,32]],[0,[2,4,3]]]],34]],[[[89,[75,[0,[2,3,4]]]],34]],[[[90,[75,75]],34]],[[[91,[75,75]],34]],[[[92,[75]],34]],[[[93,[75]],34]],[[[94,[75]],34]],[[[95,[75,[0,[2,3,4]]]],34]],[[[96,[75,[0,[4,32]],[0,[2,3,4]]]],34]],[[[97,[75,[0,[2,3,4]],[0,[2,3,4]]]],34]],[[98,34]],[[98,34]],[[98,34]],[[98,34]],[[98,34]],[[98,34]],[[98,34]],[[98,34]],[[98,34]],[[98,34]],[[98,34]],[[98,34]],[[[99,[4]],34]],[[[100,[75]],34]],[[[104,[[0,[32,4]]]],34]],[[[105,[75]],34]],[[[106,[75]],34]],[[[110,[75]],34]],[[[111,[75]],34]],[[[116,[75,[0,[2,4,3]]]],34]],[[[118,[75,75]],34]],[[[119,[75,75]],34]],[35],[[[65,[74,74]],35]],[[[73,[4]],35]],[[[71,[74,74]],35]],[[[72,[75]],[34,[6]]]],[[[76,[74]],35]],[[[77,[74]],35]],[[[78,[75]],35]],[[[79,[74,[0,[2,3,4]]]],35]],[[[80,[74,[0,[2,3,4]]]],35]],[[[81,[74,[0,[2,3,4]]]],35]],[[[82,[74,[0,[2,3,4]]]],35]],[[[83,[74]],35]],[[[84,[74]],35]],[[[85,[74,[0,[2,3,4]],[0,[2,3,4]]]],35]],[[[86,[74,[0,[4,32]],[0,[2,3,4]]]],35]],[[[87,[75,[0,[2,4,3]],[0,[2,4,3]]]],[34,[4]]]],[[[88,[75,[0,[4,32]],[0,[2,4,3]]]],[34,[[0,[4,32]]]]]],[[[89,[74,[0,[2,3,4]]]],35]],[[[90,[75,75]],34]],[[[91,[75,75]],34]],[[[92,[74]],35]],[[[93,[75]],35]],[[[94,[75]],35]],[[[95,[74,[0,[2,3,4]]]],35]],[[[96,[74,[0,[4,32]],[0,[2,3,4]]]],35]],[[[97,[74,[0,[2,3,4]],[0,[2,3,4]]]],35]],[[98,35]],[[98,35]],[[98,35]],[[98,35]],[[98,35]],[[98,35]],[[98,35]],[[98,35]],[[98,35]],[[98,35]],[[98,35]],[[98,35]],[[[99,[4]],35]],[[[100,[74]],35]],[[[101,[[0,[64,4]]]],35]],[[[102,[75,[0,[2,3,4]]]],35]],[[[103,[[0,[32,4]]]],35]],[[[104,[[0,[32,4]]]],35]],[[[105,[75]],35]],[[[106,[75]],35]],[[[107,[74]],35]],[[[108,[74,[0,[2,3,4]]]],35]],[[[109,[4,[0,[2,3,4]]]],35]],[[[110,[75]],35]],[[[111,[75]],35]],[[[112,[74]],35]],[[[113,[74,[0,[2,3,4]]]],35]],[[[114,[74,[0,[0,4]],[0,[2,3,4]],[0,[2,3,4]]]],35]],[[[115,[74,[0,[0,4]],[0,[2,3,4]]]],35]],[[[116,[74,[0,[2,4,3]]]],35]],[[[117,[74]],35]],[[[118,[75,75]],35]],[[[119,[75,75]],35]],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[[65,12,12]],[[[65,[125,125]]]],[[65,12,12]],[[],[[73,[4]]]],[[],78],[[[65,[[126,[[126,[[126,[126]]]]]],[126,[[126,[[126,[126]]]]]]]],[65,[[126,[[126,[[126,[126]]]]]],[126,[[126,[[126,[126]]]]]]]]],15],[70,15],[[],15],[[[65,[36]],17]],[[[65,[36]],17]],[[[65,[127,127]],128]],[[[65,[10,10]]],[[10,[65]]]],[65],[[[65,[16,16]]],[[16,[65]]]],[[[65,[10,10]]],[[10,[65]]]],[65],[[[0,[2,3,4]]],[[79,[[0,[2,3,4]]]]]],[[[0,[2,3,4]]],[[80,[[0,[2,3,4]]]]]],[[[65,[64,64]],28],16],[[[0,[2,3,4]]],16],[[[0,[2,3,4]]],16],[[[0,[2,3,4]]],16],[[[65,[64,64]],28],16],[[[0,[2,3,4]]],[[16,[4]]]],[[[0,[2,3,4]]],[[16,[4]]]],[[[0,[2,3,4]]],[[16,[4]]]],[[[0,[2,3,4]]],[[81,[[0,[2,3,4]]]]]],[[[0,[2,3,4]]],[[82,[[0,[2,3,4]]]]]],[[],83],[[],84],[65,65],[[[65,[36,36]],19],[[10,[20]]]],[[[65,[129,129]],19],[[10,[20]]]],[[[73,[4]],19],37],[[[71,[[0,[74,36]],[0,[74,36]]]],19],37],[[[72,[[0,[75,36]]]],19],37],[[[76,[[0,[36,74]]]],19],37],[[[77,[[0,[36,74]]]],19],37],[[[78,[[0,[36,75]]]],19],37],[[[79,[[0,[74,36]]]],19],37],[[[80,[[0,[74,36]]]],19],37],[[[81,[[0,[74,36]]]],19],37],[[[82,[[0,[74,36]]]],19],37],[[[83,[[0,[36,74]]]],19],37],[[[84,[[0,[36,74]]]],19],37],[[[85,[[0,[74,36]]]],19],37],[[[86,[[0,[74,36]],36]],19],37],[[[87,[[0,[75,36]]]],19],37],[[[88,[[0,[75,36]],36]],19],37],[[[89,[[0,[74,36]]]],19],37],[[[90,[[0,[75,36]],[0,[75,36]]]],19],37],[[[91,[[0,[75,36]],[0,[75,36]]]],19],37],[[[92,[[0,[74,36]]]],19],37],[[[93,[[0,[36,75]]]],19],37],[[[94,[[0,[36,75]]]],19],37],[[[95,[[0,[74,36]]]],19],37],[[[96,[[0,[74,36]],36]],19],37],[[[97,[[0,[74,36]]]],19],37],[[[98,[36]],19],37],[[[99,[[0,[36,4]]]],19],37],[[[100,[[0,[36,74]]]],19],37],[[[101,[36]],19],37],[[[102,[[0,[75,36]]]],19],37],[[[103,[[0,[36,32,4]]]],19],37],[[[104,[[0,[36,32,4]]]],19],37],[[[105,[[0,[36,75]]]],19],37],[[[106,[36]],19],37],[[[107,[[0,[36,74]]]],19],37],[[[108,[[0,[74,36]]]],19],37],[[[109,[36]],19],37],[[[110,[[0,[36,75]]]],19],37],[[[111,[36]],19],37],[[[112,[[0,[36,74]]]],19],37],[[[113,[[0,[74,36]]]],19],37],[[[114,[[0,[74,36]]]],19],37],[[[115,[[0,[74,36]],0]],19],37],[[[116,[[0,[74,36]]]],19],37],[[[117,[[0,[36,74]]]],19],37],[[[118,[[0,[36,75]],[0,[36,75]]]],19],37],[[[119,[[0,[36,75]],[0,[36,75]]]],19],37],[[[65,[64,64]],28]],[[[0,[2,3,4]],[0,[2,3,4]]],[[85,[[0,[2,3,4]],[0,[2,3,4]]]]]],[[14,[0,[2,4,3]],[0,[2,4,3]]],[[87,[[0,[2,4,3]],[0,[2,4,3]]]]]],[[14,[0,[4,32]],[0,[2,4,3]]],[[88,[[0,[4,32]],[0,[2,4,3]]]]]],[[[0,[4,32]],[0,[2,3,4]]],[[86,[[0,[4,32]],[0,[2,3,4]]]]]],[[[65,[64,64]],28]],[[[0,[2,3,4]]]],[[[0,[2,3,4]],[0,[2,3,4]]]],[[[0,[4,32]],[0,[2,3,4]]]],[[]],[10,65],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[70],[70,15],[70,15],[[[65,[48,48]],130]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[[0,[2,3,4]]],[[89,[[0,[2,3,4]]]]]],[70,90],[70,91],[[],92],[65,10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[65],[[]],[[[65,[128,128]]],65],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[65,15],[65,15],[[[65,[64,64]]],16],[70,15],[65,16],[[65,12],65],[65],[[[65,[131]]],131],[[65,12]],[[],14],[[[65,[75,75]]],14],[[[65,[132,132]]],14],[[[73,[4]]],14],[[[71,[75,75]]],14],[[[72,[75]]],14],[[[76,[75]]],14],[[[77,[75]]],14],[[[78,[75]]],14],[[[87,[75,[0,[2,4,3]],[0,[2,4,3]]]]],14],[[[88,[75,[0,[4,32]],[0,[2,4,3]]]]],14],[[[89,[75,[0,[2,3,4]]]]],14],[[[90,[75,75]]],14],[[[91,[75,75]]],14],[[[92,[75]]],14],[[[93,[75]]],14],[[[94,[75]]],14],[[[95,[75,[0,[2,3,4]]]]],14],[[[96,[75,[0,[4,32]],[0,[2,3,4]]]]],14],[[[97,[75,[0,[2,3,4]],[0,[2,3,4]]]]],14],[98,14],[98,14],[98,14],[98,14],[98,14],[98,14],[98,14],[98,14],[98,14],[98,14],[98,14],[98,14],[[[99,[4]]],14],[[[100,[75]]],14],[[[104,[[0,[32,4]]]]],14],[[[105,[75]]],14],[[[106,[75]]],14],[[[110,[75]]],14],[[[111,[75]]],14],[[[116,[75,[0,[2,4,3]]]]],14],[[[118,[75,75]]],14],[[[119,[75,75]]],14],[70,15],[[65,12],65],[[[0,[2,3,4]]],[[95,[[0,[2,3,4]]]]]],[[65,12,12],65],[[65,12,12],65],[[[0,[2,3,4]],[0,[2,3,4]]],[[97,[[0,[2,3,4]],[0,[2,3,4]]]]]],[[65,12],65],[[65,12],65],[[[0,[4,32]],[0,[2,3,4]]],[[96,[[0,[4,32]],[0,[2,3,4]]]]]],[[],16],[[[0,[3,4,2]]],16],[[[0,[3,4,2]]],16],[[],16],[[[0,[3,4,2]]],16],[[[0,[3,4,2]]],16],[70,15],[[[65,[64,64]]],16],[[[65,[133,133]]],16],[[[65,[64,64]],14],16],[4,[[99,[4]]]],[[[65,[74,74]]],[[16,[14]]]],[[[73,[4]]],[[16,[14]]]],[[],[[16,[14]]]],[[[71,[74,74]]],[[16,[14]]]],[[[72,[75]]],[[16,[14]]]],[[[76,[74]]],[[16,[14]]]],[[[77,[74]]],[[16,[14]]]],[[[78,[75]]],[[16,[14]]]],[[[87,[75,[0,[2,4,3]],[0,[2,4,3]]]]],[[16,[14]]]],[[[88,[75,[0,[4,32]],[0,[2,4,3]]]]],[[16,[14]]]],[[[89,[74,[0,[2,3,4]]]]],[[16,[14]]]],[[[90,[75,75]]],[[16,[14]]]],[[[91,[75,75]]],[[16,[14]]]],[[[92,[74]]],[[16,[14]]]],[[[93,[75]]],[[16,[14]]]],[[[94,[75]]],[[16,[14]]]],[[[95,[74,[0,[2,3,4]]]]],[[16,[14]]]],[[[96,[74,[0,[4,32]],[0,[2,3,4]]]]],[[16,[14]]]],[[[97,[74,[0,[2,3,4]],[0,[2,3,4]]]]],[[16,[14]]]],[98,[[16,[14]]]],[98,[[16,[14]]]],[98,[[16,[14]]]],[98,[[16,[14]]]],[98,[[16,[14]]]],[98,[[16,[14]]]],[98,[[16,[14]]]],[98,[[16,[14]]]],[98,[[16,[14]]]],[98,[[16,[14]]]],[98,[[16,[14]]]],[98,[[16,[14]]]],[[[99,[4]]],[[16,[14]]]],[[[100,[74]]],[[16,[14]]]],[[[104,[[0,[32,4]]]]],[[16,[14]]]],[[[105,[75]]],[[16,[14]]]],[[[106,[75]]],[[16,[14]]]],[[[110,[75]]],[[16,[14]]]],[[[111,[75]]],[[16,[14]]]],[[[116,[74,[0,[2,4,3]]]]],[[16,[14]]]],[[[118,[75,75]]],[[16,[14]]]],[[[119,[75,75]]],[[16,[14]]]],[[],100],[[],101],[[]],[134],[70],[[[65,[[135,[4]],[135,[4]]]],70]],[[]],[[]],[[[65,[[136,[[136,[[136,[136]]]]]],[136,[[136,[[136,[136]]]]]]]],[65,[[136,[[136,[[136,[136]]]]]],[136,[[136,[[136,[136]]]]]]]]],[[16,[120]]]],[70,[[16,[120]]]],[[[65,[64,64]],28]],[[[0,[2,3,4]]]],[[[0,[2,3,4]]]],0,[[[68,[[65,[137,137]]]],138],139],[[[65,[64,64]],28],[[16,[14]]]],[[[0,[2,3,4]]],[[16,[14]]]],[[[0,[2,3,4]]],[[16,[14]]]],[[[0,[2,3,4]]],[[16,[14]]]],[[[0,[2,3,4]]],[[102,[[0,[2,3,4]]]]]],[[],[[0,[4,140,[140,[[0,[4,140,[140,[[0,[4,140,[140,[[0,[4,140,[140,[[0,[4,140,140]]]]]]]]]]]]]]]]]]]],[[[0,[2,3,4]],[0,[2,3,4]]]],[[[0,[2,3,4]]],16],[[[0,[32,4]]],[[103,[[0,[32,4]]]]]],[[[0,[32,4]],14],[[104,[[0,[32,4]]]]]],[[],105],[[[65,[133,133]],28],16],[[[65,[133,133]],28]],[65,16],[[65,12],65],[65],[[[65,[131]]],131],[[65,12]],[[[65,[64,64]]]],[14,106],[14,107],[[[0,[2,3,4]]],[[108,[[0,[2,3,4]]]]]],[[4,[0,[2,3]]],[[109,[4,[0,[2,3]]]]]],[14,110],[[],[[0,[4,141,[141,[[0,[4,141,[141,[[0,[4,141,[141,[[0,[4,141,[141,[[0,[4,141,141]]]]]]]]]]]]]]]]]]]],[14,111],[[[103,[[0,[32,4]]]],14],[[104,[[0,[32,4]]]]]],[14,112],[[[0,[2,3,4]]],[[113,[[0,[2,3,4]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],30],[[[0,[2,3,4]],[0,[2,3,4]]],[[114,[[0,[0,4]],[0,[2,3,4]],[0,[2,3,4]]]]]],[[[0,[32,4]],[0,[2,3,4]]],[[115,[[0,[0,4]],[0,[2,3,4]]]]]],[[[0,[2,3,4]]],[[0,[0,4]]]],[[[0,[2,3,4]],[0,[2,3,4]]],[[0,[0,4]]]],[[[0,[4,32]],[0,[2,3,4]]],[[0,[0,4]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[[0,[2,3,4]],[0,[2,3,4]]]],[[[0,[2,3,4]]],16],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[[65,[36]]]],[[[65,[36]]]],[74],[[75,[6,[4]],[6,[4]]]],[[[0,[2,3,4]]],[[116,[[0,[2,3,4]]]]]],[74,[[117,[74]]]],[14,94],[14,93],[38],[[[65,[75,75]],38]],[[[73,[4]],38]],[[[71,[75,75]],38]],[[[72,[75]],38]],[[[76,[75]],38]],[[[77,[75]],38]],[[[78,[75]],38]],[[[87,[75,[0,[2,4,3]],[0,[2,4,3]]]],38]],[[[88,[75,[0,[4,32]],[0,[2,4,3]]]],38]],[[[89,[75,[0,[2,3,4]]]],38]],[[[90,[75,75]],38]],[[[91,[75,75]],38]],[[[92,[75]],38]],[[[93,[75]],38]],[[[94,[75]],38]],[[[95,[75,[0,[2,3,4]]]],38]],[[[96,[75,[0,[4,32]],[0,[2,3,4]]]],38]],[[[97,[75,[0,[2,3,4]],[0,[2,3,4]]]],38]],[[98,38]],[[98,38]],[[98,38]],[[98,38]],[[98,38]],[[98,38]],[[98,38]],[[98,38]],[[98,38]],[[98,38]],[[98,38]],[[98,38]],[[[99,[4]],38]],[[[100,[75]],38]],[[[104,[[0,[32,4]]]],38]],[[[105,[75]],38]],[[[106,[75]],38]],[[[110,[75]],38]],[[[111,[75]],38]],[[[116,[75,[0,[2,4,3]]]],38]],[[[118,[75,75]],38]],[[[119,[75,75]],38]],[70,118],[[[103,[[0,[32,4]]]],70],[[118,[[104,[[0,[32,4]]]]]]]],[70,119],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[75,34]],[[14,142,34]],[[143,35]],[142],[[]],[[]],[128],[144,144],[144,144],[[],15],[[],15],[[]],[[]],[[],14],[[],14],[[]],[[]],[14],[14],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[145,[[0,[32,4]]]]],[[145,[[0,[32,4]]]]]],[[[146,[3]]],[[146,[3]]]],[[]],[[]],[14],[14],[14],[14],[14],[14],[[[145,[4]],34]],[[[146,[3]],34]],[[[147,[4]],34]],[[[145,[4]],35]],[[[146,[3]],35]],[[[147,[4]],35]],[14],[14],[14],[[[145,[[0,[36,4]]]],19],37],[[[146,[[0,[36,3]]]],19],37],[[[147,[[0,[36,4]]]],19],37],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[]],[[]],[[]],[[]],[[]],[[]],[[[145,[4]]],14],[[[146,[3]]],14],[[[147,[4]]],14],[[[145,[4]]],[[16,[14]]]],[[[146,[3]]],[[16,[14]]]],[[[147,[4]]],[[16,[14]]]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],31],[[],31],[[],31],[[[145,[4]],38]],[[[146,[3]],38]],[[[147,[4]],38]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[[148,[32]]],[[148,[32]]]],[[]],[14],[14],[[[148,[0]],[34,[0]]]],[[[148,[149]],34]],[[[148,[149]],35]],[[[148,[0]],[35,[0]]]],[14],[[[148,[36]],19],37],[[]],[[],14],[[]],[[]],[[[148,[0]]],14],[[[148,[149]]],14],[[[148,[149]]],[[16,[14]]]],[[[148,[0]]],[[16,[14]]]],[[]],[[],10],[[],10],[[],31],[[[148,[149]],38]],[[[148,[0]],[38,[0]]]],0,[[]],[[]],[[[150,[32]]],[[150,[32]]]],[[]],[14],[14],[[[150,[0]],[34,[0]]]],[[[150,[149]],34]],[[[150,[149]],35]],[[[150,[0]],[35,[0]]]],[14],[[[150,[36]],19],37],[[]],[[],14],[[]],[[]],[[[150,[0]]],14],[[[150,[149]]],14],[[[150,[0]]],[[16,[14]]]],[[[150,[149]]],[[16,[14]]]],[[]],[[],10],[[],10],[[],31],[[[150,[0]],[38,[0]]]],[[[150,[149]],38]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[151,[[0,[32,4]]]]],[[151,[[0,[32,4]]]]]],[[[152,[3]]],[[152,[3]]]],[[]],[[]],[14],[14],[14],[14],[14],[14],[[[151,[4]],34]],[[[152,[3]],34]],[[[153,[4]],34]],[[[151,[4]],35]],[[[152,[3]],35]],[[[153,[4]],35]],[14],[14],[14],[[[151,[[0,[36,4]]]],19],37],[[[152,[[0,[36,3]]]],19],37],[[[153,[[0,[36,4]]]],19],37],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[]],[[]],[[]],[[]],[[]],[[]],[[[151,[4]]],14],[[[152,[3]]],14],[[[153,[4]]],14],[[[151,[4]]],[[16,[14]]]],[[[152,[3]]],[[16,[14]]]],[[[153,[4]]],[[16,[14]]]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],31],[[],31],[[],31],[[[151,[4]],38]],[[[152,[3]],38]],[[[153,[4]],38]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],66],[[],66],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[154,[32]]],[[154,[32]]]],[[[155,[3]]],[[155,[3]]]],[[[156,[3]]],[[156,[3]]]],[[[157,[3]]],[[157,[3]]]],[[[158,[3]]],[[158,[3]]]],[[[159,[3]]],[[159,[3]]]],[[[160,[3]]],[[160,[3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[[[155,[3]],34]],[[[156,[3]],34]],[[[161,[4]],34]],[[[162,[4]],34]],[[[157,[3]],34]],[[[158,[3]],34]],[[[163,[4]],34]],[[[164,[4]],34]],[[[159,[3]],34]],[[[160,[3]],34]],[[[165,[4]],34]],[[[154,[3,[0,[2,3,4]]]],35]],[[[166,[4,[0,[2,3,4]]]],35]],[[[155,[3]],35]],[[[156,[3]],35]],[[[161,[4]],35]],[[[162,[4]],35]],[[[157,[3]],35]],[[[158,[3]],35]],[[[163,[4]],35]],[[[164,[4]],35]],[[[159,[3]],35]],[[[160,[3]],35]],[[[165,[4]],35]],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[[[154,[36]],19],37],[[[166,[36]],19],37],[[[155,[[0,[36,3]]]],19],37],[[[156,[[0,[36,3]]]],19],37],[[[161,[[0,[36,4]]]],19],37],[[[162,[[0,[36,4]]]],19],37],[[[157,[[0,[36,3]]]],19],37],[[[158,[[0,[36,3]]]],19],37],[[[163,[[0,[36,4]]]],19],37],[[[164,[[0,[36,4]]]],19],37],[[[159,[[0,[36,3]]]],19],37],[[[160,[[0,[36,3]]]],19],37],[[[165,[[0,[36,4]]]],19],37],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[162,[4]]],[[66,[4]]]],[[[164,[4]]],[[66,[4]]]],[[[155,[3]]],14],[[[156,[3]]],14],[[[161,[4]]],14],[[[162,[4]]],14],[[[157,[3]]],14],[[[158,[3]]],14],[[[163,[4]]],14],[[[164,[4]]],14],[[[159,[3]]],14],[[[160,[3]]],14],[[[165,[4]]],14],[[[155,[3]]],[[16,[14]]]],[[[156,[3]]],[[16,[14]]]],[[[161,[4]]],[[16,[14]]]],[[[162,[4]]],[[16,[14]]]],[[[157,[3]]],[[16,[14]]]],[[[158,[3]]],[[16,[14]]]],[[[163,[4]]],[[16,[14]]]],[[[164,[4]]],[[16,[14]]]],[[[159,[3]]],[[16,[14]]]],[[[160,[3]]],[[16,[14]]]],[[[165,[4]]],[[16,[14]]]],[14,155],[14,156],[14,162],[14,161],[14,157],[14,158],[14,164],[14,163],[[]],[[[0,[2,3]]]],[[[0,[2,3]]]],[[[0,[2,3]]]],[[]],[[[0,[2,3]]]],[[[0,[2,3]]]],[[[0,[2,3,4]]],[[154,[[0,[2,3,4]]]]]],[[[0,[2,3,4]]],[[166,[[0,[2,3,4]]]]]],[14,160],[[[156,[3]]],[[66,[3]]]],[[[162,[4]]],[[66,[4]]]],[[[158,[3]]],[[66,[3]]]],[[[164,[4]]],[[66,[4]]]],[[[162,[4]]],[[66,[4]]]],[[[164,[4]]],[[66,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[[155,[3]],38]],[[[156,[3]],38]],[[[161,[4]],38]],[[[162,[4]],38]],[[[157,[3]],38]],[[[158,[3]],38]],[[[163,[4]],38]],[[[164,[4]],38]],[[[159,[3]],38]],[[[160,[3]],38]],[[[165,[4]],38]],0,0,0,0,0,0,0,0,0,0,0,[[],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[167,167],[168,168],[169,169],[170,170],[[[171,[[0,[32,0]]]]],[[171,[[0,[32,0]]]]]],[[[172,[[0,[32,0]]]]],[[172,[[0,[32,0]]]]]],[173,173],[174,174],[[[175,[[0,[32,0]]]]],[[175,[[0,[32,0]]]]]],[[[176,[[0,[32,0]]]]],[[176,[[0,[32,0]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[[167,35]],[[168,35]],[[169,35]],[[170,35]],[[[171,[0]],35]],[[[172,[0]],35]],[[173,35]],[[174,35]],[[[175,[0]],35]],[[[176,[0]],35]],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[[167,19],37],[[168,19],37],[[169,19],37],[[170,19],37],[[[171,[[0,[36,0]]]],19],37],[[[172,[[0,[36,0]]]],19],37],[[173,19],37],[[174,19],37],[[[175,[[0,[36,0]]]],19],37],[[[176,[[0,[36,0]]]],19],37],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],169],[[],168],[[],167],[[],170],[[],173],0,0,0,0,[[],174],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],0,[[]],[[]],[14],[14],[[177,35]],[177],[14],[[177,19],37],[[]],[[],14],[[]],[[]],[[],10],[[],10],[[],31],0,0,[[]],[[]],[[]],[[]],[[[178,[[0,[32,4]]]]],[[178,[[0,[32,4]]]]]],[[]],[14],[14],[14],[14],[[[178,[4]],34]],[[[179,[4]],34]],[[[178,[4]],35]],[[[179,[4]],35]],[14],[[[179,[4]]]],[14],[[[178,[[0,[36,4]]]],19],37],[[[179,[[0,[36,4]]]],19],37],[[]],[[]],[[],14],[[],14],[[]],[[]],[[]],[[]],[[[178,[4]]],14],[[[179,[4]]],14],[[[178,[4]]],[[16,[14]]]],[[[179,[4]]],[[16,[14]]]],[[]],[[],10],[[],10],[[],10],[[],10],[[],31],[[],31],[[[178,[4]],38]],[[[179,[4]],38]]],"c":[30,128],"p":[[3,"ThreadPoolBuilder"],[8,"Fn"],[8,"Sync"],[8,"Send"],[3,"Global"],[3,"Vec"],[3,"ThreadPool"],[8,"ThreadSpawn"],[3,"ThreadPoolBuildError"],[4,"Result"],[3,"DefaultSpawn"],[8,"FnOnce"],[4,"Yield"],[15,"usize"],[15,"bool"],[4,"Option"],[15,"str"],[3,"BroadcastContext"],[3,"Formatter"],[3,"Error"],[3,"ThreadBuilder"],[3,"Scope"],[3,"ScopeFifo"],[3,"FnContext"],[3,"Configuration"],[8,"Error"],[3,"Box"],[8,"FnMut"],[3,"CustomSpawn"],[3,"String"],[3,"TypeId"],[8,"Clone"],[3,"IntoIter"],[8,"Consumer"],[8,"UnindexedConsumer"],[8,"Debug"],[6,"Result"],[8,"ProducerCallback"],[8,"Ord"],[3,"IntoIter"],[3,"Iter"],[3,"Drain"],[3,"Iter"],[3,"IntoIter"],[3,"IterMut"],[3,"Iter"],[3,"IntoIter"],[8,"Hash"],[8,"Eq"],[3,"Iter"],[3,"IntoIter"],[3,"IterMut"],[3,"Drain"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Drain"],[8,"Iterator"],[4,"Either"],[15,"slice"],[8,"AsMut"],[3,"Pin"],[8,"AsRef"],[8,"IntoParallelIterator"],[3,"Chain"],[3,"Chunks"],[3,"Empty"],[8,"ParallelIterator"],[8,"IndexedParallelIterator"],[3,"Cloned"],[3,"Copied"],[3,"Enumerate"],[3,"Filter"],[3,"FilterMap"],[3,"FlatMap"],[3,"FlatMapIter"],[3,"Flatten"],[3,"FlattenIter"],[3,"Fold"],[3,"FoldWith"],[3,"FoldChunks"],[3,"FoldChunksWith"],[3,"Inspect"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"Intersperse"],[3,"MinLen"],[3,"MaxLen"],[3,"Map"],[3,"MapWith"],[3,"MapInit"],[3,"MultiZip"],[3,"Once"],[3,"PanicFuse"],[3,"IterBridge"],[3,"Positions"],[3,"Repeat"],[3,"RepeatN"],[3,"Rev"],[3,"Skip"],[3,"SkipAny"],[3,"SkipAnyWhile"],[3,"Split"],[3,"StepBy"],[3,"Take"],[3,"TakeAny"],[3,"TakeAnyWhile"],[3,"TryFold"],[3,"TryFoldWith"],[3,"Update"],[3,"WhileSome"],[3,"Zip"],[3,"ZipEq"],[4,"Ordering"],[8,"FromIterator"],[8,"FromParallelIterator"],[8,"Deref"],[8,"DerefMut"],[8,"Into"],[8,"PartialEq"],[8,"Extend"],[8,"IntoIterator"],[8,"Display"],[8,"Hasher"],[8,"Default"],[8,"ExactSizeIterator"],[8,"DoubleEndedIterator"],[8,"RangeBounds"],[8,"ParallelExtend"],[8,"PartialOrd"],[8,"Future"],[3,"Context"],[4,"Poll"],[8,"Product"],[8,"Sum"],[8,"Producer"],[8,"UnindexedProducer"],[8,"Folder"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Iter"],[15,"char"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"Chunks"],[3,"ChunksExact"],[3,"RChunks"],[3,"RChunksExact"],[3,"Iter"],[3,"Windows"],[3,"ChunksMut"],[3,"ChunksExactMut"],[3,"RChunksMut"],[3,"RChunksExactMut"],[3,"IterMut"],[3,"SplitMut"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"EncodeUtf16"],[3,"Split"],[3,"SplitTerminator"],[3,"Lines"],[3,"SplitWhitespace"],[3,"Matches"],[3,"MatchIndices"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[8,"IntoParallelRefIterator"],[8,"IntoParallelRefMutIterator"],[8,"ParallelDrainFull"],[8,"ParallelDrainRange"],[8,"ParallelBridge"],[8,"Reducer"],[8,"ParallelSlice"],[8,"ParallelSliceMut"],[8,"ParallelString"]]},\
"rayon_core":{"doc":"Rayon-core houses the core stable APIs of Rayon.","t":"DDNDNDDDDDDELLLLLLLLLLLLLLLLLLLLLLFLLLLLLLFLFLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLFLLLLLLLLLLLLLFLLLLLLLLLLLFLFFLLLLLLLLLLLFLFLLFLLFLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLFL","n":["BroadcastContext","Configuration","Executed","FnContext","Idle","Scope","ScopeFifo","ThreadBuilder","ThreadPool","ThreadPoolBuildError","ThreadPoolBuilder","Yield","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","breadth_first","breadth_first","broadcast","broadcast","build","build","build_global","build_scoped","clone","clone_into","current_num_threads","current_num_threads","current_thread_has_pending_tasks","current_thread_has_pending_tasks","current_thread_index","current_thread_index","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","equivalent","exit_handler","exit_handler","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","in_place_scope","in_place_scope","in_place_scope_fifo","in_place_scope_fifo","index","index","init","init","init","init","init","init","init","init","init","init","initialize","install","into","into","into","into","into","into","into","into","into","into","join","join","join_context","max_num_threads","migrated","name","new","new","new","num_threads","num_threads","num_threads","panic_handler","panic_handler","run","scope","scope","scope_fifo","scope_fifo","source","spawn","spawn","spawn","spawn_broadcast","spawn_broadcast","spawn_broadcast","spawn_broadcast","spawn_fifo","spawn_fifo","spawn_fifo","spawn_handler","stack_size","stack_size","stack_size","start_handler","start_handler","thread_name","thread_name","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","use_current_thread","yield_local","yield_local","yield_now","yield_now"],"q":[[0,"rayon_core"]],"d":["Provides context to a closure called by <code>broadcast</code>.","Contains the rayon thread pool configuration. Use …","Work was found and executed.","Provides the calling context to a closure called by …","No available work was found.","Represents a fork-join scope which can be used to spawn …","Represents a fork-join scope which can be used to spawn …","Thread builder used for customization via …","Represents a user created thread-pool.","Error when initializing a thread pool.","Used to create a new <code>ThreadPool</code> or to configure the global …","Result of <code>yield_now()</code> or <code>yield_local()</code>.","","","","","","","","","","","","","","","","","","","","","<strong>(DEPRECATED)</strong> Suggest to worker threads that they execute …","Deprecated in favor of <code>ThreadPoolBuilder::breadth_first</code>.","Executes <code>op</code> within every thread in the current threadpool. …","Executes <code>op</code> within every thread in the threadpool. Any …","Creates a new <code>ThreadPool</code> initialized using this …","Deprecated in favor of <code>ThreadPoolBuilder::build</code>.","Initializes the global thread pool. This initialization is …","Creates a scoped <code>ThreadPool</code> initialized using this …","","","Returns the number of threads in the current registry. If …","Returns the (current) number of threads in the thread pool.","If called from a Rayon worker thread, indicates whether …","Returns true if the current worker thread currently has “…","If called from a Rayon worker thread, returns the index of …","If called from a Rayon worker thread in this thread-pool, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets a callback to be invoked on thread exit.","Deprecated in favor of <code>ThreadPoolBuilder::exit_handler</code>.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a “fork-join” scope <code>s</code> and invokes the closure …","Creates a scope that spawns work into this thread-pool.","Creates a “fork-join” scope <code>s</code> with FIFO order, and …","Creates a scope that spawns work into this thread-pool in …","Our index amongst the broadcast threads (ranges from …","Gets the index of this thread in the pool, within …","","","","","","","","","","","Deprecated in favor of <code>ThreadPoolBuilder::build_global</code>.","Executes <code>op</code> within the threadpool. Any attempts to use <code>join</code>…","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Takes two closures and <em>potentially</em> runs them in parallel. …","Execute <code>oper_a</code> and <code>oper_b</code> in the thread-pool and return …","Identical to <code>join</code>, except that the closures have a …","Returns the maximum number of threads that Rayon supports …","Returns <code>true</code> if the closure was called from a different …","Gets the string that was specified by …","Deprecated in favor of <code>ThreadPoolBuilder::build</code>.","Creates and returns a valid rayon thread pool builder, but …","Creates and return a valid rayon thread pool …","The number of threads receiving the broadcast in the …","Sets the number of threads to be used in the rayon …","Deprecated in favor of <code>ThreadPoolBuilder::num_threads</code>.","Normally, whenever Rayon catches a panic, it tries to …","Deprecated in favor of <code>ThreadPoolBuilder::panic_handler</code>.","Executes the main loop for this thread. This will not …","Creates a “fork-join” scope <code>s</code> and invokes the closure …","Creates a scope that executes within this thread-pool. …","Creates a “fork-join” scope <code>s</code> with FIFO order, and …","Creates a scope that executes within this thread-pool. …","","Fires off a task into the Rayon threadpool in the “static…","Spawns a job into the fork-join scope <code>self</code>. This job will …","Spawns an asynchronous task in this thread-pool. This task …","Spawns an asynchronous task on every thread in this …","Spawns a job into every thread of the fork-join scope <code>self</code>…","Spawns a job into every thread of the fork-join scope <code>self</code>…","Spawns an asynchronous task on every thread in this …","Fires off a task into the Rayon threadpool in the “static…","Spawns a job into the fork-join scope <code>self</code>. This job will …","Spawns an asynchronous task in this thread-pool. This task …","Sets a custom function for spawning threads.","Gets the value that was specified by …","Sets the stack size of the worker threads","Deprecated in favor of <code>ThreadPoolBuilder::stack_size</code>.","Sets a callback to be invoked on thread start.","Deprecated in favor of <code>ThreadPoolBuilder::start_handler</code>.","Sets a closure which takes a thread index and returns the …","Deprecated in favor of <code>ThreadPoolBuilder::thread_name</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Use the current thread as one of the threads in the pool.","Cooperatively yields execution to local Rayon work.","Cooperatively yields execution to local Rayon work.","Cooperatively yields execution to Rayon.","Cooperatively yields execution to Rayon."],"i":[0,0,13,0,13,0,0,0,0,0,0,0,18,21,22,23,7,1,13,8,2,24,18,21,22,23,7,1,13,8,2,24,1,2,0,7,1,2,1,1,13,13,0,7,0,7,0,7,1,2,18,21,22,23,7,1,13,8,2,24,18,21,22,23,7,1,13,8,2,24,8,18,21,22,23,7,7,1,13,8,2,24,13,13,1,2,18,21,22,23,7,1,13,8,8,2,24,18,21,22,23,7,1,13,8,2,24,0,7,0,7,18,21,18,21,22,23,7,1,13,8,2,24,0,7,18,21,22,23,7,1,13,8,2,24,0,7,0,0,24,21,7,1,2,18,1,2,1,2,21,0,7,0,7,8,0,22,7,0,22,23,7,0,23,7,1,21,1,2,1,2,1,2,13,8,18,21,22,23,7,1,13,8,2,24,18,21,22,23,7,1,13,8,2,24,18,21,22,23,7,1,13,8,2,24,1,0,7,0,7],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[[[0,[3,4]]],[[6,[5]]]],[[7,[0,[3,4]]],[[6,[5]]]],[[[1,[0]]],[[9,[7,8]]]],[2,[[9,[7,[11,[10]]]]]],[[[1,[0]]],[[9,[8]]]],[[1,[0,[3,4]],12],[[9,[8]]]],[13,13],[[]],[[],14],[7,14],[[],[[16,[15]]]],[7,[[16,[15]]]],[[],[[16,[14]]]],[7,[[16,[14]]]],[[],1],[[],2],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[8,17],[14],[14],[14],[14],[14],[7],[14],[14],[14],[14],[14],[[13,13],15],[[],15],[[1,[0,[3,5,4]]],1],[[2,[0,[3,5,4]]],2],[[18,19],20],[[21,19],20],[[22,19],20],[[23,19],20],[[7,19],20],[[1,19],20],[[13,19],20],[[8,19],20],[[8,19],20],[[2,19],20],[[24,19],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[12],[[7,12]],[12],[[7,12]],[18,14],[21,14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[2,[[9,[[11,[10]]]]]],[[7,[0,[12,5]]],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[0,[12,5]],[0,[12,5]]]],[[7,[0,[12,5]],[0,[12,5]]]],[[[0,[12,5]],[0,[12,5]]]],[[],14],[24,15],[21,[[16,[17]]]],[2,[[9,[7,[11,[10]]]]]],[[],1],[[],2],[18,14],[[1,14],1],[[2,14],2],[[1,[0,[3,5,4]]],1],[[2,[0,[3,5,4]]],2],[21],[[[0,[12,5]]],5],[[7,[0,[12,5]]],5],[[[0,[12,5]]],5],[[7,[0,[12,5]]],5],[8,[[16,[10]]]],[[[0,[12,5]]]],[[22,[0,[12,5]]]],[[7,[0,[12,5]]]],[[[0,[3,5,4]]]],[[22,[0,[3,5,4]]]],[[23,[0,[3,5,4]]]],[[7,[0,[3,5,4]]]],[[[0,[12,5]]]],[[23,[0,[12,5]]]],[[7,[0,[12,5]]]],[[1,25],[[1,[[0,[25]]]]]],[21,[[16,[14]]]],[[1,14],1],[[2,14],2],[[1,[0,[3,5,4]]],1],[[2,[0,[3,5,4]]],2],[[1,25],1],[[2,25],2],[[]],[[],26],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[1,1],[[],[[16,[13]]]],[7,[[16,[13]]]],[[],[[16,[13]]]],[7,[[16,[13]]]]],"c":[1,32,123,141],"p":[[3,"ThreadPoolBuilder"],[3,"Configuration"],[8,"Fn"],[8,"Sync"],[8,"Send"],[3,"Vec"],[3,"ThreadPool"],[3,"ThreadPoolBuildError"],[4,"Result"],[8,"Error"],[3,"Box"],[8,"FnOnce"],[4,"Yield"],[15,"usize"],[15,"bool"],[4,"Option"],[15,"str"],[3,"BroadcastContext"],[3,"Formatter"],[6,"Result"],[3,"ThreadBuilder"],[3,"Scope"],[3,"ScopeFifo"],[3,"FnContext"],[8,"FnMut"],[3,"String"],[3,"TypeId"]]},\
"rpeg":{"doc":"","t":"AAADDDMMMLLLLLLLLLLLLFFLLLLLLLLLLLLLLLMLLLLLLMMMLLLLLLLLLLLLMMDDMMMMMLLLLMLLLLMLLLLLLLLLLFMLLLLMFLLFLLLLLLDLLLLFFLLLLLFLLMMFLLLLM","n":["codec","format","value_conversion","DCTValues","RgbFloat","Ypbpr","avg_pb","avg_pr","blue","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","compress","decompress","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","fmt","from","from","from","green","init","init","init","into","into","into","pb","pr","red","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","y","yval","QuantValues","RgbFloat","a","avg_pb","avg_pr","b","blue","borrow","borrow","borrow_mut","borrow_mut","c","clone","clone","clone_into","clone_into","d","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","get_quant_values","green","init","init","into","into","red","rgb_int_to_float","to_owned","to_owned","trim_image","try_from","try_from","try_into","try_into","type_id","type_id","Ypbpr","borrow","borrow_mut","clone","clone_into","dct_function","dct_to_rgb","deref","deref_mut","drop","fmt","from","get_dct_values","init","into","pb","pr","rgb_to_ypbpr","to_owned","try_from","try_into","type_id","y"],"q":[[0,"rpeg"],[3,"rpeg::codec"],[62,"rpeg::format"],[106,"rpeg::value_conversion"]],"d":["","","","","","","","","","","","","","","","","","","","","","Function: Compress","Function: Compress","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Function: <code>get_quant_values</code> -&gt; <code>Vec&lt;QuantValues&gt;</code>","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Function: <code>rgb_int_to_float</code> -&gt; <code>Vec&lt;RgbFloat&gt;</code>","","","Function: <code>trim_image</code> -&gt; <code>Vec&lt;csc411_image::Rgb&gt;</code>","","","","","","","","","","","","Function: <code>dct_function</code> -&gt; (usize, usize, f32, f32, f32, …","Function: <code>dct_function</code> -&gt; <code>Vec&lt;Rgb&gt;</code>","","","","","Returns the argument unchanged.","Function: <code>get_dct_values</code> -&gt; (usize, usize, f32, f32, f32, …","","Calls <code>U::from(self)</code>.","","","Function: <code>rgb_to_ypbpr</code> -&gt; <code>Vec&lt;Ypbpr&gt;</code>","","","","",""],"i":[0,0,0,0,0,0,3,3,2,1,2,3,1,2,3,1,2,3,1,2,3,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,2,1,2,3,1,2,3,1,1,2,1,2,3,1,2,3,1,2,3,1,2,3,1,3,0,0,12,12,12,12,11,11,12,11,12,12,11,12,11,12,12,11,12,11,12,11,12,11,12,11,12,0,11,11,12,11,12,11,0,11,12,0,11,12,11,12,11,12,0,19,19,19,19,0,0,19,19,19,19,19,0,19,19,19,19,0,19,19,19,19,19],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[[]],[[]],[[]],[[[5,[4]]]],[[[5,[4]]]],[6],[6],[6],[6],[6],[6],[6],[6],[6],[[1,7],8],[[2,7],8],[[3,7],8],[[]],[[]],[[]],0,[[],6],[[],6],[[],6],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,[11,11],[12,12],[[]],[[]],0,[6],[6],[6],[6],[6],[6],[[11,7],8],[[12,7],8],[[]],[[]],[[[15,[[14,[13]]]]],[[15,[12]]]],0,[[],6],[[],6],[[]],[[]],0,[[[15,[16]],17,18,18],[[15,[11]]]],[[]],[[]],[[17,18,18],[[15,[16]]]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],0,[[]],[[]],[19,19],[[]],[[[15,[3]],18,18,[15,[12]]],[[15,[3]]]],[[[15,[3]]],[[15,[16]]]],[6],[6],[6],[[19,7],8],[[]],[[[15,[19]],18,18,18]],[[],6],[[]],0,0,[[[15,[16]],[15,[11]],18,18],[[15,[19]]]],[[]],[[],9],[[],9],[[],10],0],"c":[],"p":[[3,"Ypbpr"],[3,"RgbFloat"],[3,"DCTValues"],[15,"str"],[4,"Option"],[15,"usize"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[3,"RgbFloat"],[3,"QuantValues"],[15,"u8"],[15,"array"],[3,"Vec"],[3,"Rgb"],[3,"RgbImage"],[15,"u32"],[3,"Ypbpr"]]},\
"scoped_threadpool":{"doc":"This crate provides a stable, safe and scoped threadpool.","t":"DDLLLLLLLLLLLLLLLLLLLLL","n":["Pool","Scope","borrow","borrow","borrow_mut","borrow_mut","drop","drop","execute","from","from","into","into","join_all","new","scoped","thread_count","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"scoped_threadpool"]],"d":["A threadpool that acts as a handle to a number of threads …","Handle to the scope during which the threadpool is …","","","","","","","Execute a job on the threadpool.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Blocks until all currently queued jobs have run to …","Construct a threadpool with the given number of threads. …","Borrows the pool and allows executing jobs on other …","Returns the number of threads inside this pool.","","","","","",""],"i":[0,0,1,2,1,2,1,2,2,1,2,1,2,2,1,1,1,1,2,1,2,1,2],"f":[0,0,[[]],[[]],[[]],[[]],[1],[2],[[2,[0,[3,4]]]],[[]],[[]],[[]],[[]],[2],[5,1],[[1,3]],[1,5],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7]],"c":[],"p":[[3,"Pool"],[3,"Scope"],[8,"FnOnce"],[8,"Send"],[15,"u32"],[4,"Result"],[3,"TypeId"]]},\
"scopeguard":{"doc":"A scope guard will run a given closure when it goes out of …","t":"EDILLLLOLLLLLLLFLLLKLLLLLLLL","n":["Always","ScopeGuard","Strategy","borrow","borrow","borrow_mut","borrow_mut","defer","deref","deref_mut","drop","fmt","fmt","from","from","guard","into","into","into_inner","should_run","should_run","try_from","try_from","try_into","try_into","type_id","type_id","with_strategy"],"q":[[0,"scopeguard"]],"d":["Always run on scope exit.","<code>ScopeGuard</code> is a scope guard that may own a protected value.","Controls in which cases the associated code should be run","","","","","Macro to create a <code>ScopeGuard</code> (always run).","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create a new <code>ScopeGuard</code> owning <code>v</code> and with deferred closure …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","“Defuse” the guard and extract the value without …","Return <code>true</code> if the guard’s associated code should run …","","","","","","","","Create a <code>ScopeGuard</code> that owns <code>v</code> (accessible through deref) …"],"i":[0,0,0,3,7,3,7,0,3,3,3,3,7,3,7,0,3,7,3,2,7,3,7,3,7,3,7,3],"f":[0,0,0,[[]],[[]],[[]],[[]],0,[[[3,[1,2]]]],[[[3,[1,2]]]],[[[3,[1,2]]]],[[[3,[4,1,2]],5],6],[[7,5],6],[[]],[[]],[1,[[3,[1,7]]]],[[]],[[]],[[[3,[1,2]]]],[[],8],[[],8],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[1,[[3,[1,2]]]]],"c":[],"p":[[8,"FnOnce"],[8,"Strategy"],[3,"ScopeGuard"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"Always"],[15,"bool"],[4,"Result"],[3,"TypeId"]]},\
"tiff":{"doc":"Decoding and Encoding of TIFF Images","t":"NNENNNNNNNNDNNNNNNNNNNNNNEEGNNENNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLMMMMDEENNNNDNNNNNNNNLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAMLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNGNDNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSDSDDDDILLLLLLLLLLLLLAKLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLSDDDDDDIDDDDDDQDDDDDDDDDDDDSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNENENNNNENNNNNNNENNNNNNENNNNNNENNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ByteExpected","CMYK","ColorType","Format","FormatError","Gray","GrayA","HorizontalPredictor","ImageFileDirectoryNotFound","InconsistentSizesEncountered","InconsistentStripSamples","InflateError","InflateError","IntSizeError","InterpretationWithBits","InvalidTag","InvalidTagValueType","IoError","LimitsExceeded","Palette","RGB","RGBA","RequiredTagEmpty","RequiredTagNotFound","SignedIntegerExpected","TiffError","TiffFormatError","TiffResult","TiffSignatureInvalid","TiffSignatureNotFound","TiffUnsupportedError","UnexpectedCompressedData","UnknownCompressionMethod","UnknownInterpretation","UnknownPredictor","UnsignedIntegerExpected","UnsupportedBitsPerChannel","UnsupportedColorType","UnsupportedCompressionMethod","UnsupportedDataType","UnsupportedError","UnsupportedPlanarConfig","UnsupportedSampleDepth","UnsupportedSampleFormat","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","decoder","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","drop","drop","drop","drop","drop","encoder","eq","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","init","init","init","init","init","into","into","into","into","into","tags","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","actual_bytes","actual_samples","required_bytes","required_samples","Decoder","DecodingBuffer","DecodingResult","F32","F32","F64","F64","Limits","U16","U16","U32","U32","U64","U64","U8","U8","as_buffer","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_order","clone","clone_into","colortype","decoding_buffer_size","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","dimensions","drop","drop","drop","drop","find_tag","find_tag_unsigned","find_tag_unsigned_vec","fmt","fmt","fmt","from","from","from","from","get_tag","get_tag_ascii_string","get_tag_f32","get_tag_f32_vec","get_tag_f64","get_tag_f64_vec","get_tag_u16_vec","get_tag_u32","get_tag_u32_vec","get_tag_u64","get_tag_u64_vec","get_tag_u8_vec","get_tag_unsigned","goto_offset","goto_offset_u64","ifd","ifd_value_size","init","init","init","init","init","intermediate_buffer_size","into","into","into","into","more_images","new","next_image","read_byte","read_double","read_float","read_ifd_offset","read_image","read_jpeg","read_long","read_long8","read_offset","read_offset_u64","read_short","read_slong","read_sshort","read_string","read_strip","read_strip_to_buffer","strip_count","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unlimited","with_limits","Ascii","Byte","Directory","Double","Entry","Float","List","Rational","RationalBig","SRational","SRationalBig","Short","Signed","SignedBig","Unsigned","UnsignedBig","Value","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","fmt","fmt","from","from","init","init","into","into","into_f32","into_f32_vec","into_f64","into_f64_vec","into_i32","into_i32_vec","into_i64","into_i64_vec","into_string","into_u16","into_u16_vec","into_u32","into_u32_vec","into_u64","into_u64_vec","into_u8","into_u8_vec","new","new_u64","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","val","BYTE_LEN","DirectoryEncoder","FIELD_TYPE","ImageEncoder","Rational","SRational","TiffEncoder","TiffValue","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","clone","clone_into","colortype","count","count","count","d","d","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","encoder","finish","finish","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","n","n","new","new_directory","new_image","next_strip_sample_count","resolution","resolution_unit","rows_per_strip","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","write","write","write","write_data","write_data","write_image","write_strip","write_tag","x_resolution","y_resolution","BITS_PER_SAMPLE","CMYK16","CMYK32","CMYK32Float","CMYK64","CMYK64Float","CMYK8","ColorType","Gray16","Gray32","Gray32Float","Gray64","Gray64Float","Gray8","Inner","RGB16","RGB32","RGB32Float","RGB64","RGB64Float","RGB8","RGBA16","RGBA32","RGBA32Float","RGBA64","RGBA64Float","RGBA8","SAMPLE_FORMAT","TIFF_VALUE","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ASCII","Artist","BYTE","BitsPerSample","BlackIsZero","CIELab","CMYK","CellLength","CellWidth","Centimeter","Chunky","ColorMap","Compression","CompressionMethod","Copyright","DOUBLE","DateTime","Deflate","ExtraSamples","FLOAT","Fax3","Fax4","FillOrder","FreeByteCounts","FreeOffsets","GdalNodata","GeoAsciiParamsTag","GeoDoubleParamsTag","GeoKeyDirectoryTag","GrayResponseCurve","GrayResponseUnit","Horizontal","HostComputer","Huffman","IEEEFP","ImageDescription","ImageLength","ImageWidth","Inch","Int","JPEG","JPEGTables","LONG","LONG8","LZW","Make","MaxSampleValue","MinSampleValue","Model","ModelPixelScaleTag","ModelTiepointTag","ModelTransformationTag","ModernJPEG","NewSubfileType","None","None","None","OldDeflate","Orientation","PackBits","PhotometricInterpretation","PhotometricInterpretation","Planar","PlanarConfiguration","PlanarConfiguration","Predictor","Predictor","RATIONAL","RGB","RGBPalette","ResolutionUnit","ResolutionUnit","RowsPerStrip","SBYTE","SHORT","SLONG","SRATIONAL","SSHORT","SampleFormat","SampleFormat","SamplesPerPixel","Software","StripByteCounts","StripOffsets","SubfileType","Tag","Threshholding","TileByteCounts","TileLength","TileOffsets","TileWidth","TransparencyMask","Type","UNDEFINED","Uint","Unknown","Unknown","Void","WhiteIsZero","XResolution","YCbCr","YResolution","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16_exhaustive","from_u16_exhaustive","hash","hash","hash","hash","hash","hash","hash","hash","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_u16","to_u16","to_u16","to_u16","to_u16","to_u16","to_u16","to_u16","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"tiff"],[142,"tiff::TiffFormatError"],[146,"tiff::decoder"],[262,"tiff::decoder::ifd"],[330,"tiff::encoder"],[427,"tiff::encoder::colortype"],[720,"tiff::tags"]],"d":["","Pixel is CMYK","An enumeration over supported color types and their bit …","","The Image is not formatted properly.","Pixel is grayscale","Pixel is grayscale with an alpha channel","","","","","Decompression failed due to faulty compressed data.","","An integer conversion to or from a platform size failed, …","","","","An I/O Error occurred while decoding the image.","The Limits of the Decoder is exceeded.","Pixel is an index into a color palette","Pixel contains R, G and B channels","Pixel is RGB with an alpha channel","","","","Tiff error kinds.","The image is not formatted properly.","Result of an image decoding/encoding process","","","The Decoder does not support features required by the …","","","","","","","","","","The Decoder does not support features required by the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","The representation of a TIFF decoder","","Result of a decoding process","A slice of 32 bit IEEE floats","A vector of 32 bit IEEE floats","A slice of 64 bit IEEE floats","A vector of 64 bit IEEE floats","Decoding limits","A slice of unsigned words","A vector of unsigned words","A slice of 32 bit unsigned ints","A vector of 32 bit unsigned ints","A slice of 64 bit unsigned ints","A vector of 64 bit unsigned ints","A slice of unsigned bytes","A vector of unsigned bytes","","","","","","","","","","Returns the byte_order","","","","The maximum size of any <code>DecodingResult</code> in bytes, the …","","","","","","","","","","","","","","","Tries to retrieve a tag. Return <code>Ok(None)</code> if the tag is not …","Tries to retrieve a tag and convert it to the desired …","Tries to retrieve a vector of all a tag’s values and …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Tries to retrieve a tag. Returns an error if the tag is …","Tries to retrieve a tag and convert it to a ascii vector.","Tries to retrieve a tag and convert it to the desired type.","Tries to retrieve a tag and convert it to the desired type.","Tries to retrieve a tag and convert it to the desired type.","Tries to retrieve a tag and convert it to the desired type.","","Tries to retrieve a tag and convert it to the desired type.","Tries to retrieve a tag and convert it to the desired type.","","","Tries to retrieve a tag and convert it to a 8bit vector.","Tries to retrieve a tag and convert it to the desired …","Moves the cursor to the specified offset","","Function for reading TIFF tags","The maximum size of any ifd value in bytes, the default is …","","","","","Initializes the decoder.","Maximum size for intermediate buffer which may be used to …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if there is at least one more image available.","Create a new decoder that decodes from the stream <code>r</code>","Reads in the next image. If there is no further image in …","Reads a TIFF byte value","Reads a TIFF double value","Reads a TIFF float value","","Decodes the entire image and return it as a Vector","","Reads a TIFF long value","","Reads a TIFF IFA offset/value field","Reads a TIFF IFA offset/value field","Reads a TIFF short value","Reads a TIFF slong value","Reads a TIFF sshort value","Reads a string","Read a single strip from the image and return it as a …","","Number of strips in image","","","","","","","","","","","","","","A configuration that does not impose any limits.","","","","Type representing an Image File Directory","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Low level interface to encode ifd directories.","","Type to encode images strip by strip.","Type to represent tiff values of type <code>RATIONAL</code>","Type to represent tiff values of type <code>SRATIONAL</code>","Tiff encoder.","Trait for types that can be encoded in a tiff file","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a reference of the underlying <code>DirectoryEncoder</code>","Write out the ifd directory.","Write out image and ifd directory.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Create a <code>DirectoryEncoder</code> to encode an ifd directory.","Create an ‘ImageEncoder’ to encode an image one slice …","Number of samples the next strip should have.","Set image resolution","Set image resolution unit","Set image number of lines per strip","","","","","","","","","","","","","","","","","","","","Write some data to the tiff file, the offset of the data …","Write strips from data","Convenience function to write an entire image from memory.","Write a single strip.","Write a single ifd tag.","Set image x-resolution","Set image y-resolution","The value of the tiff tag <code>BitsPerSample</code>","","","","","","","Trait for different colortypes that can be encoded.","","","","","","","The type of each sample of this colortype","","","","","","","","","","","","","The value of the tiff tag <code>SampleFormat</code>","The value of the tiff tag <code>PhotometricInterpretation</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","See TIFF compression tags for reference.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","BigTIFF 64-bit unsigned integer","","","","","","","","","","","","","","","","","","","","","","","","","","","Type to represent resolution units","","","","","","","","","","","","","","","TIFF tags","","","","","","","The type of an IFD entry (a 2 byte field).","","","A private or extension tag","An unknown extension sample format","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[4,7,0,4,1,7,7,6,4,4,4,0,4,1,6,4,4,1,1,7,7,7,4,4,4,0,0,0,4,4,0,4,6,6,4,4,6,6,6,6,1,6,6,6,1,4,5,6,7,1,4,5,6,7,1,4,5,6,7,4,5,6,7,0,1,4,5,6,7,1,4,5,6,7,1,1,4,5,6,7,0,4,5,6,7,5,6,7,1,1,4,4,5,6,6,7,1,1,1,1,1,1,4,5,6,7,5,6,7,1,4,5,6,7,1,4,5,6,7,0,4,5,6,7,1,4,6,1,4,5,6,7,1,4,5,6,7,1,4,5,6,7,61,62,61,62,0,0,0,22,21,22,21,0,22,21,22,21,22,21,22,21,21,22,21,26,25,22,21,26,25,25,26,26,25,26,26,22,21,26,25,22,21,26,25,25,22,21,26,25,25,25,25,21,26,25,22,21,26,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,26,22,21,26,25,25,26,22,21,26,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,22,21,26,25,22,21,26,25,22,21,26,25,26,25,29,29,0,29,0,29,29,29,29,29,29,29,29,29,29,29,0,29,43,29,43,29,43,29,43,29,43,29,43,29,43,29,29,43,29,43,29,43,29,43,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,43,43,29,43,29,43,29,43,29,43,43,54,0,54,0,0,0,0,0,47,52,49,51,46,47,52,49,51,46,54,46,46,0,54,47,46,47,46,47,52,49,51,46,47,52,49,51,46,47,52,49,49,51,51,46,51,49,51,47,52,49,51,46,47,52,49,51,46,47,52,49,51,46,47,46,52,52,52,51,51,51,51,46,47,52,49,51,46,47,52,49,51,46,47,52,49,51,46,54,47,46,49,51,52,51,49,51,51,50,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,50,50,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,45,28,45,28,57,57,57,28,28,53,58,28,28,0,28,45,28,56,28,45,56,56,28,28,28,28,28,28,28,28,28,59,28,56,60,28,28,28,53,60,56,28,45,45,56,28,28,28,28,28,28,28,56,28,56,59,53,56,28,56,0,28,58,0,28,0,28,45,57,57,0,28,28,45,45,45,45,45,0,28,28,28,28,28,28,0,28,28,28,28,28,57,0,45,60,28,60,60,57,28,57,28,28,45,56,57,58,59,53,60,28,45,56,57,58,59,53,60,28,45,56,57,58,59,53,60,28,45,56,57,58,59,53,60,28,45,56,57,58,59,53,60,28,45,56,57,58,59,53,60,28,45,56,57,58,59,53,60,28,45,56,57,58,59,53,60,28,45,56,57,58,59,53,60,28,45,56,57,58,59,53,60,28,45,56,57,58,59,53,60,28,45,56,57,58,59,53,60,28,60,28,45,56,57,58,59,53,60,28,45,56,57,58,59,53,60,28,45,56,57,58,59,53,60,28,45,56,57,58,59,53,60,28,45,56,57,58,59,53,60,28,45,56,57,58,59,53,60,28,45,56,57,58,59,53,60,28,45,56,57,58,59,53,60],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[3,[2]]]],[4,4],[5,5],[6,6],[7,7],[[]],[[]],[[]],[[]],0,[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[1,9],[8],[8],[8],[8],[8],0,[[4,4],10],[[5,5],10],[[6,6],10],[[7,7],10],[[],10],[[],10],[[],10],[[1,11],[[13,[12]]]],[[1,11],14],[[4,11],[[13,[12]]]],[[4,11],14],[[5,11],14],[[6,11],[[13,[12]]]],[[6,11],14],[[7,11],14],[15,1],[6,1],[16,1],[[]],[17,1],[4,1],[[]],[[]],[[]],[[]],[[5,18]],[[6,18]],[[7,18]],[[],8],[[],8],[[],8],[[],8],[[],8],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],20],[[],20],[[],20],[[],20],[[],20],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[21,8],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[26,26],[[]],[[[25,[[0,[23,24]]]]],[[27,[7]]]],0,[[],26],[8],[8],[8],[8],[8],[8],[8],[8],[[[25,[[0,[23,24]]]]],27],[8],[8],[8],[8],[[[25,[[0,[23,24]]]],28],[[27,[[3,[29]]]]]],[[[25,[[0,[23,24]]]],28],[[27,[[3,[[31,[30]]]]]]]],[[[25,[[0,[23,24]]]],28],[[27,[[3,[[32,[[31,[30]]]]]]]]]],[[21,11],14],[[26,11],14],[[[25,[[0,[23,24,33]]]],11],14],[[]],[[]],[[]],[[]],[[[25,[[0,[23,24]]]],28],[[27,[29]]]],[[[25,[[0,[23,24]]]],28],[[27,[19]]]],[[[25,[[0,[23,24]]]],28],[[27,[34]]]],[[[25,[[0,[23,24]]]],28],[[27,[[32,[34]]]]]],[[[25,[[0,[23,24]]]],28],[[27,[35]]]],[[[25,[[0,[23,24]]]],28],[[27,[[32,[35]]]]]],[[[25,[[0,[23,24]]]],28],[[27,[[32,[36]]]]]],[[[25,[[0,[23,24]]]],28],[[27,[37]]]],[[[25,[[0,[23,24]]]],28],[[27,[[32,[37]]]]]],[[[25,[[0,[23,24]]]],28],[[27,[30]]]],[[[25,[[0,[23,24]]]],28],[[27,[[32,[30]]]]]],[[[25,[[0,[23,24]]]],28],[[27,[[32,[38]]]]]],[[[25,[[0,[23,24]]]],28],[[27,[[31,[30]]]]]],[[[25,[[0,[23,24]]]],37],39],[[[25,[[0,[23,24]]]],30],39],0,0,[[],8],[[],8],[[],8],[[],8],[[[25,[[0,[23,24]]]]],[[27,[[25,[[0,[23,24]]]]]]]],0,[[]],[[]],[[]],[[]],[[[25,[[0,[23,24]]]]],10],[[[0,[23,24]]],[[27,[[25,[[0,[23,24]]]]]]]],[[[25,[[0,[23,24]]]]],27],[[[25,[[0,[23,24]]]]],[[13,[38,16]]]],[[[25,[[0,[23,24]]]]],[[13,[35,16]]]],[[[25,[[0,[23,24]]]]],[[13,[34,16]]]],[[[25,[[0,[23,24]]]]],[[13,[30,16]]]],[[[25,[[0,[23,24]]]]],[[27,[21]]]],[[[25,[[0,[23,24]]]]],[[27,[21]]]],[[[25,[[0,[23,24]]]]],[[13,[37,16]]]],[[[25,[[0,[23,24]]]]],[[13,[30,16]]]],[[[25,[[0,[23,24]]]]],[[27,[[40,[38]]]]]],[[[25,[[0,[23,24]]]]],[[13,[[40,[38]],16]]]],[[[25,[[0,[23,24]]]]],[[13,[36,16]]]],[[[25,[[0,[23,24]]]]],[[13,[41,16]]]],[[[25,[[0,[23,24]]]]],[[13,[42,16]]]],[[[25,[[0,[23,24]]]],8],[[27,[19]]]],[[[25,[[0,[23,24]]]]],[[27,[21]]]],[[[25,[[0,[23,24]]]],22],27],[[[25,[[0,[23,24]]]]],[[27,[37]]]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],20],[[],20],[[],20],[[],20],[[],26],[[[25,[[0,[23,24]]]],26],[[25,[[0,[23,24]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[29,29],[43,43],[[]],[[]],[8],[8],[8],[8],[8],[8],[[29,29],10],[[29,11],14],[[43,11],[[13,[12]]]],[[]],[[]],[[],8],[[],8],[[]],[[]],[29,[[27,[34]]]],[29,[[27,[[32,[34]]]]]],[29,[[27,[35]]]],[29,[[27,[[32,[35]]]]]],[29,[[27,[41]]]],[29,[[27,[[32,[41]]]]]],[29,[[27,[44]]]],[29,[[27,[[32,[44]]]]]],[29,[[27,[19]]]],[29,[[27,[36]]]],[29,[[27,[[32,[36]]]]]],[29,[[27,[37]]]],[29,[[27,[[32,[37]]]]]],[29,[[27,[30]]]],[29,[[27,[[32,[30]]]]]],[29,[[27,[38]]]],[29,[[27,[[32,[38]]]]]],[[45,37,[40,[38]]],43],[[45,30,[40,[38]]],43],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],20],[[],20],[[43,26,[25,[[0,[23,24]]]]],[[27,[29]]]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],37],[46,46],[[]],0,[[],37],[47,37],[46,37],0,0,[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[[[49,[[0,[48,24]]]]]],[8],[[[51,[[0,[48,24]],50]]]],[8],[8],[[[51,[[0,[48,24]],50]]],[[49,[[0,[48,24]]]]]],[[[49,[[0,[48,24]]]]],27],[[[51,[[0,[48,24]],50]]],27],[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[]],[[]],[[]],[[]],[[]],0,0,[[[0,[48,24]]],[[27,[[52,[[0,[48,24]]]]]]]],[[[52,[[0,[48,24]]]]],[[27,[[49,[[0,[48,24]]]]]]]],[[[52,[[0,[48,24]]]],37,37],[[27,[[51,[[0,[48,24]],50]]]]]],[[[51,[[0,[48,24]],50]]],30],[[[51,[[0,[48,24]],50]],53,46]],[[[51,[[0,[48,24]],50]],53]],[[[51,[[0,[48,24]],50]],37],27],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],20],[[],20],[[],20],[[],20],[[],20],[[[0,[48]]],27],[[47,[0,[48]]],27],[[46,[0,[48]]],27],[[[49,[[0,[48,24]]]],54],[[27,[30]]]],[[[51,[[0,[48,24]],50]],55],27],[[[52,[[0,[48,24]]]],37,37,55],27],[[[51,[[0,[48,24]],50]],55],27],[[[49,[[0,[48,24]]]],28,54],27],[[[51,[[0,[48,24]],50]],46]],[[[51,[[0,[48,24]],50]],46]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[28,28],[45,45],[56,56],[57,57],[58,58],[59,59],[53,53],[60,60],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[[28,28],10],[[45,45],10],[[56,56],10],[[57,57],10],[[58,58],10],[[59,59],10],[[53,53],10],[[60,60],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[28,11],14],[[45,11],14],[[56,11],14],[[57,11],14],[[58,11],14],[[59,11],14],[[53,11],14],[[60,11],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[36,[[3,[28]]]],[36,[[3,[45]]]],[36,[[3,[56]]]],[36,[[3,[57]]]],[36,[[3,[58]]]],[36,[[3,[59]]]],[36,[[3,[53]]]],[36,[[3,[60]]]],[36,28],[36,60],[[28,18]],[[45,18]],[[56,18]],[[57,18]],[[58,18]],[[59,18]],[[53,18]],[[60,18]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[28,36],[45,36],[56,36],[57,36],[58,36],[59,36],[53,36],[60,36],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20]],"c":[],"p":[[4,"TiffError"],[8,"Error"],[4,"Option"],[4,"TiffFormatError"],[3,"InflateError"],[4,"TiffUnsupportedError"],[4,"ColorType"],[15,"usize"],[15,"str"],[15,"bool"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"Result"],[3,"TryFromIntError"],[3,"Error"],[3,"FromUtf8Error"],[8,"Hasher"],[3,"String"],[3,"TypeId"],[4,"DecodingResult"],[4,"DecodingBuffer"],[8,"Read"],[8,"Seek"],[3,"Decoder"],[3,"Limits"],[6,"TiffResult"],[4,"Tag"],[4,"Value"],[15,"u64"],[8,"TryFrom"],[3,"Vec"],[8,"Debug"],[15,"f32"],[15,"f64"],[15,"u16"],[15,"u32"],[15,"u8"],[6,"Result"],[15,"array"],[15,"i32"],[15,"i16"],[3,"Entry"],[15,"i64"],[4,"Type"],[3,"Rational"],[3,"SRational"],[8,"Write"],[3,"DirectoryEncoder"],[8,"ColorType"],[3,"ImageEncoder"],[3,"TiffEncoder"],[4,"ResolutionUnit"],[8,"TiffValue"],[15,"slice"],[4,"CompressionMethod"],[4,"PhotometricInterpretation"],[4,"PlanarConfiguration"],[4,"Predictor"],[4,"SampleFormat"],[13,"UnexpectedCompressedData"],[13,"InconsistentStripSamples"],[3,"Gray8"],[3,"Gray16"],[3,"Gray32"],[3,"Gray32Float"],[3,"Gray64"],[3,"Gray64Float"],[3,"RGB8"],[3,"RGB16"],[3,"RGB32"],[3,"RGB32Float"],[3,"RGB64"],[3,"RGB64Float"],[3,"RGBA8"],[3,"RGBA16"],[3,"RGBA32"],[3,"RGBA32Float"],[3,"RGBA64"],[3,"RGBA64Float"],[3,"CMYK8"],[3,"CMYK16"],[3,"CMYK32"],[3,"CMYK32Float"],[3,"CMYK64"],[3,"CMYK64Float"]]},\
"weezl":{"doc":"LZW decoder and encoder","t":"EDNNNEENNNDLLLLLLLLLLMMLLLLLLMMAALLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["BitOrder","BufferResult","Done","InvalidCode","Lsb","LzwError","LzwStatus","Msb","NoProgress","Ok","StreamResult","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes_read","bytes_written","clone","clone","clone","clone_into","clone_into","clone_into","consumed_in","consumed_out","decode","encode","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","status","status","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Decoder","IntoStream","IntoVec","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","decode","decode","decode","decode_all","decode_all","decode_bytes","from","from","from","has_ended","into","into","into","into_stream","into_vec","new","reset","set_buffer","set_buffer_size","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_tiff_size_switch","Encoder","IntoStream","IntoVec","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","encode","encode","encode","encode_all","encode_all","encode_bytes","finish","from","from","from","into","into","into","into_stream","into_vec","new","reset","set_buffer","set_buffer_size","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_tiff_size_switch"],"q":[[0,"weezl"],[68,"weezl::decode"],[106,"weezl::encode"]],"d":["The order of bits in bytes.","The result of a coding operation on a pair of buffer.","No more data will be produced because an end marker was …","The input contained an invalid code.","The least significant bit is processed first.","The error kind after unsuccessful coding of an LZW stream.","The status after successful coding of an LZW stream.","The most significant bit is processed first.","No bytes were read or written and no internal state …","Everything went well.","The result of coding into an output stream.","","","","","","","","","","","The total number of bytes consumed from the reader.","The total number of bytes written into the writer.","","","","","","","The number of bytes consumed from the input buffer.","The number of bytes written into the output buffer.","A module for all decoding needs.","A module for all encoding needs.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The status after returning from the write call.","The possible error that occurred.","","","","","","","","","","","","","","","","","","","","The state for decoding data with an LZW algorithm.","A decoding stream sink.","A decoding sink into a vector.","","","","","","","Decode a single chunk of lzw encoded data.","Decode data from a reader.","Decode data from a slice.","Decode data from a reader, requiring an end marker.","Decode data from a slice, requiring an end marker.","Decode some bytes from <code>inp</code> and write result to <code>out</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Check if the decoding has finished.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Construct a decoder into a writer.","Construct a decoder into a vector.","Create a new decoder with the specified bit order and …","Reset all internal state.","Use a particular buffer as an intermediate decode buffer.","Set the size of the intermediate decode buffer.","","","","","","","","","","Create a TIFF compatible decoder with the specified bit …","The state for encoding data with an LZW algorithm.","A encoding stream sink.","A encoding sink into a vector.","","","","","","","Encode a single chunk of data.","Encode data from a reader.","Encode data from a slice.","Encode data from a reader and an end marker.","Decode data from a reader, adding an end marker.","Encode some bytes from <code>inp</code> into <code>out</code>.","Mark the encoding as in the process of finishing.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Construct a encoder into a writer.","Construct an encoder into a vector.","Create a new encoder with the specified bit order and …","Reset all internal state.","Use a particular buffer as an intermediate encode buffer.","Set the size of the intermediate encode buffer.","","","","","","","","","","Create a TIFF compatible encoder with the specified bit …"],"i":[0,0,2,3,1,0,0,1,2,2,0,18,16,1,2,3,18,16,1,2,3,16,16,1,2,3,1,2,3,18,18,0,0,1,2,3,3,18,16,1,2,3,18,16,1,2,3,18,16,1,2,3,3,18,16,1,2,3,18,16,1,2,3,18,16,1,2,3,0,0,0,9,14,17,9,14,17,9,14,17,14,17,9,9,14,17,9,9,14,17,9,9,9,9,14,14,9,14,17,9,14,17,9,14,17,9,0,0,0,21,22,23,21,22,23,21,22,23,22,23,21,21,21,22,23,21,22,23,21,21,21,21,22,22,21,22,23,21,22,23,21,22,23,21],"f":[0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[1,1],[2,2],[3,3],[[]],[[]],[[]],0,0,0,0,[[1,4],5],[[2,4],5],[[3,4],5],[[3,4],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[],6],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],[[],8],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[9,[11,[10]]],[[7,[[12,[10]],3]]]],[[[14,[13]],15],16],0,[[[14,[13]],15],16],0,[[9,[11,[10]],[11,[10]]],18],[[]],[[]],[[]],[9,19],[[]],[[]],[[]],[[9,13],[[14,[13]]]],[[9,[12,[10]]],17],[[1,10],9],[9],[[[14,[13]],[11,[10]]]],[[[14,[13]],20]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[1,10],9],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[21,[11,[10]]],[[7,[[12,[10]],3]]]],[[[22,[13]],15],16],0,[[[22,[13]],15],16],0,[[21,[11,[10]],[11,[10]]],18],[21],[[]],[[]],[[]],[[]],[[]],[[]],[[21,13],[[22,[13]]]],[[21,[12,[10]]],23],[[1,10],21],[21],[[[22,[13]],[11,[10]]]],[[[22,[13]],20]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[1,10],21]],"c":[],"p":[[4,"BitOrder"],[4,"LzwStatus"],[4,"LzwError"],[3,"Formatter"],[6,"Result"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"Decoder"],[15,"u8"],[15,"slice"],[3,"Vec"],[8,"Write"],[3,"IntoStream"],[8,"BufRead"],[3,"StreamResult"],[3,"IntoVec"],[3,"BufferResult"],[15,"bool"],[15,"usize"],[3,"Encoder"],[3,"IntoStream"],[3,"IntoVec"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
